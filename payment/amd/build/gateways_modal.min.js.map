{"version":3,"file":"gateways_modal.min.js","sources":["../src/gateways_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the gateways modal.\n *\n * @module     core_payment/gateways_modal\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport {getAvailableGateways} from './repository';\nimport Selectors from './selectors';\nimport ModalEvents from 'core/modal_events';\nimport PaymentEvents from 'core_payment/events';\nimport {add as addToast, addToastRegion} from 'core/toast';\nimport Notification from 'core/notification';\nimport ModalGateways from './modal_gateways';\n\n/**\n * Register event listeners for the module.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const gatewayTrigger = e.target.closest('[data-action=\"core_payment/triggerPayment\"]');\n        if (gatewayTrigger) {\n            e.preventDefault();\n\n            show(gatewayTrigger, {focusOnClose: e.target});\n        }\n    });\n};\n\n/**\n * Shows the gateway selector modal.\n *\n * @param {HTMLElement} rootNode\n * @param {Object} options - Additional options\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\n */\nconst show = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n\n    // Load upfront, so we don't try to inject the internal content into a possibly-not-yet-resolved promise.\n    const body = await Templates.render('core_payment/gateways_modal', {});\n\n    const modal = await ModalGateways.create({\n        title: getString('selectpaymenttype', 'core_payment'),\n        body: body,\n        show: true,\n        removeOnClose: true,\n    });\n\n    const rootElement = modal.getRoot()[0];\n    addToastRegion(rootElement);\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        focusOnClose?.focus();\n    });\n\n    modal.getRoot().on(PaymentEvents.proceed, async(e) => {\n        e.preventDefault();\n        const gateway = (rootElement.querySelector(Selectors.values.gateway) || {value: ''}).value;\n\n        if (gateway) {\n            processPayment(\n                gateway,\n                rootNode.dataset.component,\n                rootNode.dataset.paymentarea,\n                rootNode.dataset.itemid,\n                rootNode.dataset.description\n            ).then((message) => {\n                modal.hide();\n                Notification.addNotification({\n                    message,\n                    type: 'success',\n                });\n                location.href = rootNode.dataset.successurl;\n\n                return;\n            }).catch(message => Notification.alert('', message));\n        } else {\n            // We cannot use await in the following line.\n            // The reason is that we are preventing the default action of the save event being triggered,\n            // therefore we cannot define the event handler function asynchronous.\n            addToast(getString('nogatewayselected', 'core_payment'), {\n                type: 'warning',\n            });\n        }\n    });\n\n    // Re-calculate the cost when gateway is changed.\n    rootElement.addEventListener('change', e => {\n        if (e.target.matches(Selectors.elements.gateways)) {\n            updateCostRegion(rootElement, rootNode.dataset.cost);\n        }\n    });\n\n    const gateways = await getAvailableGateways(rootNode.dataset.component, rootNode.dataset.paymentarea, rootNode.dataset.itemid);\n    const context = {\n        gateways\n    };\n\n    const {html, js} = await Templates.renderForPromise('core_payment/gateways', context);\n    Templates.replaceNodeContents(rootElement.querySelector(Selectors.regions.gatewaysContainer), html, js);\n    selectSingleGateway(rootElement);\n    await updateCostRegion(rootElement, rootNode.dataset.cost);\n};\n\n/**\n * Auto-select the gateway if there is only one gateway.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n */\nconst selectSingleGateway = root => {\n    const gateways = root.querySelectorAll(Selectors.elements.gateways);\n\n    if (gateways.length == 1) {\n        gateways[0].checked = true;\n    }\n};\n\n/**\n * Shows the cost of the item the user is purchasing in the cost region.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n * @param {string} defaultCost The default cost that is going to be displayed if no gateway is selected\n * @returns {Promise<void>}\n */\nconst updateCostRegion = async(root, defaultCost = '') => {\n    const gatewayElement = root.querySelector(Selectors.values.gateway);\n    const surcharge = parseInt((gatewayElement || {dataset: {surcharge: 0}}).dataset.surcharge);\n    const cost = (gatewayElement || {dataset: {cost: defaultCost}}).dataset.cost;\n    const valueStr = surcharge ? await getString('feeincludesurcharge', 'core_payment', {fee: cost, surcharge: surcharge}) : cost;\n\n    const surchargeStr = await getString('labelvalue', 'core',\n        {\n            label: await getString('cost', 'core'),\n            value: valueStr\n        }\n    );\n\n    const {html, js} = await Templates.renderForPromise('core_payment/fee_breakdown', {surchargestr: surchargeStr});\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.costContainer), html, js);\n};\n\n/**\n * Process payment using the selected gateway.\n *\n * @param {string} gateway The gateway to be used for payment\n * @param {string} component Name of the component that the itemId belongs to\n * @param {string} paymentArea Name of the area in the component that the itemId belongs to\n * @param {number} itemId An internal identifier that is used by the component\n * @param {string} description Description of the payment\n * @returns {Promise<string>}\n */\nconst processPayment = async(gateway, component, paymentArea, itemId, description) => {\n    const paymentMethod = await import(`paygw_${gateway}/gateways_modal`);\n    return paymentMethod.process(component, paymentArea, itemId, description);\n};\n/**\n * Checking the radio for showing the input text field.\n *\n * @param {Event} e event\n */\nexport const checkRadio = (e) => {\n    var name = e.target.getAttribute('name');\n    var radioval = $(\"input[name='\"+name+\"']:checked\").val();\n    if (radioval == 'other') {\n        $(\"input[name='mobilenumber']\").css('display','block');\n    } else {\n        $(\"input[name='mobilenumber']\").css('display','none');\n    }\n};\n/**\n * Set up the payment actions.\n */\nexport const init = () => {\n    if (!init.initialised) {\n        // Event listeners should only be registered once.\n        init.initialised = true;\n        registerEventListeners();\n    }\n};\n\n/**\n * Whether the init function was called before.\n *\n * @static\n * @type {boolean}\n */\ninit.initialised = false;\n"],"names":["_jquery","_interopRequireDefault","_templates","_selectors","_modal_events","_events","_notification","_modal_gateways","_systemImportTransformerGlobalIdentifier","window","self","global","obj","__esModule","default","show","async","rootNode","focusOnClose","arguments","length","undefined","body","Templates","render","modal","ModalGateways","create","title","getString","removeOnClose","rootElement","getRoot","addToastRegion","on","ModalEvents","hidden","focus","PaymentEvents","proceed","e","preventDefault","gateway","querySelector","Selectors","values","value","processPayment","dataset","component","paymentarea","itemid","description","then","message","hide","Notification","addNotification","type","location","href","successurl","catch","alert","addToast","addEventListener","target","matches","elements","gateways","updateCostRegion","cost","context","getAvailableGateways","html","js","renderForPromise","replaceNodeContents","regions","gatewaysContainer","selectSingleGateway","root","querySelectorAll","checked","defaultCost","gatewayElement","surcharge","parseInt","valueStr","fee","surchargeStr","label","surchargestr","costContainer","paymentArea","itemId","define","amd","Promise","resolve","reject","require","module","exports","loader","process","_exports","checkRadio","name","getAttribute","$","val","css","init","initialised","document","gatewayTrigger","closest"],"mappings":"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"}