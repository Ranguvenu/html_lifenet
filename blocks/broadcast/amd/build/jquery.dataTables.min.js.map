{"version":3,"file":"jquery.dataTables.min.js","sources":["../src/jquery.dataTables.js"],"sourcesContent":["/*! DataTables 1.10.15\n * Â©2008-2017 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.15\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   Copyright 2008-2017 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n/*globals module,jQuery*/\n(function( factory ) {\n    \"use strict\";\n    if ( typeof define === 'function' && define.amd ) {\n        // AMD\n        define( ['jquery'], function ( $ ) {\n            return factory( $, window, document );\n        } );\n    }\n    else if ( typeof exports === 'object' ) {\n        // CommonJS\n        module.exports = function (root, $) {\n            if ( ! root ) {\n                // CommonJS environments without a window global must pass a\n                // root. This will give an error otherwise\n                root = window;\n            }\n\n            if ( ! $ ) {\n                $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\n                    require('jquery') :\n                    require('jquery')( root );\n            }\n\n            return factory( $, root, root.document );\n        };\n    }\n    else {\n        // Browser\n        factory( jQuery, window, document );\n    }\n}(function( $, window, document ) {\n    \"use strict\";\n    /**\n     * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n     * flexible tool, based upon the foundations of progressive enhancement,\n     * which will add advanced interaction controls to any HTML table. For a\n     * full list of features please refer to\n     * [DataTables.net](href=\"http://datatables.net).\n     *\n     * Note that the `DataTable` object is not a global variable but is aliased\n     * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n     * be  accessed.\n     *\n     *  @class\n     *  @param {object} [options={}] Configuration object for DataTables. Options\n     *    are defined by {@link DataTable.defaults}\n     *  @requires jQuery 1.7+\n     *\n     *  @example\n     *    // Basic initialisation\n     *    $(document).ready( function {\n     *      $('#example').dataTable();\n     *    } );\n     *\n     *  @example\n     *    // Initialisation with configuration options - in this case, disable\n     *    // pagination and sorting.\n     *    $(document).ready( function {\n     *      $('#example').dataTable( {\n     *        \"paginate\": false,\n     *        \"sort\": false\n     *      } );\n     *    } );\n     */\n    var DataTable = function ( options )\n    {\n        /**\n         * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n         * return the resulting jQuery object.\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n         *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n         *    criterion (\"applied\") or all TR elements (i.e. no filter).\n         *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n         *    Can be either 'current', whereby the current sorting of the table is used, or\n         *    'original' whereby the original order the data was read into the table is used.\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n         *    'current' and filter is 'applied', regardless of what they might be given as.\n         *  @returns {object} jQuery object, filtered by the given selector.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Highlight every second row\n         *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n         *    } );\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Filter to rows with 'Webkit' in them, add a background colour and then\n         *      // remove the filter, thus highlighting the 'Webkit' rows only.\n         *      oTable.fnFilter('Webkit');\n         *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n         *      oTable.fnFilter('');\n         *    } );\n         */\n        this.$ = function ( sSelector, oOpts )\n        {\n            return this.api(true).$( sSelector, oOpts );\n        };\n        /**\n         * Almost identical to $ in operation, but in this case returns the data for the matched\n         * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n         * rather than any descendants, so the data can be obtained for the row/cell. If matching\n         * rows are found, the data returned is the original data array/object that was used to\n         * create the row (or a generated array if from a DOM source).\n         *\n         * This method is often useful in-combination with $ where both functions are given the\n         * same parameters and the array indexes will match identically.\n         *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n         *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n         *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n         *    criterion (\"applied\") or all elements (i.e. no filter).\n         *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n         *    Can be either 'current', whereby the current sorting of the table is used, or\n         *    'original' whereby the original order the data was read into the table is used.\n         *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n         *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n         *    'current' and filter is 'applied', regardless of what they might be given as.\n         *  @returns {array} Data for the matched elements. If any elements, as a result of the\n         *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n         *    entry in the array.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Get the data from the first row in the table\n         *      var data = oTable._('tr:first');\n         *\n         *      // Do something useful with the data\n         *      alert( \"First cell is: \"+data[0] );\n         *    } );\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Filter to 'Webkit' and get all data for\n         *      oTable.fnFilter('Webkit');\n         *      var data = oTable._('tr', {\"search\": \"applied\"});\n         *\n         *      // Do something with the data\n         *      alert( data.length+\" rows matched the search\" );\n         *    } );\n         */\n        this._ = function ( sSelector, oOpts )\n        {\n            return this.api(true).rows( sSelector, oOpts ).data();\n        };\n        /**\n         * Create a DataTables Api instance, with the currently selected tables for\n         * the Api's context.\n         * @param {boolean} [traditional=false] Set the API instance's context to be\n         *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n         *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n         *   or if all tables captured in the jQuery object should be used.\n         * @return {DataTables.Api}\n         */\n        this.api = function ( traditional )\n        {\n            return traditional ?\n                new _Api(\n                    _fnSettingsFromNode( this[_ext.iApiIndex] )\n                ) :\n                new _Api( this );\n        };\n        /**\n         * Add a single new row or multiple rows of data to the table. Please note\n         * that this is suitable for client-side processing only - if you are using\n         * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n         * must add it to the data source, i.e. the server-side, through an Ajax call.\n         *  @param {array|object} data The data to be added to the table. This can be:\n         *    <ul>\n         *      <li>1D array of data - add a single row with the data provided</li>\n         *      <li>2D array of arrays - add multiple rows in a single call</li>\n         *      <li>object - data object when using <i>mData</i></li>\n         *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n         *    </ul>\n         *  @param {bool} [redraw=true] redraw the table or not\n         *  @returns {array} An array of integers, representing the list of indexes in\n         *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n         *    the table.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    // Global var for counter\n         *    var giCount = 2;\n         *\n         *    $(document).ready(function() {\n         *      $('#example').dataTable();\n         *    } );\n         *\n         *    function fnClickAddRow() {\n         *      $('#example').dataTable().fnAddData( [\n         *        giCount+\".1\",\n         *        giCount+\".2\",\n         *        giCount+\".3\",\n         *        giCount+\".4\" ]\n         *      );\n         *\n         *      giCount++;\n         *    }\n         */\n        this.fnAddData = function( data, redraw )\n        {\n            var api = this.api( true );\n            /* Check if we want to add multiple rows or not */\n            var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\n                api.rows.add( data ) :\n                api.row.add( data );\n            if ( redraw === undefined || redraw ) {\n                api.draw();\n            }\n            return rows.flatten().toArray();\n        };\n        /**\n         * This function will make DataTables recalculate the column sizes, based on the data\n         * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n         * through the sWidth parameter). This can be useful when the width of the table's\n         * parent element changes (for example a window resize).\n         *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable( {\n         *        \"sScrollY\": \"200px\",\n         *        \"bPaginate\": false\n         *      } );\n         *\n         *      $(window).on('resize', function () {\n         *        oTable.fnAdjustColumnSizing();\n         *      } );\n         *    } );\n         */\n        this.fnAdjustColumnSizing = function ( bRedraw )\n        {\n            var api = this.api( true ).columns.adjust();\n            var settings = api.settings()[0];\n            var scroll = settings.oScroll;\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw( false );\n            }\n            else if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\n                /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n                _fnScrollDraw( settings );\n            }\n        };\n        /**\n         * Quickly and simply clear a table\n         *  @param {bool} [bRedraw=true] redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n         *      oTable.fnClearTable();\n         *    } );\n         */\n        this.fnClearTable = function( bRedraw )\n        {\n            var api = this.api( true ).clear();\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw();\n            }\n        };\n        /**\n         * The exact opposite of 'opening' a row, this function will close any rows which\n         * are currently 'open'.\n         *  @param {node} nTr the table row to 'close'\n         *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable;\n         *\n         *      // 'open' an information row when a row is clicked on\n         *      $('#example tbody tr').click( function () {\n         *        if ( oTable.fnIsOpen(this) ) {\n         *          oTable.fnClose( this );\n         *        } else {\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n         *        }\n         *      } );\n         *\n         *      oTable = $('#example').dataTable();\n         *    } );\n         */\n        this.fnClose = function( nTr )\n        {\n            this.api( true ).row( nTr ).child.hide();\n        };\n        /**\n         * Remove a row for the table\n         *  @param {mixed} target The index of the row from aoData to be deleted, or\n         *    the TR element you want to delete\n         *  @param {function|null} [callback] Callback function\n         *  @param {bool} [redraw=true] Redraw the table or not\n         *  @returns {array} The row that was deleted\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Immediately remove the first row\n         *      oTable.fnDeleteRow( 0 );\n         *    } );\n         */\n        this.fnDeleteRow = function( target, callback, redraw )\n        {\n            var api = this.api( true );\n            var rows = api.rows( target );\n            var settings = rows.settings()[0];\n            var data = settings.aoData[rows[0][0]];\n            rows.remove();\n            if ( callback ) {\n                callback.call( this, settings, data );\n            }\n            if ( redraw === undefined || redraw ) {\n                api.draw();\n            }\n            return data;\n        };\n        /**\n         * Restore the table to it's original state in the DOM by removing all of DataTables\n         * enhancements, alterations to the DOM structure of the table and event listeners.\n         *  @param {boolean} [remove=false] Completely remove the table from the DOM\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n         *      var oTable = $('#example').dataTable();\n         *      oTable.fnDestroy();\n         *    } );\n         */\n        this.fnDestroy = function ( remove )\n        {\n            this.api( true ).destroy( remove );\n        };\n        /**\n         * Redraw the table\n         *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n         *      oTable.fnDraw();\n         *    } );\n         */\n        this.fnDraw = function( complete )\n        {\n            // Note that this isn't an exact match to the old call to _fnDraw - it takes\n            // into account the new data, but can hold position.\n            this.api( true ).draw( complete );\n        };\n        /**\n         * Filter the input based on data\n         *  @param {string} sInput String to filter the table on\n         *  @param {int|null} [iColumn] Column to limit filtering to\n         *  @param {bool} [bRegex=false] Treat as regular expression or not\n         *  @param {bool} [bSmart=true] Perform smart filtering or not\n         *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n         *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Sometime later - filter...\n         *      oTable.fnFilter( 'test string' );\n         *    } );\n         */\n        this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\n        {\n            var api = this.api( true );\n            if ( iColumn === null || iColumn === undefined ) {\n                api.search( sInput, bRegex, bSmart, bCaseInsensitive );\n            }\n            else {\n                api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\n            }\n            api.draw();\n        };\n        /**\n         * Get the data for the whole table, an individual row or an individual cell based on the\n         * provided parameters.\n         *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n         *    a TR node then the data source for the whole row will be returned. If given as a\n         *    TD/TH cell node then iCol will be automatically calculated and the data for the\n         *    cell returned. If given as an integer, then this is treated as the aoData internal\n         *    data index for the row (see fnGetPosition) and the data for that row used.\n         *  @param {int} [col] Optional column index that you want the data of.\n         *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n         *    returned. If mRow is defined, just data for that row, and is iCol is\n         *    defined, only data for the designated cell is returned.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    // Row data\n         *    $(document).ready(function() {\n         *      oTable = $('#example').dataTable();\n         *\n         *      oTable.$('tr').click( function () {\n         *        var data = oTable.fnGetData( this );\n         *        // ... do something with the array / object of data for the row\n         *      } );\n         *    } );\n         *\n         *  @example\n         *    // Individual cell data\n         *    $(document).ready(function() {\n         *      oTable = $('#example').dataTable();\n         *\n         *      oTable.$('td').click( function () {\n         *        var sData = oTable.fnGetData( this );\n         *        alert( 'The cell clicked on had the value of '+sData );\n         *      } );\n         *    } );\n         */\n        this.fnGetData = function( src, col )\n        {\n            var api = this.api( true );\n            if ( src !== undefined ) {\n                var type = src.nodeName ? src.nodeName.toLowerCase() : '';\n                return col !== undefined || type == 'td' || type == 'th' ?\n                    api.cell( src, col ).data() :\n                    api.row( src ).data() || null;\n            }\n            return api.data().toArray();\n        };\n        /**\n         * Get an array of the TR nodes that are used in the table's body. Note that you will\n         * typically want to use the '$' API method in preference to this as it is more\n         * flexible.\n         *  @param {int} [iRow] Optional row index for the TR element you want\n         *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n         *    in the table's body, or iRow is defined, just the TR element requested.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Get the nodes from the table\n         *      var nNodes = oTable.fnGetNodes( );\n         *    } );\n         */\n        this.fnGetNodes = function( iRow )\n        {\n            var api = this.api( true );\n            return iRow !== undefined ?\n                api.row( iRow ).node() :\n                api.rows().nodes().flatten().toArray();\n        };\n        /**\n         * Get the array indexes of a particular cell from it's DOM element\n         * and column index including hidden columns\n         *  @param {node} node this can either be a TR, TD or TH in the table's body\n         *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n         *    if given as a cell, an array of [row index, column index (visible),\n         *    column index (all)] is given.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      $('#example tbody td').click( function () {\n         *        // Get the position of the current data from the node\n         *        var aPos = oTable.fnGetPosition( this );\n         *\n         *        // Get the data array for this row\n         *        var aData = oTable.fnGetData( aPos[0] );\n         *\n         *        // Update the data array and return the value\n         *        aData[ aPos[1] ] = 'clicked';\n         *        this.innerHTML = 'clicked';\n         *      } );\n         *\n         *      // Init DataTables\n         *      oTable = $('#example').dataTable();\n         *    } );\n         */\n        this.fnGetPosition = function( node )\n        {\n            var api = this.api( true );\n            var nodeName = node.nodeName.toUpperCase();\n            if ( nodeName == 'TR' ) {\n                return api.row( node ).index();\n            }\n            else if ( nodeName == 'TD' || nodeName == 'TH' ) {\n                var cell = api.cell( node ).index();\n                return [\n                    cell.row,\n                    cell.columnVisible,\n                    cell.column\n                ];\n            }\n            return null;\n        };\n        /**\n         * Check to see if a row is 'open' or not.\n         *  @param {node} nTr the table row to check\n         *  @returns {boolean} true if the row is currently open, false otherwise\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable;\n         *\n         *      // 'open' an information row when a row is clicked on\n         *      $('#example tbody tr').click( function () {\n         *        if ( oTable.fnIsOpen(this) ) {\n         *          oTable.fnClose( this );\n         *        } else {\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n         *        }\n         *      } );\n         *\n         *      oTable = $('#example').dataTable();\n         *    } );\n         */\n        this.fnIsOpen = function( nTr )\n        {\n            return this.api( true ).row( nTr ).child.isShown();\n        };\n        /**\n         * This function will place a new row directly after a row which is currently\n         * on display on the page, with the HTML contents that is passed into the\n         * function. This can be used, for example, to ask for confirmation that a\n         * particular record should be deleted.\n         *  @param {node} nTr The table row to 'open'\n         *  @param {string|node|jQuery} mHtml The HTML to put into the row\n         *  @param {string} sClass Class to give the new TD cell\n         *  @returns {node} The row opened. Note that if the table row passed in as the\n         *    first parameter, is not found in the table, this method will silently\n         *    return.\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable;\n         *\n         *      // 'open' an information row when a row is clicked on\n         *      $('#example tbody tr').click( function () {\n         *        if ( oTable.fnIsOpen(this) ) {\n         *          oTable.fnClose( this );\n         *        } else {\n         *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n         *        }\n         *      } );\n         *\n         *      oTable = $('#example').dataTable();\n         *    } );\n         */\n        this.fnOpen = function( nTr, mHtml, sClass )\n        {\n            return this.api( true )\n                .row( nTr )\n                .child( mHtml, sClass )\n                .show()\n                .child()[0];\n        };\n        /**\n         * Change the pagination - provides the internal logic for pagination in a simple API\n         * function. With this function you can have a DataTables table go to the next,\n         * previous, first or last pages.\n         *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n         *    or page number to jump to (integer), note that page 0 is the first page.\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *      oTable.fnPageChange( 'next' );\n         *    } );\n         */\n        this.fnPageChange = function ( mAction, bRedraw )\n        {\n            var api = this.api( true ).page( mAction );\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw(false);\n            }\n        };\n        /**\n         * Show a particular column\n         *  @param {int} iCol The column whose display should be changed\n         *  @param {bool} bShow Show (true) or hide (false) the column\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Hide the second column after initialisation\n         *      oTable.fnSetColumnVis( 1, false );\n         *    } );\n         */\n        this.fnSetColumnVis = function ( iCol, bShow, bRedraw )\n        {\n            var api = this.api( true ).column( iCol ).visible( bShow );\n            if ( bRedraw === undefined || bRedraw ) {\n                api.columns.adjust().draw();\n            }\n        };\n        /**\n         * Get the settings for a particular table for external manipulation\n         *  @returns {object} DataTables settings object. See\n         *    {@link DataTable.models.oSettings}\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *      var oSettings = oTable.fnSettings();\n         *\n         *      // Show an example parameter from the settings\n         *      alert( oSettings._iDisplayStart );\n         *    } );\n         */\n        this.fnSettings = function()\n        {\n            return _fnSettingsFromNode( this[_ext.iApiIndex] );\n        };\n        /**\n         * Sort the table by a particular column\n         *  @param {int} aaSort the data index to sort on. Note that this will not match the\n         *    'display index' if you have hidden data entries\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Sort immediately with columns 0 and 1\n         *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n         *    } );\n         */\n        this.fnSort = function( aaSort )\n        {\n            this.api( true ).order( aaSort ).draw();\n        };\n        /**\n         * Attach a sort listener to an element for a given column\n         *  @param {node} nNode the element to attach the sort listener to\n         *  @param {int} iColumn the column that a click on this node will sort on\n         *  @param {function} [fnCallback] callback function when sort is run\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *\n         *      // Sort on column 1, when 'sorter' is clicked on\n         *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n         *    } );\n         */\n        this.fnSortListener = function( nNode, iColumn, fnCallback )\n        {\n            this.api( true ).order.listener( nNode, iColumn, fnCallback );\n        };\n        /**\n         * Update a table cell or row - this method will accept either a single value to\n         * update the cell with, an array of values with one element for each column or\n         * an object in the same format as the original data source. The function is\n         * self-referencing in order to make the multi column updates easier.\n         *  @param {object|array|string} mData Data to update the cell/row with\n         *  @param {node|int} mRow TR element you want to update or the aoData index\n         *  @param {int} [iColumn] The column to update, give as null or undefined to\n         *    update a whole row.\n         *  @param {bool} [bRedraw=true] Redraw the table or not\n         *  @param {bool} [bAction=true] Perform pre-draw actions or not\n         *  @returns {int} 0 on success, 1 on error\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n         *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n         *    } );\n         */\n        this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\n        {\n            var api = this.api( true );\n            if ( iColumn === undefined || iColumn === null ) {\n                api.row( mRow ).data( mData );\n            }\n            else {\n                api.cell( mRow, iColumn ).data( mData );\n            }\n            if ( bAction === undefined || bAction ) {\n                api.columns.adjust();\n            }\n            if ( bRedraw === undefined || bRedraw ) {\n                api.draw();\n            }\n            return 0;\n        };\n        /**\n         * Provide a common method for plug-ins to check the version of DataTables being used, in order\n         * to ensure compatibility.\n         *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n         *    formats \"X\" and \"X.Y\" are also acceptable.\n         *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n         *    version, or false if this version of DataTales is not suitable\n         *  @method\n         *  @dtopt API\n         *  @deprecated Since v1.10\n         *\n         *  @example\n         *    $(document).ready(function() {\n         *      var oTable = $('#example').dataTable();\n         *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n         *    } );\n         */\n        this.fnVersionCheck = _ext.fnVersionCheck;\n        var _that = this;\n        var emptyInit = options === undefined;\n        var len = this.length;\n        if ( emptyInit ) {\n            options = {};\n        }\n        this.oApi = this.internal = _ext.internal;\n        // Extend with old style plug-in API methods\n        for ( var fn in DataTable.ext.internal ) {\n            if ( fn ) {\n                this[fn] = _fnExternApiFunc(fn);\n            }\n        }\n        this.each(function() {\n            // For each initialisation we want to give it a clean initialisation\n            // object that can be bashed around\n            var o = {};\n            var oInit = len > 1 ? // optimisation for single table case\n                _fnExtend( o, options, true ) :\n                options;\n            var i=0, iLen;\n            var sId = this.getAttribute( 'id' );\n            var bInitHandedOff = false;\n            var defaults = DataTable.defaults;\n            var $this = $(this);\n            /* Sanity check */\n            if ( this.nodeName.toLowerCase() != 'table' )\n            {\n                _fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\n                return;\n            }\n            /* Backwards compatibility for the defaults */\n            _fnCompatOpts( defaults );\n            _fnCompatCols( defaults.column );\n            /* Convert the camel-case defaults to Hungarian */\n            _fnCamelToHungarian( defaults, defaults, true );\n            _fnCamelToHungarian( defaults.column, defaults.column, true );\n            /* Setting up the initialisation object */\n            _fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );\n            /* Check to see if we are re-initialising a table */\n            var allSettings = DataTable.settings;\n            for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\n            {\n                var s = allSettings[i];\n                /* Base check on table node */\n                if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )\n                {\n                    var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n                    var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n                    if ( emptyInit || bRetrieve )\n                    {\n                        return s.oInstance;\n                    }\n                    else if ( bDestroy )\n                    {\n                        s.oInstance.fnDestroy();\n                        break;\n                    }\n                    else\n                    {\n                        _fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\n                        return;\n                    }\n                }\n                /* If the element we are initialising has the same ID as a table which was previously\n                 * initialised, but the table nodes don't match (from before) then we destroy the old\n                 * instance by simply deleting it. This is under the assumption that the table has been\n                 * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n                 */\n                if ( s.sTableId == this.id )\n                {\n                    allSettings.splice( i, 1 );\n                    break;\n                }\n            }\n            /* Ensure the table has an ID - required for accessibility */\n            if ( sId === null || sId === \"\" )\n            {\n                sId = \"DataTables_Table_\"+(DataTable.ext._unique++);\n                this.id = sId;\n            }\n            /* Create the settings object for this table and set some of the default parameters */\n            var oSettings = $.extend( true, {}, DataTable.models.oSettings, {\n                \"sDestroyWidth\": $this[0].style.width,\n                \"sInstance\":     sId,\n                \"sTableId\":      sId\n            } );\n            oSettings.nTable = this;\n            oSettings.oApi   = _that.internal;\n            oSettings.oInit  = oInit;\n            allSettings.push( oSettings );\n            // Need to add the instance after the instance after the settings object has been added\n            // to the settings array, so we can self reference the table instance if more than one\n            oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\n            // Backwards compatibility, before we apply all the defaults\n            _fnCompatOpts( oInit );\n            if ( oInit.oLanguage )\n            {\n                _fnLanguageCompat( oInit.oLanguage );\n            }\n            // If the length menu is given, but the init display length is not, use the length menu\n            if ( oInit.aLengthMenu && ! oInit.iDisplayLength )\n            {\n                oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\n                    oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n            }\n            // Apply the defaults and init options to make a single init object will all\n            // options defined from defaults and instance options.\n            oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\n            // Map the initialisation options onto the settings object\n            _fnMap( oSettings.oFeatures, oInit, [\n                \"bPaginate\",\n                \"bLengthChange\",\n                \"bFilter\",\n                \"bSort\",\n                \"bSortMulti\",\n                \"bInfo\",\n                \"bProcessing\",\n                \"bAutoWidth\",\n                \"bSortClasses\",\n                \"bServerSide\",\n                \"bDeferRender\"\n            ] );\n            _fnMap( oSettings, oInit, [\n                \"asStripeClasses\",\n                \"ajax\",\n                \"fnServerData\",\n                \"fnFormatNumber\",\n                \"sServerMethod\",\n                \"aaSorting\",\n                \"aaSortingFixed\",\n                \"aLengthMenu\",\n                \"sPaginationType\",\n                \"sAjaxSource\",\n                \"sAjaxDataProp\",\n                \"iStateDuration\",\n                \"sDom\",\n                \"bSortCellsTop\",\n                \"iTabIndex\",\n                \"fnStateLoadCallback\",\n                \"fnStateSaveCallback\",\n                \"renderer\",\n                \"searchDelay\",\n                \"rowId\",\n                [ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\n                [ \"oSearch\", \"oPreviousSearch\" ],\n                [ \"aoSearchCols\", \"aoPreSearchCols\" ],\n                [ \"iDisplayLength\", \"_iDisplayLength\" ],\n                [ \"bJQueryUI\", \"bJUI\" ]\n            ] );\n            _fnMap( oSettings.oScroll, oInit, [\n                [ \"sScrollX\", \"sX\" ],\n                [ \"sScrollXInner\", \"sXInner\" ],\n                [ \"sScrollY\", \"sY\" ],\n                [ \"bScrollCollapse\", \"bCollapse\" ]\n            ] );\n            _fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\n            /* Callback functions which are array driven */\n            _fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\n            _fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\n            _fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\n            _fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\n            _fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\n            _fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\n            _fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\n            _fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\n            _fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\n            _fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\n            _fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\n            oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\n            /* Browser support detection */\n            _fnBrowserDetect( oSettings );\n            var oClasses = oSettings.oClasses;\n            // @todo Remove in 1.11\n            if ( oInit.bJQueryUI )\n            {\n                /* Use the JUI classes object for display. You could clone the oStdClasses object if\n                 * you want to have multiple tables with multiple independent classes\n                 */\n                $.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );\n                if ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )\n                {\n                    /* Set the DOM to use a layout suitable for jQuery UI's theming */\n                    oSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';\n                }\n                if ( ! oSettings.renderer ) {\n                    oSettings.renderer = 'jqueryui';\n                }\n                else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {\n                    oSettings.renderer.header = 'jqueryui';\n                }\n            }\n            else\n            {\n                $.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\n            }\n            $this.addClass( oClasses.sTable );\n            if ( oSettings.iInitDisplayStart === undefined )\n            {\n                /* Display start point, taking into account the save saving */\n                oSettings.iInitDisplayStart = oInit.iDisplayStart;\n                oSettings._iDisplayStart = oInit.iDisplayStart;\n            }\n            if ( oInit.iDeferLoading !== null )\n            {\n                oSettings.bDeferLoading = true;\n                var tmp = $.isArray( oInit.iDeferLoading );\n                oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n                oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n            }\n            /* Language definitions */\n            var oLanguage = oSettings.oLanguage;\n            $.extend( true, oLanguage, oInit.oLanguage );\n            if ( oLanguage.sUrl )\n            {\n                /* Get the language definitions from a file - because this Ajax call makes the language\n                 * get async to the remainder of this function we use bInitHandedOff to indicate that\n                 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n                 */\n                $.ajax( {\n                    dataType: 'json',\n                    url: oLanguage.sUrl,\n                    success: function ( json ) {\n                        _fnLanguageCompat( json );\n                        _fnCamelToHungarian( defaults.oLanguage, json );\n                        $.extend( true, oLanguage, json );\n                        _fnInitialise( oSettings );\n                    },\n                    error: function () {\n                        // Error occurred loading language file, continue on as best we can\n                        _fnInitialise( oSettings );\n                    }\n                } );\n                bInitHandedOff = true;\n            }\n            /*\n             * Stripes\n             */\n            if ( oInit.asStripeClasses === null )\n            {\n                oSettings.asStripeClasses =[\n                    oClasses.sStripeOdd,\n                    oClasses.sStripeEven\n                ];\n            }\n            /* Remove row stripe classes if they are already on the table row */\n            var stripeClasses = oSettings.asStripeClasses;\n            var rowOne = $this.children('tbody').find('tr').eq(0);\n            if ( $.inArray( true, $.map( stripeClasses, function(el) {\n                return rowOne.hasClass(el);\n            } ) ) !== -1 ) {\n                $('tbody tr', this).removeClass( stripeClasses.join(' ') );\n                oSettings.asDestroyStripes = stripeClasses.slice();\n            }\n            /*\n             * Columns\n             * See if we should load columns automatically or use defined ones\n             */\n            var anThs = [];\n            var aoColumnsInit;\n            var nThead = this.getElementsByTagName('thead');\n            if ( nThead.length !== 0 )\n            {\n                _fnDetectHeader( oSettings.aoHeader, nThead[0] );\n                anThs = _fnGetUniqueThs( oSettings );\n            }\n            /* If not given a column array, generate one with nulls */\n            if ( oInit.aoColumns === null )\n            {\n                aoColumnsInit = [];\n                for ( i=0, iLen=anThs.length ; i<iLen ; i++ )\n                {\n                    aoColumnsInit.push( null );\n                }\n            }\n            else\n            {\n                aoColumnsInit = oInit.aoColumns;\n            }\n            /* Add the columns */\n            for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\n            {\n                _fnAddColumn( oSettings, anThs ? anThs[i] : null );\n            }\n            /* Apply the column definitions */\n            _fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n                _fnColumnOptions( oSettings, iCol, oDef );\n            } );\n            /* HTML5 attribute detection - build an mData object automatically if the\n             * attributes are found\n             */\n            if ( rowOne.length ) {\n                var a = function ( cell, name ) {\n                    return cell.getAttribute( 'data-'+name ) !== null ? name : null;\n                };\n                $( rowOne[0] ).children('th, td').each( function (i, cell) {\n                    var col = oSettings.aoColumns[i];\n                    if ( col.mData === i ) {\n                        var sort = a( cell, 'sort' ) || a( cell, 'order' );\n                        var filter = a( cell, 'filter' ) || a( cell, 'search' );\n                        if ( sort !== null || filter !== null ) {\n                            col.mData = {\n                                _:      i+'.display',\n                                sort:   sort !== null   ? i+'.@data-'+sort   : undefined,\n                                type:   sort !== null   ? i+'.@data-'+sort   : undefined,\n                                filter: filter !== null ? i+'.@data-'+filter : undefined\n                            };\n                            _fnColumnOptions( oSettings, i );\n                        }\n                    }\n                } );\n            }\n            var features = oSettings.oFeatures;\n            var loadedInit = function () {\n                /*\n                 * Sorting\n                 * @todo For modularisation (1.11) this needs to do into a sort start up handler\n                 */\n                // If aaSorting is not defined, then we use the first indicator in asSorting\n                // in case that has been altered, so the default sort reflects that option\n                if ( oInit.aaSorting === undefined ) {\n                    var sorting = oSettings.aaSorting;\n                    for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\n                        sorting[i][1] = oSettings.aoColumns[i].asSorting[0];\n                    }\n                }\n                /* Do a first pass on the sorting classes (allows any size changes to be taken into\n                 * account, and also will apply sorting disabled classes if disabled\n                 */\n                _fnSortingClasses( oSettings );\n                if ( features.bSort ) {\n                    _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n                        if ( oSettings.bSorted ) {\n                            var aSort = _fnSortFlatten( oSettings );\n                            var sortedColumns = {};\n                            $.each( aSort, function (i, val) {\n                                sortedColumns[val.src] = val.dir;\n                            } );\n                            _fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\n                            _fnSortAria( oSettings );\n                        }\n                    } );\n                }\n                _fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n                    if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\n                        _fnSortingClasses( oSettings );\n                    }\n                }, 'sc' );\n                /*\n                 * Final init\n                 * Cache the header, body and footer as required, creating them if needed\n                 */\n                // Work around for Webkit bug 83867 - store the caption-side before removing from doc\n                var captions = $this.children('caption').each( function () {\n                    this._captionSide = $(this).css('caption-side');\n                } );\n                var thead = $this.children('thead');\n                if ( thead.length === 0 ) {\n                    thead = $('<thead/>').appendTo($this);\n                }\n                oSettings.nTHead = thead[0];\n                var tbody = $this.children('tbody');\n                if ( tbody.length === 0 ) {\n                    tbody = $('<tbody/>').appendTo($this);\n                }\n                oSettings.nTBody = tbody[0];\n                var tfoot = $this.children('tfoot');\n                if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\n                    // If we are a scrolling table, and no footer has been given, then we need to create\n                    // a tfoot element for the caption element to be appended to\n                    tfoot = $('<tfoot/>').appendTo($this);\n                }\n                if ( tfoot.length === 0 || tfoot.children().length === 0 ) {\n                    $this.addClass( oClasses.sNoFooter );\n                }\n                else if ( tfoot.length > 0 ) {\n                    oSettings.nTFoot = tfoot[0];\n                    _fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\n                }\n                /* Check if there is data passing into the constructor */\n                if ( oInit.aaData ) {\n                    for ( i=0 ; i<oInit.aaData.length ; i++ ) {\n                        _fnAddData( oSettings, oInit.aaData[i] );\n                    }\n                }\n                else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\n                    /* Grab the data from the page - only do this when deferred loading or no Ajax\n                     * source since there is no point in reading the DOM data if we are then going\n                     * to replace it with Ajax data\n                     */\n                    _fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\n                }\n                /* Copy the data index array */\n                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n                /* Initialisation complete - table can be drawn */\n                oSettings.bInitialised = true;\n                /* Check if we need to initialise the table (it might not have been handed off to the\n                 * language processor)\n                 */\n                if ( bInitHandedOff === false ) {\n                    _fnInitialise( oSettings );\n                }\n            };\n            /* Must be done after everything which can be overridden by the state saving! */\n            if ( oInit.bStateSave )\n            {\n                features.bStateSave = true;\n                _fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\n                _fnLoadState( oSettings, oInit, loadedInit );\n            }\n            else {\n                loadedInit();\n            }\n        } );\n        _that = null;\n        return this;\n    };\n    /*\n     * It is useful to have variables which are scoped locally so only the\n     * DataTables functions can access them and they don't leak into global space.\n     * At the same time these functions are often useful over multiple files in the\n     * core and API, so we list, or at least document, all variables which are used\n     * by DataTables as private variables here. This also ensures that there is no\n     * clashing of variable names and that they can easily referenced for reuse.\n     */\n    // Defined else where\n    //  _selector_run\n    //  _selector_opts\n    //  _selector_first\n    //  _selector_row_indexes\n    var _ext; // DataTable.ext\n    var _Api; // DataTable.Api\n    var _api_register; // DataTable.Api.register\n    var _api_registerPlural; // DataTable.Api.registerPlural\n    var _re_dic = {};\n    var _re_new_lines = /[\\r\\n]/g;\n    var _re_html = /<.*?>/g;\n    // This is not strict ISO8601 - Date.parse() is quite lax, although\n    // implementations differ between browsers.\n    var _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\n    // Escape regular expression special characters\n    var _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$',\n    '^', '-' ].join('|\\\\') + ')', 'g' );\n    // http://en.wikipedia.org/wiki/Foreign_exchange_market\n    // - \\u20BD - Russian ruble.\n    // - \\u20a9 - South Korean Won\n    // - \\u20BA - Turkish Lira\n    // - \\u20B9 - Indian Rupee\n    // - R - Brazil (R$) and South Africa\n    // - fr - Swiss Franc\n    // - kr - Swedish krona, Norwegian krone and Danish krone\n    // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n    //   standards as thousands separators.\n    var _re_formatted_numeric = /[',$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;\n    var _empty = function ( d ) {\n        return !d || d === true || d === '-' ? true : false;\n    };\n    var _intVal = function ( s ) {\n        var integer = parseInt( s, 10 );\n        return !isNaN(integer) && isFinite(s) ? integer : null;\n    };\n    // Convert from a formatted number with characters other than `.` as the\n    // decimal place, to a Javascript number\n    var _numToDecimal = function ( num, decimalPoint ) {\n        // Cache created regular expressions for speed as this function is called often\n        if ( ! _re_dic[decimalPoint] ) {\n            _re_dic[decimalPoint] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\n        }\n        return typeof num === 'string' && decimalPoint !== '.' ?\n            num.replace( /\\./g, '' ).replace( _re_dic[decimalPoint], '.' ) :\n            num;\n    };\n    var _isNumber = function ( d, decimalPoint, formatted ) {\n        var strType = typeof d === 'string';\n        // If empty return immediately so there must be a number if it is a\n        // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n        // as a formatted number for currency\n        if ( _empty( d ) ) {\n            return true;\n        }\n        if ( decimalPoint && strType ) {\n            d = _numToDecimal( d, decimalPoint );\n        }\n        if ( formatted && strType ) {\n            d = d.replace( _re_formatted_numeric, '' );\n        }\n        return !isNaN( parseFloat(d) ) && isFinite( d );\n    };\n    // A string without HTML in it can be considered to be HTML still\n    var _isHtml = function ( d ) {\n        return _empty( d ) || typeof d === 'string';\n    };\n    var _htmlNumeric = function ( d, decimalPoint, formatted ) {\n        if ( _empty( d ) ) {\n            return true;\n        }\n        var html = _isHtml( d );\n        return ! html ?\n            null :\n            _isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\n                true :\n                null;\n    };\n    var _pluck = function ( a, prop, prop2 ) {\n        var out = [];\n        var i=0, ien=a.length;\n        // Could have the test in the loop for slightly smaller code, but speed\n        // is essential here\n        if ( prop2 !== undefined ) {\n            for ( ; i<ien ; i++ ) {\n                if ( a[i] && a[i][prop] ) {\n                    out.push( a[i][prop][prop2] );\n                }\n            }\n        }\n        else {\n            for ( ; i<ien ; i++ ) {\n                if ( a[i] ) {\n                    out.push( a[i][prop] );\n                }\n            }\n        }\n        return out;\n    };\n    // Basically the same as _pluck, but rather than looping over `a` we use `order`\n    // as the indexes to pick from `a`\n    var _pluck_order = function ( a, order, prop, prop2 )\n    {\n        var out = [];\n        var i=0, ien=order.length;\n        // Could have the test in the loop for slightly smaller code, but speed\n        // is essential here\n        if ( prop2 !== undefined ) {\n            for ( ; i<ien ; i++ ) {\n                if ( a[order[i]][prop] ) {\n                    out.push( a[order[i]][prop][prop2] );\n                }\n            }\n        }\n        else {\n            for ( ; i<ien ; i++ ) {\n                out.push( a[order[i]][prop] );\n            }\n        }\n        return out;\n    };\n    var _range = function ( len, start )\n    {\n        var out = [];\n        var end;\n        if ( start === undefined ) {\n            start = 0;\n            end = len;\n        }\n        else {\n            end = start;\n            start = len;\n        }\n        for ( var i=start ; i<end ; i++ ) {\n            out.push( i );\n        }\n        return out;\n    };\n    var _removeEmpty = function ( a )\n    {\n        var out = [];\n        for ( var i=0, ien=a.length ; i<ien ; i++ ) {\n            if ( a[i] ) { // careful - will remove all falsy values!\n                out.push( a[i] );\n            }\n        }\n        return out;\n    };\n    var _stripHtml = function ( d ) {\n        return d.replace( _re_html, '' );\n    };\n    /**\n     * Determine if all values in the array are unique. This means we can short\n     * cut the _unique method at the cost of a single loop. A sorted array is used\n     * to easily check the values.\n     *\n     * @param  {array} src Source array\n     * @return {boolean} true if all unique, false otherwise\n     * @ignore\n     */\n    var _areAllUnique = function ( src ) {\n        if ( src.length < 2 ) {\n            return true;\n        }\n        var sorted = src.slice().sort();\n        var last = sorted[0];\n        for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {\n            if ( sorted[i] === last ) {\n                return false;\n            }\n            last = sorted[i];\n        }\n        return true;\n    };\n    /**\n     * Find the unique elements in a source array.\n     *\n     * @param  {array} src Source array\n     * @return {array} Array of unique items\n     * @ignore\n     */\n    var _unique = function ( src )\n    {\n        if ( _areAllUnique( src ) ) {\n            return src.slice();\n        }\n        // A faster unique method is to use object keys to identify used values,\n        // but this doesn't work with arrays or objects, which we must also\n        // consider. See jsperf.com/compare-array-unique-versions/4 for more\n        // information.\n        var\n            out = [],\n            val,\n            i, ien=src.length,\n            j, k=0;\n            for ( i=0 ; i<ien ; i++ ) {\n            val = src[i];\n            for ( j=0 ; j<k ; j++ ) {\n                if ( out[j] === val ) {\n                    continue;\n                }\n            }\n            out.push( val );\n            k++;\n        }\n        return out;\n    };\n    /**\n     * DataTables utility methods\n     * This namespace provides helper methods that DataTables uses internally to\n     * create a DataTable, but which are not exclusively used only for DataTables.\n     * These methods can be used by extension authors to save the duplication of\n     * code.\n     *\n     *  @namespace\n     */\n    DataTable.util = {\n        /**\n         * Throttle the calls to a function. Arguments and context are maintained\n         * for the throttled function.\n         *\n         * @param {function} fn Function to be called\n         * @param {integer} freq Call frequency in mS\n         * @return {function} Wrapped function\n         */\n        throttle: function ( fn, freq ) {\n            var\n                frequency = freq !== undefined ? freq : 200,\n                last,\n                timer;\n            return function () {\n                var\n                    that = this,\n                    now  = +new Date(),\n                    args = arguments;\n                if ( last && now < last + frequency ) {\n                    clearTimeout( timer );\n                    timer = setTimeout( function () {\n                        last = undefined;\n                        fn.apply( that, args );\n                    }, frequency );\n                }\n                else {\n                    last = now;\n                    fn.apply( that, args );\n                }\n            };\n        },\n        /**\n         * Escape a string such that it can be used in a regular expression\n         *\n         *  @param {string} val string to escape\n         *  @returns {string} escaped string\n         */\n        escapeRegex: function ( val ) {\n            return val.replace( _re_escape_regex, '\\\\$1' );\n        }\n    };\n    /**\n     * Create a mapping object that allows camel case parameters to be looked up\n     * for their Hungarian counterparts. The mapping is stored in a private\n     * parameter called `_hungarianMap` which can be accessed on the source object.\n     *  @param {object} o\n     *  @memberof DataTable#oApi\n     */\n    function _fnHungarianMap ( o )\n    {\n        var\n            hungarian = 'a aa ai ao as b fn i m o s ',\n            match,\n            newKey,\n            map = {};\n        $.each( o, function (key) {\n            match = key.match(/^([^A-Z]+?)([A-Z])/);\n            if ( match && hungarian.indexOf(match[1]+' ') !== -1 )\n            {\n                newKey = key.replace( match[0], match[2].toLowerCase() );\n                map[newKey] = key;\n                if ( match[1] === 'o' )\n                {\n                    _fnHungarianMap( o[key] );\n                }\n            }\n        } );\n        o._hungarianMap = map;\n    }\n    /**\n     * Convert from camel case parameters to Hungarian, based on a Hungarian map\n     * created by _fnHungarianMap.\n     *  @param {object} src The model object which holds all parameters that can be\n     *    mapped.\n     *  @param {object} user The object to convert from camel case to Hungarian.\n     *  @param {boolean} force When set to `true`, properties which already have a\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\n     *    won't be.\n     *  @memberof DataTable#oApi\n     */\n    function _fnCamelToHungarian ( src, user, force )\n    {\n        if ( ! src._hungarianMap ) {\n            _fnHungarianMap( src );\n        }\n        var hungarianKey;\n        $.each( user, function (key) {\n            hungarianKey = src._hungarianMap[key];\n            if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\n            {\n                // For objects, we need to buzz down into the object to copy parameters\n                if ( hungarianKey.charAt(0) === 'o' )\n                {\n                    // Copy the camelCase options over to the hungarian\n                    if ( ! user[hungarianKey] ) {\n                        user[hungarianKey] = {};\n                    }\n                    $.extend( true, user[hungarianKey], user[key] );\n                    _fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\n                }\n                else {\n                    user[hungarianKey] = user[key];\n                }\n            }\n        } );\n    }\n    /**\n     * Language compatibility - when certain options are given, and others aren't, we\n     * need to duplicate the values over, in order to provide backwards compatibility\n     * with older language files.\n     *  @param {object} lang dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnLanguageCompat( lang )\n    {\n        var defaults = DataTable.defaults.oLanguage;\n        var zeroRecords = lang.sZeroRecords;\n        /* Backwards compatibility - if there is no sEmptyTable given, then use the same as\n         * sZeroRecords - assuming that is given.\n         */\n        if ( ! lang.sEmptyTable && zeroRecords &&\n            defaults.sEmptyTable === \"No sessions available in table\" )\n        {\n            _fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\n        }\n        /* Likewise with loading records */\n        if ( ! lang.sLoadingRecords && zeroRecords &&\n            defaults.sLoadingRecords === \"Loading...\" )\n        {\n            _fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\n        }\n        // Old parameter name of the thousands separator mapped onto the new\n        if ( lang.sInfoThousands ) {\n            lang.sThousands = lang.sInfoThousands;\n        }\n        var decimal = lang.sDecimal;\n        if ( decimal ) {\n            _addNumericSort( decimal );\n        }\n    }\n    /**\n     * Map one parameter onto another\n     *  @param {object} o Object to map\n     *  @param {*} knew The new parameter name\n     *  @param {*} old The old parameter name\n     */\n    var _fnCompatMap = function ( o, knew, old ) {\n        if ( o[knew] !== undefined ) {\n            o[old] = o[knew];\n        }\n    };\n    /**\n     * Provide backwards compatibility for the main DT options. Note that the new\n     * options are mapped onto the old parameters, so this is an external interface\n     * change only.\n     *  @param {object} init Object to map\n     */\n    function _fnCompatOpts ( init )\n    {\n        _fnCompatMap( init, 'ordering',      'bSort' );\n        _fnCompatMap( init, 'orderMulti',    'bSortMulti' );\n        _fnCompatMap( init, 'orderClasses',  'bSortClasses' );\n        _fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\n        _fnCompatMap( init, 'order',         'aaSorting' );\n        _fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\n        _fnCompatMap( init, 'paging',        'bPaginate' );\n        _fnCompatMap( init, 'pagingType',    'sPaginationType' );\n        _fnCompatMap( init, 'pageLength',    'iDisplayLength' );\n        _fnCompatMap( init, 'searching',     'bFilter' );\n        // Boolean initialisation of x-scrolling\n        if ( typeof init.sScrollX === 'boolean' ) {\n            init.sScrollX = init.sScrollX ? '100%' : '';\n        }\n        if ( typeof init.scrollX === 'boolean' ) {\n            init.scrollX = init.scrollX ? '100%' : '';\n        }\n        // Column search objects are in an array, so it needs to be converted\n        // element by element\n        var searchCols = init.aoSearchCols;\n        if ( searchCols ) {\n            for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\n                if ( searchCols[i] ) {\n                    _fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\n                }\n            }\n        }\n    }\n    /**\n     * Provide backwards compatibility for column options. Note that the new options\n     * are mapped onto the old parameters, so this is an external interface change\n     * only.\n     *  @param {object} init Object to map\n     */\n    function _fnCompatCols ( init )\n    {\n        _fnCompatMap( init, 'orderable',     'bSortable' );\n        _fnCompatMap( init, 'orderData',     'aDataSort' );\n        _fnCompatMap( init, 'orderSequence', 'asSorting' );\n        _fnCompatMap( init, 'orderDataType', 'sortDataType' );\n        // orderData can be given as an integer\n        var dataSort = init.aDataSort;\n        if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {\n            init.aDataSort = [ dataSort ];\n        }\n    }\n    /**\n     * Browser feature detection for capabilities, quirks\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnBrowserDetect( settings )\n    {\n        // We don't need to do this every time DataTables is constructed, the values\n        // calculated are specific to the browser and OS configuration which we\n        // don't expect to change between initialisations\n        if ( ! DataTable.__browser ) {\n            var browser = {};\n            DataTable.__browser = browser;\n            // Scrolling feature / quirks detection\n            var n = $('<div/>')\n                .css( {\n                    position: 'fixed',\n                    top: 0,\n                    left: $(window).scrollLeft()*-1, // allow for scrolling\n                    height: 1,\n                    width: 1,\n                    overflow: 'hidden'\n                } )\n                .append(\n                    $('<div/>')\n                        .css( {\n                            position: 'absolute',\n                            top: 1,\n                            left: 1,\n                            width: 100,\n                            overflow: 'scroll'\n                        } )\n                        .append(\n                            $('<div/>')\n                                .css( {\n                                    width: '100%',\n                                    height: 10\n                                } )\n                        )\n                )\n                .appendTo( 'body' );\n            var outer = n.children();\n            var inner = outer.children();\n            // Numbers below, in order, are:\n            // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n            //\n            // IE6 XP:                           100 100 100  83\n            // IE7 Vista:                        100 100 100  83\n            // IE 8+ Windows:                     83  83 100  83\n            // Evergreen Windows:                 83  83 100  83\n            // Evergreen Mac with scrollbars:     85  85 100  85\n            // Evergreen Mac without scrollbars: 100 100 100 100\n            // Get scrollbar width\n            browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n            // IE6/7 will oversize a width 100% element inside a scrolling element, to\n            // include the width of the scrollbar, while other browsers ensure the inner\n            // element is contained without forcing scrolling\n            browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\n            // In rtl text layout, some browsers (most, but not all) will place the\n            // scrollbar on the left, rather than the right.\n            browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\n            // IE8- don't provide height and width for getBoundingClientRect\n            browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n            n.remove();\n        }\n        $.extend( settings.oBrowser, DataTable.__browser );\n        settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n    }\n    /**\n     * Array.prototype reduce[Right] method, used for browsers which don't support\n     * JS 1.6. Done this way to reduce code size, since we iterate either way\n     *  @param {object} that dataTables settings object\n     *  @param {object} fn dataTables settings object\n     *  @param {object} init dataTables settings object\n     *  @param {object} start dataTables settings object\n     *  @param {object} end dataTables settings object\n     *  @param {object} inc dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnReduce ( that, fn, init, start, end, inc )\n    {\n        var\n            i = start,\n            value,\n            isSet = false;\n        if ( init !== undefined ) {\n            value = init;\n            isSet = true;\n        }\n        while ( i !== end ) {\n            if ( ! that.hasOwnProperty(i) ) {\n                continue;\n            }\n            value = isSet ?\n                fn( value, that[i], i, that ) :\n                that[i];\n            isSet = true;\n            i += inc;\n        }\n        return value;\n    }\n    /**\n     * Add a column to the list used for the table with default values\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} nTh The th element for this column\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddColumn( oSettings, nTh )\n    {\n        // Add column to aoColumns array\n        var oDefaults = DataTable.defaults.column;\n        var iCol = oSettings.aoColumns.length;\n        var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\n            \"nTh\": nTh ? nTh : document.createElement('th'),\n            \"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\n            \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n            \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n            idx: iCol\n        } );\n        oSettings.aoColumns.push( oCol );\n        // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n        // passed into extend can be undefined. This allows the user to give a default\n        // with only some of the parameters defined, and also not give a default\n        var searchCols = oSettings.aoPreSearchCols;\n        searchCols[iCol] = $.extend( {}, DataTable.models.oSearch, searchCols[iCol] );\n        // Use the default column options function to initialise classes etc\n        _fnColumnOptions( oSettings, iCol, $(nTh).data() );\n    }\n    /**\n     * Apply options for a column\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iCol column index to consider\n     *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnOptions( oSettings, iCol, oOptions )\n    {\n        var oCol = oSettings.aoColumns[iCol];\n        var oClasses = oSettings.oClasses;\n        var th = $(oCol.nTh);\n        // Try to get width information from the DOM. We can't get it from CSS\n        // as we'd need to parse the CSS stylesheet. `width` option can override\n        if ( ! oCol.sWidthOrig ) {\n            // Width attribute\n            oCol.sWidthOrig = th.attr('width') || null;\n            // Style attribute\n            var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n            if ( t ) {\n                oCol.sWidthOrig = t[1];\n            }\n        }\n        /* User specified column options */\n        if ( oOptions !== undefined && oOptions !== null )\n        {\n            // Backwards compatibility\n            _fnCompatCols( oOptions );\n            // Map camel case parameters to their Hungarian counterparts\n            _fnCamelToHungarian( DataTable.defaults.column, oOptions );\n            /* Backwards compatibility for mDataProp */\n            if ( oOptions.mDataProp !== undefined && !oOptions.mData )\n            {\n                oOptions.mData = oOptions.mDataProp;\n            }\n            if ( oOptions.sType )\n            {\n                oCol._sManualType = oOptions.sType;\n            }\n            // `class` is a reserved word in Javascript, so we need to provide\n            // the ability to use a valid name for the camel case input\n            if ( oOptions.className && ! oOptions.sClass )\n            {\n                oOptions.sClass = oOptions.className;\n            }\n            $.extend( oCol, oOptions );\n            _fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\n            /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n             * priority if defined\n             */\n            if ( oOptions.iDataSort !== undefined )\n            {\n                oCol.aDataSort = [ oOptions.iDataSort ];\n            }\n            _fnMap( oCol, oOptions, \"aDataSort\" );\n        }\n        /* Cache the data get and set functions for speed */\n        var mDataSrc = oCol.mData;\n        var mData = _fnGetObjectDataFn( mDataSrc );\n        var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\n        var attrTest = function( src ) {\n            return typeof src === 'string' && src.indexOf('@') !== -1;\n        };\n        oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\n            attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n        );\n        oCol._setter = null;\n        oCol.fnGetData = function (rowData, type, meta) {\n            var innerData = mData( rowData, type, undefined, meta );\n            return mRender && type ?\n                mRender( innerData, type, rowData, meta ) :\n                innerData;\n        };\n        oCol.fnSetData = function ( rowData, val, meta ) {\n            return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\n        };\n        // Indicate if DataTables should read DOM data as an object or array\n        // Used in _fnGetRowElements\n        if ( typeof mDataSrc !== 'number' ) {\n            oSettings._rowReadObject = true;\n        }\n        /* Feature sorting overrides column specific when off */\n        if ( !oSettings.oFeatures.bSort )\n        {\n            oCol.bSortable = false;\n            th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\n        }\n        /* Check that the class assignment is correct for sorting */\n        var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n        var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n        if ( !oCol.bSortable || (!bAsc && !bDesc) )\n        {\n            oCol.sSortingClass = oClasses.sSortableNone;\n            oCol.sSortingClassJUI = \"\";\n        }\n        else if ( bAsc && !bDesc )\n        {\n            oCol.sSortingClass = oClasses.sSortableAsc;\n            oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n        }\n        else if ( !bAsc && bDesc )\n        {\n            oCol.sSortingClass = oClasses.sSortableDesc;\n            oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n        }\n        else\n        {\n            oCol.sSortingClass = oClasses.sSortable;\n            oCol.sSortingClassJUI = oClasses.sSortJUI;\n        }\n    }\n    /**\n     * Adjust the table column widths for new data. Note: you would probably want to\n     * do a redraw after calling this function!\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAdjustColumnSizing ( settings )\n    {\n        /* Not interested in doing column width calculation if auto-width is disabled */\n        if ( settings.oFeatures.bAutoWidth !== false )\n        {\n            var columns = settings.aoColumns;\n            _fnCalculateColumnWidths( settings );\n            for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\n            {\n                columns[i].nTh.style.width = columns[i].sWidth;\n            }\n        }\n        var scroll = settings.oScroll;\n        if ( scroll.sY !== '' || scroll.sX !== '')\n        {\n            _fnScrollDraw( settings );\n        }\n        _fnCallbackFire( settings, null, 'column-sizing', [settings] );\n    }\n    /**\n     * Covert the index of a visible column to the index in the data array (take account\n     * of hidden columns)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iMatch Visible column index to lookup\n     *  @returns {int} i the data index\n     *  @memberof DataTable#oApi\n     */\n    function _fnVisibleToColumnIndex( oSettings, iMatch )\n    {\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\n        return typeof aiVis[iMatch] === 'number' ?\n            aiVis[iMatch] :\n            null;\n    }\n    /**\n     * Covert the index of an index in the data array and convert it to the visible\n     *   column index (take account of hidden columns)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iMatch Column index to lookup\n     *  @returns {int} i the data index\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnIndexToVisible( oSettings, iMatch )\n    {\n        var aiVis = _fnGetColumns( oSettings, 'bVisible' );\n        var iPos = $.inArray( iMatch, aiVis );\n        return iPos !== -1 ? iPos : null;\n    }\n    /**\n     * Get the number of visible columns\n     *  @param {object} oSettings dataTables settings object\n     *  @returns {int} i the number of visible columns\n     *  @memberof DataTable#oApi\n     */\n    function _fnVisbleColumns( oSettings )\n    {\n        var vis = 0;\n        // No reduce in IE8, use a loop for now\n        $.each( oSettings.aoColumns, function ( i, col ) {\n            if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\n                vis++;\n            }\n        } );\n        return vis;\n    }\n    /**\n     * Get an array of column indexes that match a given property\n     *  @param {object} oSettings dataTables settings object\n     *  @param {string} sParam Parameter in aoColumns to look for - typically\n     *    bVisible or bSearchable\n     *  @returns {array} Array of indexes with matched properties\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetColumns( oSettings, sParam )\n    {\n        var a = [];\n        $.map( oSettings.aoColumns, function(val, i) {\n            if ( val[sParam] ) {\n                a.push( i );\n            }\n        } );\n        return a;\n    }\n    /**\n     * Calculate the 'type' of a column\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnColumnTypes ( settings )\n    {\n        var columns = settings.aoColumns;\n        var data = settings.aoData;\n        var types = DataTable.ext.type.detect;\n        var i, ien, j, jen, k, ken;\n        var col, detectedType, cache;\n        // For each column, spin over the\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            col = columns[i];\n            cache = [];\n            if ( ! col.sType && col._sManualType ) {\n                col.sType = col._sManualType;\n            }\n            else if ( ! col.sType ) {\n                for ( j=0, jen=types.length ; j<jen ; j++ ) {\n                    for ( k=0, ken=data.length ; k<ken ; k++ ) {\n                        // Use a cache array so we only need to get the type data\n                        // from the formatter once (when using multiple detectors)\n                        if ( cache[k] === undefined ) {\n                            cache[k] = _fnGetCellData( settings, k, i, 'type' );\n                        }\n                        detectedType = types[j]( cache[k], settings );\n                        // If null, then this type can't apply to this column, so\n                        // rather than testing all cells, break out. There is an\n                        // exception for the last type which is `html`. We need to\n                        // scan all rows since it is possible to mix string and HTML\n                        // types\n                        if ( ! detectedType && j !== types.length-1 ) {\n                            break;\n                        }\n                        // Only a single match is needed for html type since it is\n                        // bottom of the pile and very similar to string\n                        if ( detectedType === 'html' ) {\n                            break;\n                        }\n                    }\n                    // Type is valid for all data points in the column - use this\n                    // type\n                    if ( detectedType ) {\n                        col.sType = detectedType;\n                        break;\n                    }\n                }\n                // Fall back - if no type was detected, always use string\n                if ( ! col.sType ) {\n                    col.sType = 'string';\n                }\n            }\n        }\n    }\n    /**\n     * Take the column definitions and static columns arrays and calculate how\n     * they relate to column indexes. The callback function will then apply the\n     * definition found for a column to a suitable configuration object.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n     *  @param {array} aoCols The aoColumns array that defines columns individually\n     *  @param {function} fn Callback function - takes two parameters, the calculated\n     *    column index and the definition for that column.\n     *  @memberof DataTable#oApi\n     */\n    function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\n    {\n        var i, iLen, j, jLen, k, kLen, def;\n        var columns = oSettings.aoColumns;\n        // Column definitions with aTargets\n        if ( aoColDefs )\n        {\n            /* Loop over the definitions array - loop in reverse so first instance has priority */\n            for ( i=aoColDefs.length-1 ; i>=0 ; i-- )\n            {\n                def = aoColDefs[i];\n                /* Each definition can target multiple columns, as it is an array */\n                var aTargets = def.targets !== undefined ?\n                    def.targets :\n                    def.aTargets;\n                if ( ! $.isArray( aTargets ) )\n                {\n                    aTargets = [ aTargets ];\n                }\n                for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\n                {\n                    if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\n                    {\n                        /* Add columns that we don't yet know about */\n                        while( columns.length <= aTargets[j] )\n                        {\n                            _fnAddColumn( oSettings );\n                        }\n                        /* Integer, basic index */\n                        fn( aTargets[j], def );\n                    }\n                    else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\n                    {\n                        /* Negative integer, right to left column counting */\n                        fn( columns.length+aTargets[j], def );\n                    }\n                    else if ( typeof aTargets[j] === 'string' )\n                    {\n                        /* Class name matching on TH element */\n                        for ( k=0, kLen=columns.length ; k<kLen ; k++ )\n                        {\n                            if ( aTargets[j] == \"_all\" ||\n                                 $(columns[k].nTh).hasClass( aTargets[j] ) )\n                            {\n                                fn( k, def );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Statically defined columns array\n        if ( aoCols )\n        {\n            for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\n            {\n                fn( i, aoCols[i] );\n            }\n        }\n    }\n    /**\n     * Add a data array to the table, creating DOM node etc. This is the parallel to\n     * _fnGatherData, but for adding rows from a Javascript source, rather than a\n     * DOM source.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {array} aDataIn data array to be added\n     *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n     *    DataTables will create a row automatically\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n     *    if nTr is.\n     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddData ( oSettings, aDataIn, nTr, anTds )\n    {\n        /* Create the object for storing information about this new row */\n        var iRow = oSettings.aoData.length;\n        var oData = $.extend( true, {}, DataTable.models.oRow, {\n            src: nTr ? 'dom' : 'data',\n            idx: iRow\n        } );\n        oData._aData = aDataIn;\n        oSettings.aoData.push( oData );\n        /* Create the cells */\n        var columns = oSettings.aoColumns;\n        // Invalidate the column types as the new data needs to be revalidated\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n        {\n            columns[i].sType = null;\n        }\n        /* Add to the display array */\n        oSettings.aiDisplayMaster.push( iRow );\n        var id = oSettings.rowIdFn( aDataIn );\n        if ( id !== undefined ) {\n            oSettings.aIds[id] = oData;\n        }\n        /* Create the DOM information, or register it if already present */\n        if ( nTr || ! oSettings.oFeatures.bDeferRender )\n        {\n            _fnCreateTr( oSettings, iRow, nTr, anTds );\n        }\n        return iRow;\n    }\n    /**\n     * Add one or more TR elements to the table. Generally we'd expect to\n     * use this for reading data from a DOM sourced table, but it could be\n     * used for an TR element. Note that if a TR is given, it is used (i.e.\n     * it is not cloned).\n     *  @param {object} settings dataTables settings object\n     *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n     *  @returns {array} Array of indexes for the added rows\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddTr( settings, trs )\n    {\n        var row;\n        // Allow an individual node to be passed in\n        if ( ! (trs instanceof $) ) {\n            trs = $(trs);\n        }\n        return trs.map( function (i, el) {\n            row = _fnGetRowElements( settings, el );\n            return _fnAddData( settings, row.data, el, row.cells );\n        } );\n    }\n    /**\n     * Take a TR element and convert it to an index in aoData\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} n the TR element to find\n     *  @returns {int} index if the node is found, null if not\n     *  @memberof DataTable#oApi\n     */\n    function _fnNodeToDataIndex( oSettings, n )\n    {\n        return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\n    }\n    /**\n     * Take a TD element and convert it into a column data index (not the visible index)\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iRow The row number the TD/TH can be found in\n     *  @param {node} n The TD/TH element to find\n     *  @returns {int} index if the node is found, -1 if not\n     *  @memberof DataTable#oApi\n     */\n    function _fnNodeToColumnIndex( oSettings, iRow, n )\n    {\n        return $.inArray( n, oSettings.aoData[iRow].anCells );\n    }\n    /**\n     * Get the data for a given cell from the internal cache, taking into account data mapping\n     *  @param {object} settings dataTables settings object\n     *  @param {int} rowIdx aoData row id\n     *  @param {int} colIdx Column index\n     *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n     *  @returns {*} Cell data\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetCellData( settings, rowIdx, colIdx, type )\n    {\n        var draw           = settings.iDraw;\n        var col            = settings.aoColumns[colIdx];\n        var rowData        = settings.aoData[rowIdx]._aData;\n        var defaultContent = col.sDefaultContent;\n        var cellData       = col.fnGetData( rowData, type, {\n            settings: settings,\n            row:      rowIdx,\n            col:      colIdx\n        } );\n        if ( cellData === undefined ) {\n            if ( settings.iDrawError != draw && defaultContent === null ) {\n                _fnLog( settings, 0, \"Requested unknown parameter \"+\n                    (typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\n                    \" for row \"+rowIdx+\", column \"+colIdx, 4 );\n                settings.iDrawError = draw;\n            }\n            return defaultContent;\n        }\n        // When the data source is null and a specific data type is requested (i.e.\n        // not the original data), we can use default column data\n        if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\n            cellData = defaultContent;\n        }\n        else if ( typeof cellData === 'function' ) {\n            // If the data source is a function, then we run it and use the return,\n            // executing in the scope of the data object (for instances)\n            return cellData.call( rowData );\n        }\n        if ( cellData === null && type == 'display' ) {\n            return '';\n        }\n        return cellData;\n    }\n    /**\n     * Set the value for a specific cell, into the internal data cache\n     *  @param {object} settings dataTables settings object\n     *  @param {int} rowIdx aoData row id\n     *  @param {int} colIdx Column index\n     *  @param {*} val Value to set\n     *  @memberof DataTable#oApi\n     */\n    function _fnSetCellData( settings, rowIdx, colIdx, val )\n    {\n        var col     = settings.aoColumns[colIdx];\n        var rowData = settings.aoData[rowIdx]._aData;\n        col.fnSetData( rowData, val, {\n            settings: settings,\n            row:      rowIdx,\n            col:      colIdx\n        }  );\n    }\n    // Private variable that is used to match action syntax in the data property object\n    var __reArray = /\\[.*?\\]$/;\n    var __reFn = /\\(\\)$/;\n    /**\n     * Split string on periods, taking into account escaped periods\n     * @param  {string} str String to split\n     * @return {array} Split string\n     */\n    function _fnSplitObjNotation( str )\n    {\n        return $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\n            return s.replace(/\\\\\\./g, '.');\n        } );\n    }\n    /**\n     * Return a function that can be used to get data from a source object, taking\n     * into account the ability to use nested objects as a source\n     *  @param {string|int|function} mSource The data source for the object\n     *  @returns {function} Data get function\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetObjectDataFn( mSource )\n    {\n        if ( $.isPlainObject( mSource ) )\n        {\n            /* Build an object of get functions, and wrap them in a single call */\n            var o = {};\n            $.each( mSource, function (key, val) {\n                if ( val ) {\n                    o[key] = _fnGetObjectDataFn( val );\n                }\n            } );\n            return function (data, type, row, meta) {\n                var t = o[type] || o._;\n                return t !== undefined ?\n                    t(data, type, row, meta) :\n                    data;\n            };\n        }\n        else if ( mSource === null )\n        {\n            /* Give an empty string for rendering / sorting etc */\n            return function (data) { // type, row and meta also passed, but not used\n                return data;\n            };\n        }\n        else if ( typeof mSource === 'function' )\n        {\n            return function (data, type, row, meta) {\n                return mSource( data, type, row, meta );\n            };\n        }\n        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n                  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n        {\n            /* If there is a . in the source string then the data source is in a\n             * nested object so we loop over the data for each level to get the next\n             * level down. On each loop we test for undefined, and if found immediately\n             * return. This allows entire objects to be missing and sDefaultContent to\n             * be used if defined, rather than throwing an error\n             */\n            var fetchData = function (data, type, src) {\n                var arrayNotation, funcNotation, out, innerSrc;\n                if ( src !== \"\" )\n                {\n                    var a = _fnSplitObjNotation( src );\n                    for ( var i=0, iLen=a.length ; i<iLen ; i++ )\n                    {\n                        // Check if we are dealing with special notation\n                        arrayNotation = a[i].match(__reArray);\n                        funcNotation = a[i].match(__reFn);\n                        if ( arrayNotation )\n                        {\n                            // Array notation\n                            a[i] = a[i].replace(__reArray, '');\n                            // Condition allows simply [] to be passed in\n                            if ( a[i] !== \"\" ) {\n                                data = data[a[i]];\n                            }\n                            out = [];\n                            // Get the remainder of the nested object to get\n                            a.splice( 0, i+1 );\n                            innerSrc = a.join('.');\n                            // Traverse each entry in the array getting the properties requested\n                            if ( $.isArray( data ) ) {\n                                for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\n                                    out.push( fetchData( data[j], type, innerSrc ) );\n                                }\n                            }\n                            // If a string is given in between the array notation indicators, that\n                            // is used to join the strings together, otherwise an array is returned\n                            var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\n                            data = (join===\"\") ? out : out.join(join);\n                            // The inner call to fetchData has already traversed through the remainder\n                            // of the source requested, so we exit from the loop\n                            break;\n                        }\n                        else if ( funcNotation )\n                        {\n                            // Function call\n                            a[i] = a[i].replace(__reFn, '');\n                            data = data[a[i]]();\n                            continue;\n                        }\n                        if ( data === null || data[a[i]] === undefined )\n                        {\n                            return undefined;\n                        }\n                        data = data[a[i]];\n                    }\n                }\n                return data;\n            };\n            return function (data, type) { // row and meta also passed, but not used\n                return fetchData( data, type, mSource );\n            };\n        }\n        else\n        {\n            /* Array or flat object mapping */\n            return function (data) { // row and meta also passed, but not used\n                return data[mSource];\n            };\n        }\n    }\n    /**\n     * Return a function that can be used to set data from a source object, taking\n     * into account the ability to use nested objects as a source\n     *  @param {string|int|function} mSource The data source for the object\n     *  @returns {function} Data set function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSetObjectDataFn( mSource )\n    {\n        if ( $.isPlainObject( mSource ) )\n        {\n            /* Unlike get, only the underscore (global) option is used for for\n             * setting data since we don't know the type here. This is why an object\n             * option is not documented for `mData` (which is read/write), but it is\n             * for `mRender` which is read only.\n             */\n            return _fnSetObjectDataFn( mSource._ );\n        }\n        else if ( mSource === null )\n        {\n            /* Nothing to do when the data source is null */\n            return function () {};\n        }\n        else if ( typeof mSource === 'function' )\n        {\n            return function (data, val, meta) {\n                mSource( data, 'set', val, meta );\n            };\n        }\n        else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n                  mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n        {\n            /* Like the get, we need to get data from a nested object */\n            var setData = function (data, val, src) {\n                var a = _fnSplitObjNotation( src ), b;\n                var aLast = a[a.length-1];\n                var arrayNotation, funcNotation, o, innerSrc;\n                for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\n                {\n                    // Check if we are dealing with an array notation request\n                    arrayNotation = a[i].match(__reArray);\n                    funcNotation = a[i].match(__reFn);\n                    if ( arrayNotation )\n                    {\n                        a[i] = a[i].replace(__reArray, '');\n                        data[a[i]] = [];\n                        // Get the remainder of the nested object to set so we can recurse\n                        b = a.slice();\n                        b.splice( 0, i+1 );\n                        innerSrc = b.join('.');\n                        // Traverse each entry in the array setting the properties requested\n                        if ( $.isArray( val ) )\n                        {\n                            for ( var j=0, jLen=val.length ; j<jLen ; j++ )\n                            {\n                                o = {};\n                                setData( o, val[j], innerSrc );\n                                data[a[i]].push( o );\n                            }\n                        }\n                        else\n                        {\n                            // We've been asked to save data to an array, but it\n                            // isn't array data to be saved. Best that can be done\n                            // is to just save the value.\n                            data[a[i]] = val;\n                        }\n                        // The inner call to setData has already traversed through the remainder\n                        // of the source and has set the data, thus we can exit here\n                        return;\n                    }\n                    else if ( funcNotation )\n                    {\n                        // Function call\n                        a[i] = a[i].replace(__reFn, '');\n                        data = data[a[i]]( val );\n                    }\n                    // If the nested object doesn't currently exist - since we are\n                    // trying to set the value - create it\n                    if ( data[a[i]] === null || data[a[i]] === undefined )\n                    {\n                        data[a[i]] = {};\n                    }\n                    data = data[a[i]];\n                }\n                // Last item in the input - i.e, the actual set\n                if ( aLast.match(__reFn ) )\n                {\n                    // Function call\n                    data = data[aLast.replace(__reFn, '')]( val );\n                }\n                else\n                {\n                    // If array notation is used, we just want to strip it and use the property name\n                    // and assign the value. If it isn't used, then we get the result we want anyway\n                    data[aLast.replace(__reArray, '')] = val;\n                }\n            };\n            return function (data, val) { // meta is also passed in, but not used\n                return setData( data, val, mSource );\n            };\n        }\n        else\n        {\n            /* Array or flat object mapping */\n            return function (data, val) { // meta is also passed in, but not used\n                data[mSource] = val;\n            };\n        }\n    }\n    /**\n     * Return an array with the full table data\n     *  @param {object} settings dataTables settings object\n     *  @returns array {array} aData Master data array\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetDataMaster ( settings )\n    {\n        return _pluck( settings.aoData, '_aData' );\n    }\n    /**\n     * Nuke the table\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnClearTable( settings )\n    {\n        settings.aoData.length = 0;\n        settings.aiDisplayMaster.length = 0;\n        settings.aiDisplay.length = 0;\n        settings.aIds = {};\n    }\n     /**\n     * Take an array of integers (index array) and remove a target integer (value - not\n     * the key!)\n     *  @param {array} a Index array to target\n     *  @param {int} iTarget value to find\n     *  @param {int} splice value to find\n     *  @memberof DataTable#oApi\n     */\n    function _fnDeleteIndex( a, iTarget, splice )\n    {\n        var iTargetIndex = -1;\n        for ( var i=0, iLen=a.length ; i<iLen ; i++ )\n        {\n            if ( a[i] == iTarget )\n            {\n                iTargetIndex = i;\n            }\n            else if ( a[i] > iTarget )\n            {\n                a[i]--;\n            }\n        }\n        if ( iTargetIndex != -1 && splice === undefined )\n        {\n            a.splice( iTargetIndex, 1 );\n        }\n    }\n    /**\n     * Mark cached data as invalid such that a re-read of the data will occur when\n     * the cached data is next requested. Also update from the data source object.\n     *\n     * @param {object} settings DataTables settings object\n     * @param {int}    rowIdx   Row index to invalidate\n     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n     *     or 'data'\n     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n     *     row will be invalidated\n     * @memberof DataTable#oApi\n     *\n     * @todo For the modularisation of v1.11 this will need to become a callback, so\n     *   the sort and filter methods can subscribe to it. That will required\n     *   initialisation options for sorting, which is why it is not already baked in\n     */\n    function _fnInvalidate( settings, rowIdx, src, colIdx )\n    {\n        var row = settings.aoData[rowIdx];\n        var i, ien;\n        var cellWrite = function ( cell, col ) {\n            // This is very frustrating, but in IE if you just write directly\n            // to innerHTML, and elements that are overwritten are GC'ed,\n            // even if there is a reference to them elsewhere\n            while ( cell.childNodes.length ) {\n                cell.removeChild( cell.firstChild );\n            }\n            cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\n        };\n        // Are we reading last data from DOM or the data object?\n        if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\n            // Read the data from the DOM\n            row._aData = _fnGetRowElements(\n                    settings, row, colIdx, colIdx === undefined ? undefined : row._aData\n                )\n                .data;\n        }\n        else {\n            // Reading from data object, update the DOM\n            var cells = row.anCells;\n            if ( cells ) {\n                if ( colIdx !== undefined ) {\n                    cellWrite( cells[colIdx], colIdx );\n                }\n                else {\n                    for ( i=0, ien=cells.length ; i<ien ; i++ ) {\n                        cellWrite( cells[i], i );\n                    }\n                }\n            }\n        }\n        // For both row and cell invalidation, the cached data for sorting and\n        // filtering is nulled out\n        row._aSortData = null;\n        row._aFilterData = null;\n        // Invalidate the type for a specific column (if given) or all columns since\n        // the data might have changed\n        var cols = settings.aoColumns;\n        if ( colIdx !== undefined ) {\n            cols[colIdx].sType = null;\n        }\n        else {\n            for ( i=0, ien=cols.length ; i<ien ; i++ ) {\n                cols[i].sType = null;\n            }\n            // Update DataTables special `DT_*` attributes for the row\n            _fnRowAttributes( settings, row );\n        }\n    }\n    /**\n     * Build a data source object from an HTML row, reading the contents of the\n     * cells that are in the row.\n     *\n     * @param {object} settings DataTables settings object\n     * @param {node|object} row element from which to read data or existing row\n     *   object from which to re-read the data from the cells\n     * @param {int} [colIdx] Optional column index\n     * @param {array|object} [d] Data source object. If `colIdx` is given then this\n     *   parameter should also be given and will be used to write the data into.\n     *   Only the column in question will be written\n     * @returns {object} Object with two parameters: `data` the data read, in\n     *   document order, and `cells` and array of nodes (they can be useful to the\n     *   caller, so rather than needing a second traversal to get them, just return\n     *   them from here).\n     * @memberof DataTable#oApi\n     */\n    function _fnGetRowElements( settings, row, colIdx, d )\n    {\n        var\n            tds = [],\n            td = row.firstChild,\n            name, col, i=0, contents,\n            columns = settings.aoColumns,\n            objectRead = settings._rowReadObject;\n        // Allow the data object to be passed in, or construct\n        d = d !== undefined ?\n            d :\n            objectRead ?\n                {} :\n                [];\n        var attr = function ( str, td  ) {\n            if ( typeof str === 'string' ) {\n                var idx = str.indexOf('@');\n                if ( idx !== -1 ) {\n                    var attr = str.substring( idx+1 );\n                    var setter = _fnSetObjectDataFn( str );\n                    setter( d, td.getAttribute( attr ) );\n                }\n            }\n        };\n        // Read data from a cell and store into the data object\n        var cellProcess = function ( cell ) {\n            if ( colIdx === undefined || colIdx === i ) {\n                col = columns[i];\n                contents = $.trim(cell.innerHTML);\n                if ( col && col._bAttrSrc ) {\n                    var setter = _fnSetObjectDataFn( col.mData._ );\n                    setter( d, contents );\n                    attr( col.mData.sort, cell );\n                    attr( col.mData.type, cell );\n                    attr( col.mData.filter, cell );\n                }\n                else {\n                    // Depending on the `data` option for the columns the data can\n                    // be read to either an object or an array.\n                    if ( objectRead ) {\n                        if ( ! col._setter ) {\n                            // Cache the setter function\n                            col._setter = _fnSetObjectDataFn( col.mData );\n                        }\n                        col._setter( d, contents );\n                    }\n                    else {\n                        d[i] = contents;\n                    }\n                }\n            }\n            i++;\n        };\n        if ( td ) {\n            // `tr` element was passed in\n            while ( td ) {\n                name = td.nodeName.toUpperCase();\n                if ( name == \"TD\" || name == \"TH\" ) {\n                    cellProcess( td );\n                    tds.push( td );\n                }\n                td = td.nextSibling;\n            }\n        }\n        else {\n            // Existing row object passed in\n            tds = row.anCells;\n            for ( var j=0, jen=tds.length ; j<jen ; j++ ) {\n                cellProcess( tds[j] );\n            }\n        }\n        // Read the ID from the DOM if present\n        var rowNode = row.firstChild ? row : row.nTr;\n        if ( rowNode ) {\n            var id = rowNode.getAttribute( 'id' );\n            if ( id ) {\n                _fnSetObjectDataFn( settings.rowId )( d, id );\n            }\n        }\n        return {\n            data: d,\n            cells: tds\n        };\n    }\n    /**\n     * Create a new TR element (and it's TD children) for a row\n     *  @param {object} oSettings dataTables settings object\n     *  @param {int} iRow Row to consider\n     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n     *    DataTables will create a row automatically\n     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n     *    if nTr is.\n     *  @memberof DataTable#oApi\n     */\n    function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\n    {\n        var\n            row = oSettings.aoData[iRow],\n            rowData = row._aData,\n            cells = [],\n            nTr, nTd, oCol,\n            i, iLen;\n        if ( row.nTr === null )\n        {\n            nTr = nTrIn || document.createElement('tr');\n            row.nTr = nTr;\n            row.anCells = cells;\n            /* Use a private property on the node to allow reserve mapping from the node\n             * to the aoData array for fast look up\n             */\n            nTr._DT_RowIndex = iRow;\n            /* Special parameters can be given by the data source to be used on the row */\n            _fnRowAttributes( oSettings, row );\n            /* Process each column */\n            for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\n            {\n                oCol = oSettings.aoColumns[i];\n                nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );\n                nTd._DT_CellIndex = {\n                    row: iRow,\n                    column: i\n                };\n                cells.push( nTd );\n                // Need to create the HTML if new, or if a rendering function is defined\n                if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&\n                     (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\n                ) {\n                    nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\n                }\n                /* Add user defined class */\n                if ( oCol.sClass )\n                {\n                    nTd.className += ' '+oCol.sClass;\n                }\n                // Visibility - add or remove as required\n                if ( oCol.bVisible && ! nTrIn )\n                {\n                    nTr.appendChild( nTd );\n                }\n                else if ( ! oCol.bVisible && nTrIn )\n                {\n                    nTd.parentNode.removeChild( nTd );\n                }\n                if ( oCol.fnCreatedCell )\n                {\n                    oCol.fnCreatedCell.call( oSettings.oInstance,\n                        nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\n                    );\n                }\n            }\n            _fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );\n        }\n        // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n        // and deployed\n        row.nTr.setAttribute( 'role', 'row' );\n    }\n    /**\n     * Add attributes to a row based on the special `DT_*` parameters in a data\n     * source object.\n     *  @param {object} settings DataTables settings object\n     *  @param {object} row DataTables row object for the row to be modified\n     *  @memberof DataTable#oApi\n     */\n    function _fnRowAttributes( settings, row )\n    {\n        var tr = row.nTr;\n        var data = row._aData;\n        if ( tr ) {\n            var id = settings.rowIdFn( data );\n            if ( id ) {\n                tr.id = id;\n            }\n            if ( data.DT_RowClass ) {\n                // Remove any classes added by DT_RowClass before\n                var a = data.DT_RowClass.split(' ');\n                row.__rowc = row.__rowc ?\n                    _unique( row.__rowc.concat( a ) ) :\n                    a;\n                $(tr)\n                    .removeClass( row.__rowc.join(' ') )\n                    .addClass( data.DT_RowClass );\n            }\n            if ( data.DT_RowAttr ) {\n                $(tr).attr( data.DT_RowAttr );\n            }\n            if ( data.DT_RowData ) {\n                $(tr).data( data.DT_RowData );\n            }\n        }\n    }\n    /**\n     * Create the HTML header for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnBuildHead( oSettings )\n    {\n        var i, ien, cell, row, column;\n        var thead = oSettings.nTHead;\n        var tfoot = oSettings.nTFoot;\n        var createHeader = $('th, td', thead).length === 0;\n        var classes = oSettings.oClasses;\n        var columns = oSettings.aoColumns;\n        if ( createHeader ) {\n            row = $('<tr/>').appendTo( thead );\n        }\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            column = columns[i];\n            cell = $( column.nTh ).addClass( column.sClass );\n            if ( createHeader ) {\n                cell.appendTo( row );\n            }\n            // 1.11 move into sorting\n            if ( oSettings.oFeatures.bSort ) {\n                cell.addClass( column.sSortingClass );\n                if ( column.bSortable !== false ) {\n                    cell\n                        .attr( 'tabindex', oSettings.iTabIndex )\n                        .attr( 'aria-controls', oSettings.sTableId );\n                    _fnSortAttachListener( oSettings, column.nTh, i );\n                }\n            }\n            if ( column.sTitle != cell[0].innerHTML ) {\n                cell.html( column.sTitle );\n            }\n            _fnRenderer( oSettings, 'header' )(\n                oSettings, cell, column, classes\n            );\n        }\n        if ( createHeader ) {\n            _fnDetectHeader( oSettings.aoHeader, thead );\n        }\n        /* ARIA role for the rows */\n        $(thead).find('>tr').attr('role', 'row');\n        /* Deal with the footer - add classes if required */\n        $(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\n        $(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\n        // Cache the footer cells. Note that we only take the cells from the first\n        // row in the footer. If there is more than one row the user wants to\n        // interact with, they need to use the table().foot() method. Note also this\n        // allows cells to be used for multiple columns using colspan\n        if ( tfoot !== null ) {\n            var cells = oSettings.aoFooter[0];\n            for ( i=0, ien=cells.length ; i<ien ; i++ ) {\n                column = columns[i];\n                column.nTf = cells[i].cell;\n                if ( column.sClass ) {\n                    $(column.nTf).addClass( column.sClass );\n                }\n            }\n        }\n    }\n    /**\n     * Draw the header (or footer) element based on the column visibility states. The\n     * methodology here is to use the layout array from _fnDetectHeader, modified for\n     * the instantaneous column visibility, to construct the new layout. The grid is\n     * traversed over cell at a time in a rows x columns grid fashion, although each\n     * cell insert can cover multiple elements in the grid - which is tracks using the\n     * aApplied array. Cell inserts in the grid will only occur where there isn't\n     * already a cell in that position.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {objects} aoSource Layout array from _fnDetectHeader\n     *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n     *  @memberof DataTable#oApi\n     */\n    function _fnDrawHead( oSettings, aoSource, bIncludeHidden )\n    {\n        var i, iLen, j, jLen, k, n, nLocalTr;\n        var aoLocal = [];\n        var aApplied = [];\n        var iColumns = oSettings.aoColumns.length;\n        var iRowspan, iColspan;\n        if ( ! aoSource )\n        {\n            return;\n        }\n        if (  bIncludeHidden === undefined )\n        {\n            bIncludeHidden = false;\n        }\n        /* Make a copy of the master layout array, but without the visible columns in it */\n        for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\n        {\n            aoLocal[i] = aoSource[i].slice();\n            aoLocal[i].nTr = aoSource[i].nTr;\n            /* Remove any columns which are currently hidden */\n            for ( j=iColumns-1 ; j>=0 ; j-- )\n            {\n                if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\n                {\n                    aoLocal[i].splice( j, 1 );\n                }\n            }\n            /* Prep the applied array - it needs an element for each row */\n            aApplied.push( [] );\n        }\n        for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\n        {\n            nLocalTr = aoLocal[i].nTr;\n            /* All cells are going to be replaced, so empty out the row */\n            if ( nLocalTr )\n            {\n                while( (n = nLocalTr.firstChild) )\n                {\n                    nLocalTr.removeChild( n );\n                }\n            }\n            for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\n            {\n                iRowspan = 1;\n                iColspan = 1;\n                /* Check to see if there is already a cell (row/colspan) covering our target\n                 * insert point. If there is, then there is nothing to do.\n                 */\n                if ( aApplied[i][j] === undefined )\n                {\n                    nLocalTr.appendChild( aoLocal[i][j].cell );\n                    aApplied[i][j] = 1;\n                    /* Expand the cell to cover as many rows as needed */\n                    while ( aoLocal[i+iRowspan] !== undefined &&\n                            aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\n                    {\n                        aApplied[i+iRowspan][j] = 1;\n                        iRowspan++;\n                    }\n                    /* Expand the cell to cover as many columns as needed */\n                    while ( aoLocal[i][j+iColspan] !== undefined &&\n                            aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\n                    {\n                        /* Must update the applied array over the rows for the columns */\n                        for ( k=0 ; k<iRowspan ; k++ )\n                        {\n                            aApplied[i+k][j+iColspan] = 1;\n                        }\n                        iColspan++;\n                    }\n                    /* Do the actual expansion in the DOM */\n                    $(aoLocal[i][j].cell)\n                        .attr('rowspan', iRowspan)\n                        .attr('colspan', iColspan);\n                }\n            }\n        }\n    }\n    /**\n     * Insert the required TR nodes into the table for display\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnDraw( oSettings )\n    {\n        /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n        var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\n        if ( $.inArray( false, aPreDraw ) !== -1 )\n        {\n            _fnProcessingDisplay( oSettings, false );\n            return;\n        }\n        var anRows = [];\n        var iRowCount = 0;\n        var asStripeClasses = oSettings.asStripeClasses;\n        var iStripes = asStripeClasses.length;\n        var oLang = oSettings.oLanguage;\n        var iInitDisplayStart = oSettings.iInitDisplayStart;\n        var bServerSide = _fnDataSource( oSettings ) == 'ssp';\n        var aiDisplay = oSettings.aiDisplay;\n        oSettings.bDrawing = true;\n        /* Check and see if we have an initial draw position from state saving */\n        if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\n        {\n            oSettings._iDisplayStart = bServerSide ?\n                iInitDisplayStart :\n                iInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n                    0 :\n                    iInitDisplayStart;\n            oSettings.iInitDisplayStart = -1;\n        }\n        var iDisplayStart = oSettings._iDisplayStart;\n        var iDisplayEnd = oSettings.fnDisplayEnd();\n        /* Server-side processing draw intercept */\n        if ( oSettings.bDeferLoading )\n        {\n            oSettings.bDeferLoading = false;\n            oSettings.iDraw++;\n            _fnProcessingDisplay( oSettings, false );\n        }\n        else if ( !bServerSide )\n        {\n            oSettings.iDraw++;\n        }\n        else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\n        {\n            return;\n        }\n        if ( aiDisplay.length !== 0 )\n        {\n            var iStart = bServerSide ? 0 : iDisplayStart;\n            var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n            for ( var j=iStart ; j<iEnd ; j++ )\n            {\n                var iDataIndex = aiDisplay[j];\n                var aoData = oSettings.aoData[iDataIndex];\n                if ( aoData.nTr === null )\n                {\n                    _fnCreateTr( oSettings, iDataIndex );\n                }\n                var nRow = aoData.nTr;\n                /* Remove the old striping classes and then add the new one */\n                if ( iStripes !== 0 )\n                {\n                    var sStripe = asStripeClasses[iRowCount % iStripes];\n                    if ( aoData._sRowStripe != sStripe )\n                    {\n                        $(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\n                        aoData._sRowStripe = sStripe;\n                    }\n                }\n                // Row callback functions - might want to manipulate the row\n                // iRowCount and j are not currently documented. Are they at all\n                // useful?\n                _fnCallbackFire( oSettings, 'aoRowCallback', null,\n                    [nRow, aoData._aData, iRowCount, j] );\n                anRows.push( nRow );\n                iRowCount++;\n            }\n        }\n        else\n        {\n            /* Table is empty - create a row with an empty message in it */\n            var sZero = oLang.sZeroRecords;\n            if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\n            {\n                sZero = oLang.sLoadingRecords;\n            }\n            else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\n            {\n                sZero = oLang.sEmptyTable;\n            }\n            anRows[0] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\n                .append( $('<td />', {\n                    'valign':  'top',\n                    'colSpan': _fnVisbleColumns( oSettings ),\n                    'class':   oSettings.oClasses.sRowEmpty\n                } ).html( sZero ) )[0];\n        }\n        /* Header and footer callbacks */\n        _fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n        _fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\n            _fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n        var body = $(oSettings.nTBody);\n        body.children().detach();\n        body.append( $(anRows) );\n        /* Call all required callback functions for the end of a draw */\n        _fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\n        /* Draw is complete, sorting and filtering must be as well */\n        oSettings.bSorted = false;\n        oSettings.bFiltered = false;\n        oSettings.bDrawing = false;\n    }\n    /**\n     * Redraw the table - taking account of the various features which are enabled\n     *  @param {object} settings dataTables settings object\n     *  @param {boolean} [holdPosition] Keep the current paging position. By default\n     *    the paging is reset to the first page\n     *  @memberof DataTable#oApi\n     */\n    function _fnReDraw( settings, holdPosition )\n    {\n        var\n            features = settings.oFeatures,\n            sort     = features.bSort,\n            filter   = features.bFilter;\n        if ( sort ) {\n            _fnSort( settings );\n        }\n        if ( filter ) {\n            _fnFilterComplete( settings, settings.oPreviousSearch );\n        }\n        else {\n            // No filtering, so we want to just use the display master\n            settings.aiDisplay = settings.aiDisplayMaster.slice();\n        }\n        if ( holdPosition !== true ) {\n            settings._iDisplayStart = 0;\n        }\n        // Let any modules know about the draw hold position state (used by\n        // scrolling internally)\n        settings._drawHold = holdPosition;\n        _fnDraw( settings );\n        settings._drawHold = false;\n    }\n    /**\n     * Add the options to the page HTML for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnAddOptionsHtml ( oSettings )\n    {\n        var classes = oSettings.oClasses;\n        var table = $(oSettings.nTable);\n        var holding = $('<div/>').insertBefore( table ); // Holding element for speed\n        var features = oSettings.oFeatures;\n        // All DataTables are wrapped in a div\n        var insert = $('<div/>', {\n            id:      oSettings.sTableId+'_wrapper',\n            'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\n        } );\n        oSettings.nHolding = holding[0];\n        oSettings.nTableWrapper = insert[0];\n        oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n        /* Loop over the user set positioning and place the elements as needed */\n        var aDom = oSettings.sDom.split('');\n        var featureNode, cOption, nNewNode, cNext, sAttr, j;\n        for ( var i=0 ; i<aDom.length ; i++ )\n        {\n            featureNode = null;\n            cOption = aDom[i];\n            if ( cOption == '<' )\n            {\n                /* New container div */\n                nNewNode = $('<div/>')[0];\n                /* Check to see if we should append an id and/or a class name to the container */\n                cNext = aDom[i+1];\n                if ( cNext == \"'\" || cNext == '\"' )\n                {\n                    sAttr = \"\";\n                    j = 2;\n                    while ( aDom[i+j] != cNext )\n                    {\n                        sAttr += aDom[i+j];\n                        j++;\n                    }\n                    /* Replace jQuery UI constants @todo depreciated */\n                    if ( sAttr == \"H\" )\n                    {\n                        sAttr = classes.sJUIHeader;\n                    }\n                    else if ( sAttr == \"F\" )\n                    {\n                        sAttr = classes.sJUIFooter;\n                    }\n                    /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n                     * breaks the string into parts and applies them as needed\n                     */\n                    if ( sAttr.indexOf('.') != -1 )\n                    {\n                        var aSplit = sAttr.split('.');\n                        nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\n                        nNewNode.className = aSplit[1];\n                    }\n                    else if ( sAttr.charAt(0) == \"#\" )\n                    {\n                        nNewNode.id = sAttr.substr(1, sAttr.length-1);\n                    }\n                    else\n                    {\n                        nNewNode.className = sAttr;\n                    }\n                    i += j; /* Move along the position array */\n                }\n                insert.append( nNewNode );\n                insert = $(nNewNode);\n            }\n            else if ( cOption == '>' )\n            {\n                /* End container div */\n                insert = insert.parent();\n            }\n            // @todo Move options into their own plugins?\n            else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\n            {\n                /* Length */\n                featureNode = _fnFeatureHtmlLength( oSettings );\n            }\n            else if ( cOption == 'f' && features.bFilter )\n            {\n                /* Filter */\n                featureNode = _fnFeatureHtmlFilter( oSettings );\n            }\n            else if ( cOption == 'r' && features.bProcessing )\n            {\n                /* pRocessing */\n                featureNode = _fnFeatureHtmlProcessing( oSettings );\n            }\n            else if ( cOption == 't' )\n            {\n                /* Table */\n                featureNode = _fnFeatureHtmlTable( oSettings );\n            }\n            else if ( cOption ==  'i' && features.bInfo )\n            {\n                /* Info */\n                featureNode = _fnFeatureHtmlInfo( oSettings );\n            }\n            else if ( cOption == 'p' && features.bPaginate )\n            {\n                /* Pagination */\n                featureNode = _fnFeatureHtmlPaginate( oSettings );\n            }\n            else if ( DataTable.ext.feature.length !== 0 )\n            {\n                /* Plug-in features */\n                var aoFeatures = DataTable.ext.feature;\n                for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\n                {\n                    if ( cOption == aoFeatures[k].cFeature )\n                    {\n                        featureNode = aoFeatures[k].fnInit( oSettings );\n                        break;\n                    }\n                }\n            }\n            /* Add to the 2D features array */\n            if ( featureNode )\n            {\n                var aanFeatures = oSettings.aanFeatures;\n                if ( ! aanFeatures[cOption] )\n                {\n                    aanFeatures[cOption] = [];\n                }\n                aanFeatures[cOption].push( featureNode );\n                insert.append( featureNode );\n            }\n        }\n        /* Built our DOM structure - replace the holding div with what we want */\n        holding.replaceWith( insert );\n        oSettings.nHolding = null;\n    }\n    /**\n     * Use the DOM source to create up an array of header cells. The idea here is to\n     * create a layout grid (array) of rows x columns, which contains a reference\n     * to the cell that that point in the grid (regardless of col/rowspan), such that\n     * any column / row could be removed and the new grid constructed\n     *  @param {object} aLayout Array to store the calculated layout in\n     *  @param {node} nThead The header/footer element for the table\n     *  @memberof DataTable#oApi\n     */\n    function _fnDetectHeader ( aLayout, nThead )\n    {\n        var nTrs = $(nThead).children('tr');\n        var nTr, nCell;\n        var i, k, l, iLen, iColShifted, iColumn, iColspan, iRowspan;\n        var bUnique;\n        var fnShiftCol = function ( a, i, j ) {\n            var k = a[i];\n                    while ( k[j] ) {\n                j++;\n            }\n            return j;\n        };\n        aLayout.splice( 0, aLayout.length );\n        /* We know how many rows there are in the layout - so prep it */\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n        {\n            aLayout.push( [] );\n        }\n        /* Calculate a layout array */\n        for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n        {\n            nTr = nTrs[i];\n            iColumn = 0;\n            /* For every cell in the row... */\n            nCell = nTr.firstChild;\n            while ( nCell ) {\n                if ( nCell.nodeName.toUpperCase() == \"TD\" ||\n                     nCell.nodeName.toUpperCase() == \"TH\" )\n                {\n                    /* Get the col and rowspan attributes from the DOM and sanitise them */\n                    iColspan = nCell.getAttribute('colspan') * 1;\n                    iRowspan = nCell.getAttribute('rowspan') * 1;\n                    iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\n                    iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\n                    /* There might be colspan cells already in this row, so shift our target\n                     * accordingly\n                     */\n                    iColShifted = fnShiftCol( aLayout, i, iColumn );\n                    /* Cache calculation for unique columns */\n                    bUnique = iColspan === 1 ? true : false;\n                    /* If there is col / rowspan, copy the information into the layout grid */\n                    for ( l=0 ; l<iColspan ; l++ )\n                    {\n                        for ( k=0 ; k<iRowspan ; k++ )\n                        {\n                            aLayout[i+k][iColShifted+l] = {\n                                \"cell\": nCell,\n                                \"unique\": bUnique\n                            };\n                            aLayout[i+k].nTr = nTr;\n                        }\n                    }\n                }\n                nCell = nCell.nextSibling;\n            }\n        }\n    }\n    /**\n     * Get an array of unique th elements, one for each column\n     *  @param {object} oSettings dataTables settings object\n     *  @param {node} nHeader automatically detect the layout from this node - optional\n     *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n     *  @returns array {node} aReturn list of unique th's\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetUniqueThs ( oSettings, nHeader, aLayout )\n    {\n        var aReturn = [];\n        if ( !aLayout )\n        {\n            aLayout = oSettings.aoHeader;\n            if ( nHeader )\n            {\n                aLayout = [];\n                _fnDetectHeader( aLayout, nHeader );\n            }\n        }\n        for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\n        {\n            for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\n            {\n                if ( aLayout[i][j].unique &&\n                     (!aReturn[j] || !oSettings.bSortCellsTop) )\n                {\n                    aReturn[j] = aLayout[i][j].cell;\n                }\n            }\n        }\n        return aReturn;\n    }\n    /**\n     * Create an Ajax call based on the table's settings, taking into account that\n     * parameters can have multiple forms, and backwards compatibility.\n     *\n     * @param {object} oSettings dataTables settings object\n     * @param {array} data Data to send to the server, required by\n     *     DataTables - may be augmented by developer callbacks\n     * @param {function} fn Callback function to run when data is obtained\n     */\n    function _fnBuildAjax( oSettings, data, fn )\n    {\n        // Compatibility with 1.9-, allow fnServerData and event to manipulate\n        _fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\n        // Convert to object based for 1.10+ if using the old array scheme which can\n        // come from server-side processing or serverParams\n        if ( data && $.isArray(data) ) {\n            var tmp = {};\n            var rbracket = /(.*?)\\[\\]$/;\n            $.each( data, function (key, val) {\n                var match = val.name.match(rbracket);\n                if ( match ) {\n                    // Support for arrays\n                    var name = match[0];\n                    if ( ! tmp[name] ) {\n                        tmp[name] = [];\n                    }\n                    tmp[name].push( val.value );\n                }\n                else {\n                    tmp[val.name] = val.value;\n                }\n            } );\n            data = tmp;\n        }\n        var ajaxData;\n        var ajax = oSettings.ajax;\n        var instance = oSettings.oInstance;\n        var callback = function ( json ) {\n            _fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\n            fn( json );\n        };\n        if ( $.isPlainObject( ajax ) && ajax.data )\n        {\n            ajaxData = ajax.data;\n            var newData = $.isFunction( ajaxData ) ?\n                ajaxData( data, oSettings ) :  // fn can manipulate data or return\n                ajaxData;                      // an object object or array to merge\n            // If the function returned something, use that alone\n            data = $.isFunction( ajaxData ) && newData ?\n                newData :\n                $.extend( true, data, newData );\n            // Remove the data property as we've resolved it already and don't want\n            // jQuery to do it again (it is restored at the end of the function)\n            delete ajax.data;\n        }\n        var baseAjax = {\n            \"data\": data,\n            \"success\": function (json) {\n                var error = json.error || json.sError;\n                if ( error ) {\n                    _fnLog( oSettings, 0, error );\n                }\n                oSettings.json = json;\n                callback( json );\n            },\n            \"dataType\": \"json\",\n            \"cache\": false,\n            \"type\": oSettings.sServerMethod,\n            \"error\": function (xhr, error) {\n                var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\n                if ( $.inArray( true, ret ) === -1 ) {\n                    if ( error == \"parsererror\" ) {\n                        _fnLog( oSettings, 0, 'Invalid JSON response', 1 );\n                    }\n                    else if ( xhr.readyState === 4 ) {\n                        _fnLog( oSettings, 0, 'Ajax error', 7 );\n                    }\n                }\n                _fnProcessingDisplay( oSettings, false );\n            }\n        };\n        // Store the data submitted for the API\n        oSettings.oAjaxData = data;\n        // Allow plug-ins and external processes to modify the data\n        _fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\n        if ( oSettings.fnServerData )\n        {\n            // DataTables 1.9- compatibility\n            oSettings.fnServerData.call( instance,\n                oSettings.sAjaxSource,\n                $.map( data, function (val, key) { // Need to convert back to 1.9 trad format\n                    return { name: key, value: val };\n                } ),\n                callback,\n                oSettings\n            );\n        }\n        else if ( oSettings.sAjaxSource || typeof ajax === 'string' )\n        {\n            // DataTables 1.9- compatibility\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, {\n                url: ajax || oSettings.sAjaxSource\n            } ) );\n        }\n        else if ( $.isFunction( ajax ) )\n        {\n            // Is a function - let the caller define what needs to be done\n            oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\n        }\n        else\n        {\n            // Object to extend the base settings\n            oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\n            // Restore for next time around\n            ajax.data = ajaxData;\n        }\n    }\n    /**\n     * Update the table using an Ajax call\n     *  @param {object} settings dataTables settings object\n     *  @returns {boolean} Block the table drawing or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxUpdate( settings )\n    {\n        if ( settings.bAjaxDataGet ) {\n            settings.iDraw++;\n            _fnProcessingDisplay( settings, true );\n            _fnBuildAjax(\n                settings,\n                _fnAjaxParameters( settings ),\n                function(json) {\n                    _fnAjaxUpdateDraw( settings, json );\n                }\n            );\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Build up the parameters in an object needed for a server-side processing\n     * request. Note that this is basically done twice, is different ways - a modern\n     * method which is used by default in DataTables 1.10 which uses objects and\n     * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n     * the sAjaxSource option is used in the initialisation, or the legacyAjax\n     * option is set.\n     *  @param {object} settings dataTables settings object\n     *  @returns {bool} block the table drawing or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnAjaxParameters( settings )\n    {\n        var\n            columns = settings.aoColumns,\n            columnCount = columns.length,\n            features = settings.oFeatures,\n            preSearch = settings.oPreviousSearch,\n            preColSearch = settings.aoPreSearchCols,\n            i, data = [], dataProp, column, columnSearch,\n            sort = _fnSortFlatten( settings ),\n            displayStart = settings._iDisplayStart,\n            displayLength = features.bPaginate !== false ?\n                settings._iDisplayLength :\n                -1;\n        var param = function ( name, value ) {\n            data.push( { 'name': name, 'value': value } );\n        };\n        // DataTables 1.9- compatible method\n        param( 'sEcho',          settings.iDraw );\n        param( 'iColumns',       columnCount );\n        param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\n        param( 'iDisplayStart',  displayStart );\n        param( 'iDisplayLength', displayLength );\n        // DataTables 1.10+ method\n        var d = {\n            draw:    settings.iDraw,\n            columns: [],\n            order:   [],\n            start:   displayStart,\n            length:  displayLength,\n            search:  {\n                value: preSearch.sSearch,\n                regex: preSearch.bRegex\n            }\n        };\n        for ( i=0 ; i<columnCount ; i++ ) {\n            column = columns[i];\n            columnSearch = preColSearch[i];\n            dataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\n            d.columns.push( {\n                data:       dataProp,\n                name:       column.sName,\n                searchable: column.bSearchable,\n                orderable:  column.bSortable,\n                search:     {\n                    value: columnSearch.sSearch,\n                    regex: columnSearch.bRegex\n                }\n            } );\n            param( \"mDataProp_\"+i, dataProp );\n            if ( features.bFilter ) {\n                param( 'sSearch_'+i,     columnSearch.sSearch );\n                param( 'bRegex_'+i,      columnSearch.bRegex );\n                param( 'bSearchable_'+i, column.bSearchable );\n            }\n            if ( features.bSort ) {\n                param( 'bSortable_'+i, column.bSortable );\n            }\n        }\n        if ( features.bFilter ) {\n            param( 'sSearch', preSearch.sSearch );\n            param( 'bRegex', preSearch.bRegex );\n        }\n        if ( features.bSort ) {\n            $.each( sort, function ( i, val ) {\n                d.order.push( { column: val.col, dir: val.dir } );\n                param( 'iSortCol_'+i, val.col );\n                param( 'sSortDir_'+i, val.dir );\n            } );\n            param( 'iSortingCols', sort.length );\n        }\n        // If the legacy.ajax parameter is null, then we automatically decide which\n        // form to use, based on sAjaxSource\n        var legacy = DataTable.ext.legacy.ajax;\n        if ( legacy === null ) {\n            return settings.sAjaxSource ? data : d;\n        }\n        // Otherwise, if legacy has been specified then we use that to decide on the\n        // form\n        return legacy ? data : d;\n    }\n    /**\n     * Data the data from the server (nuking the old) and redraw the table\n     *  @param {object} settings dataTables settings object\n     *  @param {object} json json data return from the server.\n     */\n    function _fnAjaxUpdateDraw ( settings, json )\n    {\n        // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n        // Support both\n        var compat = function ( old, modern ) {\n            return json[old] !== undefined ? json[old] : json[modern];\n        };\n        var data = _fnAjaxDataSrc( settings, json );\n        var draw            = compat( 'sEcho',                'draw' );\n        var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n        var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n        if ( draw ) {\n            // Protect against out of sequence returns\n            if ( draw*1 < settings.iDraw ) {\n                return;\n            }\n            settings.iDraw = draw * 1;\n        }\n        _fnClearTable( settings );\n        settings._iRecordsTotal   = parseInt(recordsTotal, 10);\n        settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n        for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n            _fnAddData( settings, data[i] );\n        }\n        settings.aiDisplay = settings.aiDisplayMaster.slice();\n        settings.bAjaxDataGet = false;\n        _fnDraw( settings );\n        if ( ! settings._bInitComplete ) {\n            _fnInitComplete( settings, json );\n        }\n        settings.bAjaxDataGet = true;\n        _fnProcessingDisplay( settings, false );\n    }\n    /**\n     * Get the data from the JSON data source to use for drawing a table. Using\n     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n     * source object, or from a processing function.\n     *  @param {object} oSettings dataTables settings object\n     *  @param  {object} json Data source object / array from the server\n     *  @return {array} Array of data to use\n     */\n    function _fnAjaxDataSrc ( oSettings, json )\n    {\n        var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\n            oSettings.ajax.dataSrc :\n            oSettings.sAjaxDataProp; // Compatibility with 1.9-.\n        // Compatibility with 1.9-. In order to read from aaData, check if the\n        // default has been changed, if not, check for aaData\n        if ( dataSrc === 'data' ) {\n            return json.aaData || json[dataSrc];\n        }\n        return dataSrc !== \"\" ?\n            _fnGetObjectDataFn( dataSrc )( json ) :\n            json;\n    }\n    /**\n     * Generate the node required for filtering text\n     *  @returns {node} Filter control element\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlFilter ( settings )\n    {\n        var classes = settings.oClasses;\n        var tableId = settings.sTableId;\n        var language = settings.oLanguage;\n        var previousSearch = settings.oPreviousSearch;\n        var features = settings.aanFeatures;\n        var input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\n        var str = language.sSearch;\n        str = str.match(/_INPUT_/) ?\n            str.replace('_INPUT_', input) :\n            str+input;\n        var filter = $('<div/>', {\n                'id': ! features.f ? tableId+'_filter' : null,\n                'class': classes.sFilter\n            } )\n            .append( $('<label/>' ).append( str ) );\n        var searchFn = function() {\n            /* Update all other filter input elements for the new display */\n            var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n            /* Now do the filter */\n            if ( val != previousSearch.sSearch ) {\n                _fnFilterComplete( settings, {\n                    \"sSearch\": val,\n                    \"bRegex\": previousSearch.bRegex,\n                    \"bSmart\": previousSearch.bSmart ,\n                    \"bCaseInsensitive\": previousSearch.bCaseInsensitive\n                } );\n                // Need to redraw, without resorting\n                settings._iDisplayStart = 0;\n                _fnDraw( settings );\n            }\n        };\n        var searchDelay = settings.searchDelay !== null ?\n            settings.searchDelay :\n            _fnDataSource( settings ) === 'ssp' ?\n                400 :\n                0;\n        var jqFilter = $('input', filter)\n            .val( previousSearch.sSearch )\n            .attr( 'placeholder', language.sSearchPlaceholder )\n            .on(\n                'keyup.DT search.DT input.DT paste.DT cut.DT',\n                searchDelay ?\n                    _fnThrottle( searchFn, searchDelay ) :\n                    searchFn\n            )\n            .on( 'keypress.DT', function(e) {\n                /* Prevent form submission */\n                if ( e.keyCode == 13 ) {\n                    return false;\n                }\n            } )\n            .attr('aria-controls', tableId);\n        // Update the input elements whenever the table is filtered\n        $(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\n            if ( settings === s ) {\n                // IE9 throws an 'unknown error' if document.activeElement is used\n                // inside an iframe or frame...\n                try {\n                    if ( jqFilter[0] !== document.activeElement ) {\n                        jqFilter.val( previousSearch.sSearch );\n                    }\n                }\n                catch ( e ) {}\n            }\n        } );\n        return filter[0];\n    }\n    /**\n     * Filter the table using both the global filter and column based filtering\n     *  @param {object} oSettings dataTables settings object\n     *  @param {object} oInput search information\n     *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterComplete ( oSettings, oInput, iForce )\n    {\n        var oPrevSearch = oSettings.oPreviousSearch;\n        var aoPrevSearch = oSettings.aoPreSearchCols;\n        var fnSaveFilter = function ( oFilter ) {\n            /* Save the filtering values */\n            oPrevSearch.sSearch = oFilter.sSearch;\n            oPrevSearch.bRegex = oFilter.bRegex;\n            oPrevSearch.bSmart = oFilter.bSmart;\n            oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n        };\n        var fnRegex = function ( o ) {\n            // Backwards compatibility with the bEscapeRegex option\n            return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n        };\n        // Resolve any column types that are unknown due to addition or invalidation\n        // @todo As per sort - can this be moved into an event handler?\n        _fnColumnTypes( oSettings );\n        /* In server-side processing all filtering is done by the server, so no point hanging around here */\n        if ( _fnDataSource( oSettings ) != 'ssp' )\n        {\n            /* Global filter */\n            _fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\n            fnSaveFilter( oInput );\n            /* Now do the individual column filter */\n            for ( var i=0 ; i<aoPrevSearch.length ; i++ )\n            {\n                _fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\n                    aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\n            }\n            /* Custom filtering */\n            _fnFilterCustom( oSettings );\n        }\n        else\n        {\n            fnSaveFilter( oInput );\n        }\n        /* Tell the draw function we have been filtering */\n        oSettings.bFiltered = true;\n        _fnCallbackFire( oSettings, null, 'search', [oSettings] );\n    }\n    /**\n     * Apply custom filtering functions\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterCustom( settings )\n    {\n        var filters = DataTable.ext.search;\n        var displayRows = settings.aiDisplay;\n        var row, rowIdx;\n        for ( var i=0, ien=filters.length ; i<ien ; i++ ) {\n            var rows = [];\n            // Loop over each row and see if it should be included\n            for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\n                rowIdx = displayRows[j];\n                row = settings.aoData[rowIdx];\n                if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\n                    rows.push( rowIdx );\n                }\n            }\n            // So the array reference doesn't break set the results into the\n            // existing array\n            displayRows.length = 0;\n            $.merge( displayRows, rows );\n        }\n    }\n    /**\n     * Filter the table on a per-column basis\n     *  @param {object} settings dataTables settings object\n     *  @param {string} searchStr string to filter on\n     *  @param {int} colIdx column to filter\n     *  @param {bool} regex treat search string as a regular expression or not\n     *  @param {bool} smart use smart filtering or not\n     *  @param {bool} caseInsensitive Do case insenstive matching or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\n    {\n        if ( searchStr === '' ) {\n            return;\n        }\n        var data;\n        var out = [];\n        var display = settings.aiDisplay;\n        var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\n        for ( var i=0 ; i<display.length ; i++ ) {\n            data = settings.aoData[display[i]]._aFilterData[colIdx];\n            if ( rpSearch.test( data ) ) {\n                out.push( display[i] );\n            }\n        }\n        settings.aiDisplay = out;\n    }\n    /**\n     * Filter the data table based on user input and draw the table\n     *  @param {object} settings dataTables settings object\n     *  @param {string} input string to filter on\n     *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n     *  @param {bool} regex treat as a regular expression or not\n     *  @param {bool} smart perform smart filtering or not\n     *  @param {bool} caseInsensitive Do case insenstive matching or not\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilter( settings, input, force, regex, smart, caseInsensitive )\n    {\n        var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\n        var prevSearch = settings.oPreviousSearch.sSearch;\n        var displayMaster = settings.aiDisplayMaster;\n        var display, invalidated, i;\n        var filtered = [];\n        // Need to take account of custom filtering functions - always filter\n        if ( DataTable.ext.search.length !== 0 ) {\n            force = true;\n        }\n        // Check if any of the rows were invalidated\n        invalidated = _fnFilterData( settings );\n        // If the input is blank - we just want the full data set\n        if ( input.length <= 0 ) {\n            settings.aiDisplay = displayMaster.slice();\n        }\n        else {\n            // New search - start from the master array\n            if ( invalidated ||\n                 force ||\n                 prevSearch.length > input.length ||\n                 input.indexOf(prevSearch) !== 0 ||\n                 settings.bSorted // On resort, the display master needs to be\n                                  // re-filtered since indexes will have changed\n            ) {\n                settings.aiDisplay = displayMaster.slice();\n            }\n            // Search the display array\n            display = settings.aiDisplay;\n            for ( i=0 ; i<display.length ; i++ ) {\n                if ( rpSearch.test( settings.aoData[display[i]]._sFilterRow ) ) {\n                    filtered.push( display[i] );\n                }\n            }\n            settings.aiDisplay = filtered;\n        }\n    }\n    /**\n     * Build a regular expression object suitable for searching a table\n     *  @param {string} search string to search for\n     *  @param {bool} regex treat as a regular expression or not\n     *  @param {bool} smart perform smart filtering or not\n     *  @param {bool} caseInsensitive Do case insensitive matching or not\n     *  @returns {RegExp} constructed object\n     *  @memberof DataTable#oApi\n     */\n    function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\n    {\n        search = regex ?\n            search :\n            _fnEscapeRegex( search );\n        if ( smart ) {\n            /* For smart filtering we want to allow the search to work regardless of\n             * word order. We also want double quoted text to be preserved, so word\n             * order is important - a la google. So this is what we want to\n             * generate:\n             * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n             */\n            var a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\n                if ( word.charAt(0) === '\"' ) {\n                    var m = word.match( /^\"(.*)\"$/ );\n                    word = m ? m[1] : word;\n                }\n                return word.replace('\"', '');\n            } );\n            search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\n        }\n        return new RegExp( search, caseInsensitive ? 'i' : '' );\n    }\n    /**\n     * Escape a string such that it can be used in a regular expression\n     *  @param {string} sVal string to escape\n     *  @returns {string} escaped string\n     *  @memberof DataTable#oApi\n     */\n    var _fnEscapeRegex = DataTable.util.escapeRegex;\n    var __filter_div = $('<div>')[0];\n    var __filter_div_textContent = __filter_div.textContent !== undefined;\n    // Update the filtering data for each row if needed (by invalidation or first run)\n    /**\n     *  @param {string} settings string to escape\n     */\n    function _fnFilterData ( settings )\n    {\n        var columns = settings.aoColumns;\n        var column;\n        var i, j, ien, jen, filterData, cellData, row;\n        var fomatters = DataTable.ext.type.search;\n        var wasInvalidated = false;\n        for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            row = settings.aoData[i];\n            if ( ! row._aFilterData ) {\n                filterData = [];\n                for ( j=0, jen=columns.length ; j<jen ; j++ ) {\n                    column = columns[j];\n                    if ( column.bSearchable ) {\n                        cellData = _fnGetCellData( settings, i, j, 'filter' );\n                        if ( fomatters[column.sType] ) {\n                            cellData = fomatters[column.sType]( cellData );\n                        }\n                        // Search in DataTables 1.10 is string based. In 1.11 this\n                        // should be altered to also allow strict type checking.\n                        if ( cellData === null ) {\n                            cellData = '';\n                        }\n                        if ( typeof cellData !== 'string' && cellData.toString ) {\n                            cellData = cellData.toString();\n                        }\n                    }\n                    else {\n                        cellData = '';\n                    }\n                    // If it looks like there is an HTML entity in the string,\n                    // attempt to decode it so sorting works as expected. Note that\n                    // we could use a single line of jQuery to do this, but the DOM\n                    // method used here is much faster http://jsperf.com/html-decode\n                    if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\n                        __filter_div.innerHTML = cellData;\n                        cellData = __filter_div_textContent ?\n                            __filter_div.textContent :\n                            __filter_div.innerText;\n                    }\n                    if ( cellData.replace ) {\n                        cellData = cellData.replace(/[\\r\\n]/g, '');\n                    }\n                    filterData.push( cellData );\n                }\n                row._aFilterData = filterData;\n                row._sFilterRow = filterData.join('  ');\n                wasInvalidated = true;\n            }\n        }\n        return wasInvalidated;\n    }\n    /**\n     * Convert from the internal Hungarian notation to camelCase for external\n     * interaction\n     *  @param {object} obj Object to convert\n     *  @returns {object} Inverted object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSearchToCamel ( obj )\n    {\n        return {\n            search:          obj.sSearch,\n            smart:           obj.bSmart,\n            regex:           obj.bRegex,\n            caseInsensitive: obj.bCaseInsensitive\n        };\n    }\n    /**\n     * Convert from camelCase notation to the internal Hungarian. We could use the\n     * Hungarian convert function here, but this is cleaner\n     *  @param {object} obj Object to convert\n     *  @returns {object} Inverted object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSearchToHung ( obj )\n    {\n        return {\n            sSearch:          obj.search,\n            bSmart:           obj.smart,\n            bRegex:           obj.regex,\n            bCaseInsensitive: obj.caseInsensitive\n        };\n    }\n    /**\n     * Generate the node required for the info display\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Information element\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlInfo ( settings )\n    {\n        var\n            tid = settings.sTableId,\n            nodes = settings.aanFeatures.i,\n            n = $('<div/>', {\n                'class': settings.oClasses.sInfo,\n                'id': ! nodes ? tid+'_info' : null\n            } );\n        if ( ! nodes ) {\n            // Update display on each draw\n            settings.aoDrawCallback.push( {\n                \"fn\": _fnUpdateInfo,\n                \"sName\": \"information\"\n            } );\n            n\n                .attr( 'role', 'status' )\n                .attr( 'aria-live', 'polite' );\n            // Table is described by our info div\n            $(settings.nTable).attr( 'aria-describedby', tid+'_info' );\n        }\n        return n[0];\n    }\n    /**\n     * Update the information elements in the display\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnUpdateInfo ( settings )\n    {\n        /* Show information about the table */\n        var nodes = settings.aanFeatures.i;\n        if ( nodes.length === 0 ) {\n            return;\n        }\n        var\n            lang  = settings.oLanguage,\n            start = settings._iDisplayStart+1,\n            end   = settings.fnDisplayEnd(),\n            max   = settings.fnRecordsTotal(),\n            total = settings.fnRecordsDisplay(),\n            out   = total ?\n                lang.sInfo :\n                lang.sInfoEmpty;\n        if ( total !== max ) {\n            /* Record set after filtering */\n            out += ' ' + lang.sInfoFiltered;\n        }\n        // Convert the macros\n        out += lang.sInfoPostFix;\n        out = _fnInfoMacros( settings, out );\n        var callback = lang.fnInfoCallback;\n        if ( callback !== null ) {\n            out = callback.call( settings.oInstance,\n                settings, start, end, max, total, out\n            );\n        }\n        $(nodes).html( out );\n    }\n    /**\n     *  @param {object} settings dataTables settings object\n     *  @param {object} str dataTables settings object\n     */\n    function _fnInfoMacros ( settings, str )\n    {\n        // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n        // internally\n        var\n            formatter  = settings.fnFormatNumber,\n            start      = settings._iDisplayStart+1,\n            len        = settings._iDisplayLength,\n            vis        = settings.fnRecordsDisplay(),\n            all        = len === -1;\n        return str.\n            replace(/_START_/g, formatter.call( settings, start ) ).\n            replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\n            replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\n            replace(/_TOTAL_/g, formatter.call( settings, vis ) ).\n            replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\n            replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\n    }\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnInitialise ( settings )\n    {\n        var i, iLen, iAjaxStart=settings.iInitDisplayStart;\n        var columns = settings.aoColumns, column;\n        var features = settings.oFeatures;\n        var deferLoading = settings.bDeferLoading; // value modified by the draw\n        /* Ensure that the table data is fully initialised */\n        if ( ! settings.bInitialised ) {\n            setTimeout( function(){ _fnInitialise( settings ); }, 200 );\n            return;\n        }\n        /* Show the display HTML options */\n        _fnAddOptionsHtml( settings );\n        /* Build and draw the header / footer for the table */\n        _fnBuildHead( settings );\n        _fnDrawHead( settings, settings.aoHeader );\n        _fnDrawHead( settings, settings.aoFooter );\n        /* Okay to show that something is going on now */\n        _fnProcessingDisplay( settings, true );\n        /* Calculate sizes for columns */\n        if ( features.bAutoWidth ) {\n            _fnCalculateColumnWidths( settings );\n        }\n        for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\n            column = columns[i];\n            if ( column.sWidth ) {\n                column.nTh.style.width = _fnStringToCss( column.sWidth );\n            }\n        }\n        _fnCallbackFire( settings, null, 'preInit', [settings] );\n        // If there is default sorting required - let's do it. The sort function\n        // will do the drawing for us. Otherwise we draw the table regardless of the\n        // Ajax source - this allows the table to look initialised for Ajax sourcing\n        // data (show 'loading' message possibly)\n        _fnReDraw( settings );\n        // Server-side processing init complete is done by _fnAjaxUpdateDraw\n        var dataSrc = _fnDataSource( settings );\n        if ( dataSrc != 'ssp' || deferLoading ) {\n            // if there is an ajax source load the data\n            if ( dataSrc == 'ajax' ) {\n                _fnBuildAjax( settings, [], function(json) {\n                    var aData = _fnAjaxDataSrc( settings, json );\n                    // Got the data - add it to the table\n                    for ( i=0 ; i<aData.length ; i++ ) {\n                        _fnAddData( settings, aData[i] );\n                    }\n                    // Reset the init display for cookie saving. We've already done\n                    // a filter, and therefore cleared it before. So we need to make\n                    // it appear 'fresh'\n                    settings.iInitDisplayStart = iAjaxStart;\n                    _fnReDraw( settings );\n                    _fnProcessingDisplay( settings, false );\n                    _fnInitComplete( settings, json );\n                }, settings );\n            }\n            else {\n                _fnProcessingDisplay( settings, false );\n                _fnInitComplete( settings );\n            }\n        }\n    }\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n     *    with client-side processing (optional)\n     *  @memberof DataTable#oApi\n     */\n    function _fnInitComplete ( settings, json )\n    {\n        settings._bInitComplete = true;\n        // When data was added after the initialisation (data or Ajax) we need to\n        // calculate the column sizing\n        if ( json || settings.oInit.aaData ) {\n            _fnAdjustColumnSizing( settings );\n        }\n        _fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\n    }\n    /**\n     * Draw the table for the first time, adding all required features\n     *  @param {object} settings dataTables settings object\n     *  @param {object} val dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnLengthChange ( settings, val )\n    {\n        var len = parseInt( val, 10 );\n        settings._iDisplayLength = len;\n        _fnLengthOverflow( settings );\n        // Fire length change event\n        _fnCallbackFire( settings, null, 'length', [settings, len] );\n    }\n    /**\n     * Generate the node required for user display length changing\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Display length feature node\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlLength ( settings )\n    {\n        var\n            classes  = settings.oClasses,\n            tableId  = settings.sTableId,\n            menu     = settings.aLengthMenu,\n            d2       = $.isArray( menu[0] ),\n            lengths  = d2 ? menu[0] : menu,\n            language = d2 ? menu[1] : menu;\n        var select = $('<select/>', {\n            'name':          tableId+'_length',\n            'aria-controls': tableId,\n            'class':         classes.sLengthSelect\n        } );\n        for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\n            select[0][i] = new Option( language[i], lengths[i] );\n        }\n        var div = $('<div><label/></div>').addClass( classes.sLength );\n        if ( ! settings.aanFeatures.l ) {\n            div[0].id = tableId+'_length';\n        }\n        div.children().append(\n            settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\n        );\n        // Can't use `select` variable as user might provide their own and the\n        // reference is broken by the use of outerHTML\n        $('select', div)\n            .val( settings._iDisplayLength )\n            .on( 'change.DT', function() {\n                _fnLengthChange( settings, $(this).val() );\n                _fnDraw( settings );\n            } );\n        // Update node value whenever anything changes the table's length\n        $(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\n            if ( settings === s ) {\n                $('select', div).val( len );\n            }\n        } );\n        return div[0];\n    }\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Note that most of the paging logic is done in\n     * DataTable.ext.pager\n     */\n    /**\n     * Generate the node required for default pagination\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Pagination feature node\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlPaginate ( settings )\n    {\n        var\n            type   = settings.sPaginationType,\n            plugin = DataTable.ext.pager[type],\n            modern = typeof plugin === 'function',\n            redraw = function( settings ) {\n                _fnDraw( settings );\n            },\n            node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\n            features = settings.aanFeatures;\n        if ( ! modern ) {\n            plugin.fnInit( settings, node, redraw );\n        }\n        /* Add a draw callback for the pagination on first instance, to update the paging display */\n        if ( ! features.p )\n        {\n            node.id = settings.sTableId+'_paginate';\n            settings.aoDrawCallback.push( {\n                \"fn\": function( settings ) {\n                    if ( modern ) {\n                        var\n                            start      = settings._iDisplayStart,\n                            len        = settings._iDisplayLength,\n                            visRecords = settings.fnRecordsDisplay(),\n                            all        = len === -1,\n                            page = all ? 0 : Math.ceil( start / len ),\n                            pages = all ? 1 : Math.ceil( visRecords / len ),\n                            buttons = plugin(page, pages),\n                            i, ien;\n                        for ( i=0, ien=features.p.length ; i<ien ; i++ ) {\n                            _fnRenderer( settings, 'pageButton' )(\n                                settings, features.p[i], i, buttons, page, pages\n                            );\n                        }\n                    }\n                    else {\n                        plugin.fnUpdate( settings, redraw );\n                    }\n                },\n                \"sName\": \"pagination\"\n            } );\n        }\n        return node;\n    }\n    /**\n     * Alter the display settings to change the page\n     *  @param {object} settings DataTables settings object\n     *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n     *    \"next\" or \"last\" or page number to jump to (integer)\n     *  @param {redraw} redraw Automatically draw the update or not\n     */\n    function _fnPageChange ( settings, action, redraw )\n    {\n        var\n            start     = settings._iDisplayStart,\n            len       = settings._iDisplayLength,\n            records   = settings.fnRecordsDisplay();\n        if ( records === 0 || len === -1 )\n        {\n            start = 0;\n        }\n        else if ( typeof action === \"number\" )\n        {\n            start = action * len;\n            if ( start > records )\n            {\n                start = 0;\n            }\n        }\n        else if ( action == \"first\" )\n        {\n            start = 0;\n        }\n        else if ( action == \"previous\" )\n        {\n            start = len >= 0 ?\n                start - len :\n                0;\n            if ( start < 0 )\n            {\n              start = 0;\n            }\n        }\n        else if ( action == \"next\" )\n        {\n            if ( start + len < records )\n            {\n                start += len;\n            }\n        }\n        else if ( action == \"last\" )\n        {\n            start = Math.floor( (records-1) / len) * len;\n        }\n        else\n        {\n            _fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\n        }\n        var changed = settings._iDisplayStart !== start;\n        settings._iDisplayStart = start;\n        if ( changed ) {\n            _fnCallbackFire( settings, null, 'page', [settings] );\n            if ( redraw ) {\n                _fnDraw( settings );\n            }\n        }\n        return changed;\n    }\n    /**\n     * Generate the node required for the processing node\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Processing element\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlProcessing ( settings )\n    {\n        return $('<div/>', {\n                'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\n                'class': settings.oClasses.sProcessing\n            } )\n            .html( settings.oLanguage.sProcessing )\n            .insertBefore( settings.nTable )[0];\n    }\n    /**\n     * Display or hide the processing indicator\n     *  @param {object} settings dataTables settings object\n     *  @param {bool} show Show the processing indicator (true) or not (false)\n     *  @memberof DataTable#oApi\n     */\n    function _fnProcessingDisplay ( settings, show )\n    {\n        if ( settings.oFeatures.bProcessing ) {\n            $(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\n        }\n        _fnCallbackFire( settings, null, 'processing', [settings, show] );\n    }\n    /**\n     * Add any control elements for the table - specifically scrolling\n     *  @param {object} settings dataTables settings object\n     *  @returns {node} Node to add to the DOM\n     *  @memberof DataTable#oApi\n     */\n    function _fnFeatureHtmlTable ( settings )\n    {\n        var table = $(settings.nTable);\n        // Add the ARIA grid role to the table\n        table.attr( 'role', 'grid' );\n        // Scrolling from here on in\n        var scroll = settings.oScroll;\n        if ( scroll.sX === '' && scroll.sY === '' ) {\n            return settings.nTable;\n        }\n        var scrollX = scroll.sX;\n        var scrollY = scroll.sY;\n        var classes = settings.oClasses;\n        var caption = table.children('caption');\n        var captionSide = caption.length ? caption[0]._captionSide : null;\n        var headerClone = $( table[0].cloneNode(false) );\n        var footerClone = $( table[0].cloneNode(false) );\n        var footer = table.children('tfoot');\n        var _div = '<div/>';\n        var size = function ( s ) {\n            return !s ? null : _fnStringToCss( s );\n        };\n        if ( ! footer.length ) {\n            footer = null;\n        }\n        /*\n         * The HTML structure that we want to generate in this function is:\n         *  div - scroller\n         *    div - scroll head\n         *      div - scroll head inner\n         *        table - scroll head table\n         *          thead - thead\n         *    div - scroll body\n         *      table - table (master table)\n         *        thead - thead clone for sizing\n         *        tbody - tbody\n         *    div - scroll foot\n         *      div - scroll foot inner\n         *        table - scroll foot table\n         *          tfoot - tfoot\n         */\n        var scroller = $( _div, { 'class': classes.sScrollWrapper } )\n            .append(\n                $(_div, { 'class': classes.sScrollHead } )\n                    .css( {\n                        overflow: 'hidden',\n                        position: 'relative',\n                        border: 0,\n                        width: scrollX ? size(scrollX) : '100%'\n                    } )\n                    .append(\n                        $(_div, { 'class': classes.sScrollHeadInner } )\n                            .css( {\n                                'box-sizing': 'content-box',\n                                width: scroll.sXInner || '100%'\n                            } )\n                            .append(\n                                headerClone\n                                    .removeAttr('id')\n                                    .css( 'margin-left', 0 )\n                                    .append( captionSide === 'top' ? caption : null )\n                                    .append(\n                                        table.children('thead')\n                                    )\n                            )\n                    )\n            )\n            .append(\n                $(_div, { 'class': classes.sScrollBody } )\n                    .css( {\n                        position: 'relative',\n                        overflow: 'auto',\n                        width: size( scrollX )\n                    } )\n                    .append( table )\n            );\n        if ( footer ) {\n            scroller.append(\n                $(_div, { 'class': classes.sScrollFoot } )\n                    .css( {\n                        overflow: 'hidden',\n                        border: 0,\n                        width: scrollX ? size(scrollX) : '100%'\n                    } )\n                    .append(\n                        $(_div, { 'class': classes.sScrollFootInner } )\n                            .append(\n                                footerClone\n                                    .removeAttr('id')\n                                    .css( 'margin-left', 0 )\n                                    .append( captionSide === 'bottom' ? caption : null )\n                                    .append(\n                                        table.children('tfoot')\n                                    )\n                            )\n                    )\n            );\n        }\n        var children = scroller.children();\n        var scrollHead = children[0];\n        var scrollBody = children[1];\n        var scrollFoot = footer ? children[2] : null;\n        // When the body is scrolled, then we also want to scroll the headers\n        if ( scrollX ) {\n            $(scrollBody).on( 'scroll.DT', function () {\n                var scrollLeft = this.scrollLeft;\n                scrollHead.scrollLeft = scrollLeft;\n                if ( footer ) {\n                    scrollFoot.scrollLeft = scrollLeft;\n                }\n            } );\n        }\n        $(scrollBody).css(\n            scrollY && scroll.bCollapse ? 'max-height' : 'height',\n            scrollY\n        );\n        settings.nScrollHead = scrollHead;\n        settings.nScrollBody = scrollBody;\n        settings.nScrollFoot = scrollFoot;\n        // On redraw - align columns\n        settings.aoDrawCallback.push( {\n            \"fn\": _fnScrollDraw,\n            \"sName\": \"scrolling\"\n        } );\n        return scroller[0];\n    }\n    /**\n     * Update the header, footer and body tables for resizing - i.e. column\n     * alignment.\n     *\n     * Welcome to the most horrible function DataTables. The process that this\n     * function follows is basically:\n     *   1. Re-create the table inside the scrolling div\n     *   2. Take live measurements from the DOM\n     *   3. Apply the measurements to align the columns\n     *   4. Clean up\n     *\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnScrollDraw ( settings )\n    {\n        // Given that this is such a monster function, a lot of variables are use\n        // to try and keep the minimised size as small as possible\n        var\n            scroll         = settings.oScroll,\n            scrollX        = scroll.sX,\n            scrollXInner   = scroll.sXInner,\n            scrollY        = scroll.sY,\n            barWidth       = scroll.iBarWidth,\n            divHeader      = $(settings.nScrollHead),\n            divHeaderStyle = divHeader[0].style,\n            divHeaderInner = divHeader.children('div'),\n            divHeaderInnerStyle = divHeaderInner[0].style,\n            divHeaderTable = divHeaderInner.children('table'),\n            divBodyEl      = settings.nScrollBody,\n            divBody        = $(divBodyEl),\n            divBodyStyle   = divBodyEl.style,\n            divFooter      = $(settings.nScrollFoot),\n            divFooterInner = divFooter.children('div'),\n            divFooterTable = divFooterInner.children('table'),\n            header         = $(settings.nTHead),\n            table          = $(settings.nTable),\n            tableEl        = table[0],\n            tableStyle     = tableEl.style,\n            footer         = settings.nTFoot ? $(settings.nTFoot) : null,\n            browser        = settings.oBrowser,\n            ie67           = browser.bScrollOversize,\n            dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\n            headerTrgEls, footerTrgEls,\n            headerSrcEls, footerSrcEls,\n            headerCopy, footerCopy,\n            headerWidths=[], footerWidths=[],\n            headerContent=[], footerContent=[],\n            idx, correction, sanityWidth,\n            zeroOut = function(nSizer) {\n                var style = nSizer.style;\n                style.paddingTop = \"0\";\n                style.paddingBottom = \"0\";\n                style.borderTopWidth = \"0\";\n                style.borderBottomWidth = \"0\";\n                style.height = 0;\n            };\n        // If the scrollbar visibility has changed from the last draw, we need to\n        // adjust the column sizes as the table width will have changed to account\n        // for the scrollbar\n        var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n        if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\n            settings.scrollBarVis = scrollBarVis;\n            _fnAdjustColumnSizing( settings );\n            return; // adjust column sizing will call this function again\n        }\n        else {\n            settings.scrollBarVis = scrollBarVis;\n        }\n        /*\n         * 1. Re-create the table inside the scrolling div\n         */\n        // Remove the old minimised thead and tfoot elements in the inner table\n        table.children('thead, tfoot').remove();\n        if ( footer ) {\n            footerCopy = footer.clone().prependTo( table );\n            footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n            footerSrcEls = footerCopy.find('tr');\n        }\n        // Clone the current header and footer elements and then place it into the inner table\n        headerCopy = header.clone().prependTo( table );\n        headerTrgEls = header.find('tr'); // original header is in its own table\n        headerSrcEls = headerCopy.find('tr');\n        headerCopy.find('th, td').removeAttr('tabindex');\n        /*\n         * 2. Take live measurements from the DOM - do not alter the DOM itself!\n         */\n        // Remove old sizing and apply the calculated column widths\n        // Get the unique column headers in the newly created (cloned) header. We want to apply the\n        // calculated sizes to this header\n        if ( ! scrollX )\n        {\n            divBodyStyle.width = '100%';\n            divHeader[0].style.width = '100%';\n        }\n        $.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\n            idx = _fnVisibleToColumnIndex( settings, i );\n            el.style.width = settings.aoColumns[idx].sWidth;\n        } );\n        if ( footer ) {\n            _fnApplyToChildren( function(n) {\n                n.style.width = \"\";\n            }, footerSrcEls );\n        }\n        // Size the table as a whole\n        sanityWidth = table.outerWidth();\n        if ( scrollX === \"\" ) {\n            // No x scrolling\n            tableStyle.width = \"100%\";\n            // IE7 will make the width of the table when 100% include the scrollbar\n            // - which is shouldn't. When there is a scrollbar we need to take this\n            // into account.\n            if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\n                divBody.css('overflow-y') == \"scroll\")\n            ) {\n                tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\n            }\n            // Recalculate the sanity width\n            sanityWidth = table.outerWidth();\n        }\n        else if ( scrollXInner !== \"\" ) {\n            // legacy x scroll inner has been given - use it\n            tableStyle.width = _fnStringToCss(scrollXInner);\n            // Recalculate the sanity width\n            sanityWidth = table.outerWidth();\n        }\n        // Hidden header should have zero height, so remove padding and borders. Then\n        // set the width based on the real headers\n        // Apply all styles in one pass\n        _fnApplyToChildren( zeroOut, headerSrcEls );\n        // Read all widths in next pass\n        _fnApplyToChildren( function(nSizer) {\n            headerContent.push( nSizer.innerHTML );\n            headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n        }, headerSrcEls );\n        // Apply all widths in final pass\n        _fnApplyToChildren( function(nToSize, i) {\n            // Only apply widths to the DataTables detected header cells - this\n            // prevents complex headers from having contradictory sizes applied\n            if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {\n                nToSize.style.width = headerWidths[i];\n            }\n        }, headerTrgEls );\n        $(headerSrcEls).height(0);\n        /* Same again with the footer if we have one */\n        if ( footer )\n        {\n            _fnApplyToChildren( zeroOut, footerSrcEls );\n            _fnApplyToChildren( function(nSizer) {\n                footerContent.push( nSizer.innerHTML );\n                footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n            }, footerSrcEls );\n            _fnApplyToChildren( function(nToSize, i) {\n                nToSize.style.width = footerWidths[i];\n            }, footerTrgEls );\n            $(footerSrcEls).height(0);\n        }\n        /*\n         * 3. Apply the measurements\n         */\n        // \"Hide\" the header and footer that we used for the sizing. We need to keep\n        // the content of the cell so that the width applied to the header and body\n        // both match, but we want to hide it completely. We want to also fix their\n        // width to what they currently are\n        _fnApplyToChildren( function(nSizer, i) {\n            nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';\n            nSizer.style.width = headerWidths[i];\n        }, headerSrcEls );\n        if ( footer )\n        {\n            _fnApplyToChildren( function(nSizer, i) {\n                nSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+footerContent[i]+'</div>';\n                nSizer.style.width = footerWidths[i];\n            }, footerSrcEls );\n        }\n        // Sanity check that the table is of a sensible width. If not then we are going to get\n        // misalignment - try to prevent this by not allowing the table to shrink below its min width\n        if ( table.outerWidth() < sanityWidth )\n        {\n            // The min width depends upon if we have a vertical scrollbar visible or not */\n            correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\n                divBody.css('overflow-y') == \"scroll\")) ?\n                    sanityWidth+barWidth :\n                    sanityWidth;\n            // IE6/7 are a law unto themselves...\n            if ( ie67 && (divBodyEl.scrollHeight >\n                divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\n            ) {\n                tableStyle.width = _fnStringToCss( correction-barWidth );\n            }\n            // And give the user a warning that we've stopped the table getting too small\n            if ( scrollX === \"\" || scrollXInner !== \"\" ) {\n                _fnLog( settings, 1, 'Possible column misalignment', 6 );\n            }\n        }\n        else\n        {\n            correction = '100%';\n        }\n        // Apply to the container elements\n        divBodyStyle.width = _fnStringToCss( correction );\n        divHeaderStyle.width = _fnStringToCss( correction );\n        if ( footer ) {\n            settings.nScrollFoot.style.width = _fnStringToCss( correction );\n        }\n        /*\n         * 4. Clean up\n         */\n        if ( ! scrollY ) {\n            /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n             * the scrollbar height from the visible display, rather than adding it on. We need to\n             * set the height in order to sort this. Don't want to do it in any other browsers.\n             */\n            if ( ie67 ) {\n                divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\n            }\n        }\n        /* Finally set the width's of the header and footer tables */\n        var iOuterWidth = table.outerWidth();\n        divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\n        divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\n        // Figure out if there are scrollbar present - if so then we need a the header and footer to\n        // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n        var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n        var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\n        divHeaderInnerStyle[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n        if ( footer ) {\n            divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\n            divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\n            divFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n        }\n        // Correct DOM ordering for colgroup - comes before the thead\n        table.children('colgroup').insertBefore( table.children('thead') );\n        /* Adjust the position of the header in case we loose the y-scrollbar */\n        divBody.scroll();\n        // If sorting or filtering has occurred, jump the scrolling back to the top\n        // only if we aren't holding the position\n        if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\n            divBodyEl.scrollTop = 0;\n        }\n    }\n    /**\n     * Apply a given function to the display child nodes of an element array (typically\n     * TD children of TR rows\n     *  @param {function} fn Method to apply to the objects\n     *  @param {an1} an1 List of elements to look through for display children\n     *  @param {an2} an2 Another list (identical structure to the first) - optional\n     *  @memberof DataTable#oApi\n     */\n    function _fnApplyToChildren( fn, an1, an2 )\n    {\n        var index=0, i=0, iLen=an1.length;\n        var nNode1, nNode2;\n        while ( i < iLen ) {\n            nNode1 = an1[i].firstChild;\n            nNode2 = an2 ? an2[i].firstChild : null;\n            while ( nNode1 ) {\n                if ( nNode1.nodeType === 1 ) {\n                    if ( an2 ) {\n                        fn( nNode1, nNode2, index );\n                    }\n                    else {\n                        fn( nNode1, index );\n                    }\n                    index++;\n                }\n                nNode1 = nNode1.nextSibling;\n                nNode2 = an2 ? nNode2.nextSibling : null;\n            }\n            i++;\n        }\n    }\n    var __re_html_remove = /<.*?>/g;\n    /**\n     * Calculate the width of columns for the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnCalculateColumnWidths ( oSettings )\n    {\n        var\n            table = oSettings.nTable,\n            columns = oSettings.aoColumns,\n            scroll = oSettings.oScroll,\n            scrollY = scroll.sY,\n            scrollX = scroll.sX,\n            scrollXInner = scroll.sXInner,\n            columnCount = columns.length,\n            visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\n            headerCells = $('th', oSettings.nTHead),\n            tableWidthAttr = table.getAttribute('width'), // from DOM element\n            tableContainer = table.parentNode,\n            userInputs = false,\n            i, column, columnIdx,\n            browser = oSettings.oBrowser,\n            ie67 = browser.bScrollOversize;\n        var styleWidth = table.style.width;\n        if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\n            tableWidthAttr = styleWidth;\n        }\n        /* Convert any user input sizes into pixel sizes */\n        for ( i=0 ; i<visibleColumns.length ; i++ ) {\n            column = columns[visibleColumns[i]];\n            if ( column.sWidth !== null ) {\n                column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\n                userInputs = true;\n            }\n        }\n        /* If the number of columns in the DOM equals the number that we have to\n         * process in DataTables, then we can use the offsets that are created by\n         * the web- browser. No custom sizes can be set in order for this to happen,\n         * nor scrolling used\n         */\n        if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\n             columnCount == _fnVisbleColumns( oSettings ) &&\n             columnCount == headerCells.length\n        ) {\n            for ( i=0 ; i<columnCount ; i++ ) {\n                var colIdx = _fnVisibleToColumnIndex( oSettings, i );\n                if ( colIdx !== null ) {\n                    columns[colIdx].sWidth = _fnStringToCss( headerCells.eq(i).width() );\n                }\n            }\n        }\n        else\n        {\n            // Otherwise construct a single row, worst case, table with the widest\n            // node in the data, assign any user defined widths, then insert it into\n            // the DOM and allow the browser to do all the hard work of calculating\n            // table widths\n            var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n                .css( 'visibility', 'hidden' )\n                .removeAttr( 'id' );\n            // Clean up the table body\n            tmpTable.find('tbody tr').remove();\n            var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\n            // Clone the table header and footer - we can't use the header / footer\n            // from the cloned table, since if scrolling is active, the table's\n            // real header and footer are contained in different table tags\n            tmpTable.find('thead, tfoot').remove();\n            tmpTable\n                .append( $(oSettings.nTHead).clone() )\n                .append( $(oSettings.nTFoot).clone() );\n            // Remove any assigned widths from the footer (from scrolling)\n            tmpTable.find('tfoot th, tfoot td').css('width', '');\n            // Apply custom sizing to the cloned header\n            headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                column = columns[visibleColumns[i]];\n                headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\n                    _fnStringToCss( column.sWidthOrig ) :\n                    '';\n                // For scrollX we need to force the column width otherwise the\n                // browser will collapse it. If this width is smaller than the\n                // width the column requires, then it will have no effect\n                if ( column.sWidthOrig && scrollX ) {\n                    $( headerCells[i] ).append( $('<div/>').css( {\n                        width: column.sWidthOrig,\n                        margin: 0,\n                        padding: 0,\n                        border: 0,\n                        height: 1\n                    } ) );\n                }\n            }\n            // Find the widest cell for each column and put it into the table\n            if ( oSettings.aoData.length ) {\n                for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                    columnIdx = visibleColumns[i];\n                    column = columns[columnIdx];\n                    $( _fnGetWidestNode( oSettings, columnIdx ) )\n                        .clone( false )\n                        .append( column.sContentPadding )\n                        .appendTo( tr );\n                }\n            }\n            // Tidy the temporary table - remove name attributes so there aren't\n            // duplicated in the dom (radio elements for example)\n            $('[name]', tmpTable).removeAttr('name');\n            // Table has been built, attach to the document so we can work with it.\n            // A holding element is used, positioned at the top of the container\n            // with minimal height, so it has no effect on if the container scrolls\n            // or not. Otherwise it might trigger scrolling when it actually isn't\n            // needed\n            var holder = $('<div/>').css( scrollX || scrollY ?\n                    {\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        height: 1,\n                        right: 0,\n                        overflow: 'hidden'\n                    } :\n                    {}\n                )\n                .append( tmpTable )\n                .appendTo( tableContainer );\n            // When scrolling (X or Y) we want to set the width of the table as\n            // appropriate. However, when not scrolling leave the table width as it\n            // is. This results in slightly different, but I think correct behaviour\n            if ( scrollX && scrollXInner ) {\n                tmpTable.width( scrollXInner );\n            }\n            else if ( scrollX ) {\n                tmpTable.css( 'width', 'auto' );\n                tmpTable.removeAttr('width');\n                // If there is no width attribute or style, then allow the table to\n                // collapse\n                if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\n                    tmpTable.width( tableContainer.clientWidth );\n                }\n            }\n            else if ( scrollY ) {\n                tmpTable.width( tableContainer.clientWidth );\n            }\n            else if ( tableWidthAttr ) {\n                tmpTable.width( tableWidthAttr );\n            }\n            // Get the width of each column in the constructed table - we need to\n            // know the inner width (so it can be assigned to the other table's\n            // cells) and the outer width so we can calculate the full width of the\n            // table. This is safe since DataTables requires a unique cell for each\n            // column, but if ever a header can span multiple columns, this will\n            // need to be modified.\n            var total = 0;\n            for ( i=0 ; i<visibleColumns.length ; i++ ) {\n                var cell = $(headerCells[i]);\n                var border = cell.outerWidth() - cell.width();\n                // Use getBounding... where possible (not IE8-) because it can give\n                // sub-pixel accuracy, which we then want to round up!\n                var bounding = browser.bBounding ?\n                    Math.ceil( headerCells[i].getBoundingClientRect().width ) :\n                    cell.outerWidth();\n                // Total is tracked to remove any sub-pixel errors as the outerWidth\n                // of the table might not equal the total given here (IE!).\n                total += bounding;\n                // Width for each column to use\n                columns[visibleColumns[i]].sWidth = _fnStringToCss( bounding - border );\n            }\n            table.style.width = _fnStringToCss( total );\n            // Finished with the table - ditch it\n            holder.remove();\n        }\n        // If there is a width attr, we want to attach an event listener which\n        // allows the table sizing to automatically adjust when the window is\n        // resized. Use the width attr rather than CSS, since we can't know if the\n        // CSS is a relative value or absolute - DOM read is always px.\n        if ( tableWidthAttr ) {\n            table.style.width = _fnStringToCss( tableWidthAttr );\n        }\n        if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\n            var bindResize = function () {\n                $(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\n                    _fnAdjustColumnSizing( oSettings );\n                } ) );\n            };\n            // IE6/7 will crash if we bind a resize event handler on page load.\n            // To be removed in 1.11 which drops IE6/7 support\n            if ( ie67 ) {\n                setTimeout( bindResize, 1000 );\n            }\n            else {\n                bindResize();\n            }\n            oSettings._reszEvt = true;\n        }\n    }\n    /**\n     * Throttle the calls to a function. Arguments and context are maintained for\n     * the throttled function\n     *  @param {function} fn Function to be called\n     *  @param {int} [freq=200] call frequency in mS\n     *  @returns {function} wrapped function\n     *  @memberof DataTable#oApi\n     */\n    var _fnThrottle = DataTable.util.throttle;\n    /**\n     * Convert a CSS unit width to pixels (e.g. 2em)\n     *  @param {string} width width to be converted\n     *  @param {node} parent parent to get the with for (required for relative widths) - optional\n     *  @returns {int} width in pixels\n     *  @memberof DataTable#oApi\n     */\n    function _fnConvertToWidth ( width, parent )\n    {\n        if ( ! width ) {\n            return 0;\n        }\n        var n = $('<div/>')\n            .css( 'width', _fnStringToCss( width ) )\n            .appendTo( parent || document.body );\n        var val = n[0].offsetWidth;\n        n.remove();\n        return val;\n    }\n    /**\n     * Get the widest node\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column of interest\n     *  @returns {node} widest table node\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetWidestNode( settings, colIdx )\n    {\n        var idx = _fnGetMaxLenString( settings, colIdx );\n        if ( idx < 0 ) {\n            return null;\n        }\n        var data = settings.aoData[idx];\n        return ! data.nTr ? // Might not have been created when deferred rendering\n            $('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\n            data.anCells[colIdx];\n    }\n    /**\n     * Get the maximum strlen for each data column\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column of interest\n     *  @returns {string} max string length for each column\n     *  @memberof DataTable#oApi\n     */\n    function _fnGetMaxLenString( settings, colIdx )\n    {\n        var s, max=-1, maxIdx = -1;\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            s = _fnGetCellData( settings, i, colIdx, 'display' )+'';\n            s = s.replace( __re_html_remove, '' );\n            s = s.replace( /&nbsp;/g, ' ' );\n            if ( s.length > max ) {\n                max = s.length;\n                maxIdx = i;\n            }\n        }\n        return maxIdx;\n    }\n    /**\n     * Append a CSS unit (only if required) to a string\n     *  @param {string} s to css-ify\n     *  @returns {string} value with css unit\n     *  @memberof DataTable#oApi\n     */\n    function _fnStringToCss( s )\n    {\n        if ( s === null ) {\n            return '0px';\n        }\n        if ( typeof s == 'number' ) {\n            return s < 0 ?\n                '0px' :\n                s+'px';\n        }\n        // Check it has a unit character already\n        return s.match(/\\d$/) ?\n            s+'px' :\n            s;\n    }\n    /**\n     * Append a CSS unit (only if required) to a string\n     *  @param {string} settings to css-ify\n     */\n    function _fnSortFlatten ( settings )\n    {\n        var\n            i, k, kLen,\n            aSort = [],\n            aoColumns = settings.aoColumns,\n            aDataSort, iCol, sType, srcCol,\n            fixed = settings.aaSortingFixed,\n            fixedObj = $.isPlainObject( fixed ),\n            nestedSort = [],\n            add = function ( a ) {\n                if ( a.length && ! $.isArray( a[0] ) ) {\n                    // 1D array\n                    nestedSort.push( a );\n                }\n                else {\n                    // 2D array\n                    $.merge( nestedSort, a );\n                }\n            };\n        // Build the sort array, with pre-fix and post-fix options if they have been\n        // specified\n        if ( $.isArray( fixed ) ) {\n            add( fixed );\n        }\n        if ( fixedObj && fixed.pre ) {\n            add( fixed.pre );\n        }\n        add( settings.aaSorting );\n        if (fixedObj && fixed.post ) {\n            add( fixed.post );\n        }\n        for ( i=0 ; i<nestedSort.length ; i++ )\n        {\n            srcCol = nestedSort[i][0];\n            aDataSort = aoColumns[srcCol].aDataSort;\n            for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\n            {\n                iCol = aDataSort[k];\n                sType = aoColumns[iCol].sType || 'string';\n                if ( nestedSort[i]._idx === undefined ) {\n                    nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\n                }\n                aSort.push( {\n                    src:       srcCol,\n                    col:       iCol,\n                    dir:       nestedSort[i][1],\n                    index:     nestedSort[i]._idx,\n                    type:      sType,\n                    formatter: DataTable.ext.type.order[sType+\"-pre\"]\n                } );\n            }\n        }\n        return aSort;\n    }\n    /**\n     * Change the order of the table\n     *  @param {object} oSettings dataTables settings object\n     *  @memberof DataTable#oApi\n     *  @todo This really needs split up!\n     */\n    function _fnSort ( oSettings )\n    {\n        var\n            i, ien, iLen,\n            aiOrig = [],\n            oExtSort = DataTable.ext.type.order,\n            aoData = oSettings.aoData,\n            formatters = 0,\n            sortCol,\n            displayMaster = oSettings.aiDisplayMaster,\n            aSort;\n        // Resolve any column types that are unknown due to addition or invalidation\n        // @todo Can this be moved into a 'data-ready' handler which is called when\n        //   data is going to be used in the table?\n        _fnColumnTypes( oSettings );\n        aSort = _fnSortFlatten( oSettings );\n        for ( i=0, ien=aSort.length ; i<ien ; i++ ) {\n            sortCol = aSort[i];\n            // Track if we can use the fast sort algorithm\n            if ( sortCol.formatter ) {\n                formatters++;\n            }\n            // Load the data needed for the sort, for each cell\n            _fnSortData( oSettings, sortCol.col );\n        }\n        /* No sorting required if server-side or no sorting array */\n        if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\n        {\n            // Create a value - key array of the current row positions such that we can use their\n            // current position during the sort, if values match, in order to perform stable sorting\n            for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\n                aiOrig[displayMaster[i]] = i;\n            }\n            /* Do the sort - here we want multi-column sorting based on a given data source (column)\n             * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n             * follow on it's own, but this is what we want (example two column sorting):\n             *  fnLocalSorting = function(a,b){\n             *    var iTest;\n             *    iTest = oSort['string-asc']('data11', 'data12');\n             *      if (iTest !== 0)\n             *        return iTest;\n             *    iTest = oSort['numeric-desc']('data21', 'data22');\n             *    if (iTest !== 0)\n             *      return iTest;\n             *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n             *  }\n             * Basically we have a test for each sorting column, if the data in that column is equal,\n             * test the next column. If all columns match, then we use a numeric sort on the row\n             * positions in the original data array to provide a stable sort.\n             *\n             * Note - I know it seems excessive to have two sorting methods, but the first is around\n             * 15% faster, so the second is only maintained for backwards compatibility with sorting\n             * methods which do not have a pre-sort formatting function.\n             */\n            if ( formatters === aSort.length ) {\n                // All sort types have formatting functions\n                displayMaster.sort( function ( a, b ) {\n                    var\n                        x, y, k, test, sort,\n                        len=aSort.length,\n                        dataA = aoData[a]._aSortData,\n                        dataB = aoData[b]._aSortData;\n                    for ( k=0 ; k<len ; k++ ) {\n                        sort = aSort[k];\n                        x = dataA[sort.col];\n                        y = dataB[sort.col];\n                        test = x<y ? -1 : x>y ? 1 : 0;\n                        if ( test !== 0 ) {\n                            return sort.dir === 'asc' ? test : -test;\n                        }\n                    }\n                    x = aiOrig[a];\n                    y = aiOrig[b];\n                    return x<y ? -1 : x>y ? 1 : 0;\n                } );\n            }\n            else {\n                // Depreciated - remove in 1.11 (providing a plug-in option)\n                // Not all sort types have formatting methods, so we have to call their sorting\n                // methods.\n                displayMaster.sort( function ( a, b ) {\n                    var\n                        x, y, k, test, sort, fn,\n                        len=aSort.length,\n                        dataA = aoData[a]._aSortData,\n                        dataB = aoData[b]._aSortData;\n                    for ( k=0 ; k<len ; k++ ) {\n                        sort = aSort[k];\n                        x = dataA[sort.col];\n                        y = dataB[sort.col];\n                        fn = oExtSort[sort.type+\"-\"+sort.dir] || oExtSort[\"string-\"+sort.dir];\n                        test = fn( x, y );\n                        if ( test !== 0 ) {\n                            return test;\n                        }\n                    }\n                    x = aiOrig[a];\n                    y = aiOrig[b];\n                    return x<y ? -1 : x>y ? 1 : 0;\n                } );\n            }\n        }\n        /* Tell the draw function that we have sorted the data */\n        oSettings.bSorted = true;\n    }\n    /**\n     * Change the order of the table\n     *  @param {object} settings dataTables settings object\n     *  @todo This really needs split up!\n     */\n    function _fnSortAria ( settings )\n    {\n        var label;\n        var nextSort;\n        var columns = settings.aoColumns;\n        var aSort = _fnSortFlatten( settings );\n        var oAria = settings.oLanguage.oAria;\n        // ARIA attributes - need to loop all columns, to update all (removing old\n        // attributes as needed)\n        for ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n        {\n            var col = columns[i];\n            var asSorting = col.asSorting;\n            var sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\n            var th = col.nTh;\n            // IE7 is throwing an error when setting these properties with jQuery's\n            // attr() and removeAttr() methods...\n            th.removeAttribute('aria-sort');\n            /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n            if ( col.bSortable ) {\n                if ( aSort.length > 0 && aSort[0].col == i ) {\n                    th.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\n                    nextSort = asSorting[aSort[0].index+1] || asSorting[0];\n                }\n                else {\n                    nextSort = asSorting[0];\n                }\n                label = sTitle + ( nextSort === \"asc\" ?\n                    oAria.sSortAscending :\n                    oAria.sSortDescending\n                );\n            }\n            else {\n                label = sTitle;\n            }\n            th.setAttribute('aria-label', label);\n        }\n    }\n    /**\n     * Function to run on user sort request\n     *  @param {object} settings dataTables settings object\n     *  @param {int} colIdx column sorting index\n     *  @param {boolean} [append=false] Append the requested sort to the existing\n     *    sort if true (i.e. multi-column sort)\n     *  @param {function} [callback] callback function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortListener ( settings, colIdx, append, callback )\n    {\n        var col = settings.aoColumns[colIdx];\n        var sorting = settings.aaSorting;\n        var asSorting = col.asSorting;\n        var nextSortIdx;\n        var next = function ( a, overflow ) {\n            var idx = a._idx;\n            if ( idx === undefined ) {\n                idx = $.inArray( a[1], asSorting );\n            }\n            return idx+1 < asSorting.length ?\n                idx+1 :\n                overflow ?\n                    null :\n                    0;\n        };\n        // Convert to 2D array if needed\n        if ( typeof sorting[0] === 'number' ) {\n            sorting = settings.aaSorting = [ sorting ];\n        }\n        // If appending the sort then we are multi-column sorting\n        if ( append && settings.oFeatures.bSortMulti ) {\n            // Are we already doing some kind of sort on this column?\n            var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\n            if ( sortIdx !== -1 ) {\n                // Yes, modify the sort\n                nextSortIdx = next( sorting[sortIdx], true );\n                if ( nextSortIdx === null && sorting.length === 1 ) {\n                    nextSortIdx = 0; // can't remove sorting completely\n                }\n                if ( nextSortIdx === null ) {\n                    sorting.splice( sortIdx, 1 );\n                }\n                else {\n                    sorting[sortIdx][1] = asSorting[nextSortIdx];\n                    sorting[sortIdx]._idx = nextSortIdx;\n                }\n            }\n            else {\n                // No sort on this column yet\n                sorting.push( [ colIdx, asSorting[0], 0 ] );\n                sorting[sorting.length-1]._idx = 0;\n            }\n        }\n        else if ( sorting.length && sorting[0][0] == colIdx ) {\n            // Single column - already sorting on this column, modify the sort\n            nextSortIdx = next( sorting[0] );\n            sorting.length = 1;\n            sorting[0][1] = asSorting[nextSortIdx];\n            sorting[0]._idx = nextSortIdx;\n        }\n        else {\n            // Single column - sort only on this column\n            sorting.length = 0;\n            sorting.push( [ colIdx, asSorting[0] ] );\n            sorting[0]._idx = 0;\n        }\n        // Run the sort by calling a full redraw\n        _fnReDraw( settings );\n        // callback used for async user interaction\n        if ( typeof callback == 'function' ) {\n            callback( settings );\n        }\n    }\n    /**\n     * Attach a sort handler (click) to a node\n     *  @param {object} settings dataTables settings object\n     *  @param {node} attachTo node to attach the handler to\n     *  @param {int} colIdx column sorting index\n     *  @param {function} [callback] callback function\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortAttachListener ( settings, attachTo, colIdx, callback )\n    {\n        var col = settings.aoColumns[colIdx];\n        _fnBindAction( attachTo, {}, function (e) {\n            /* If the column is not sortable - don't to anything */\n            if ( col.bSortable === false ) {\n                return;\n            }\n            // If processing is enabled use a timeout to allow the processing\n            // display to be shown - otherwise to it synchronously\n            if ( settings.oFeatures.bProcessing ) {\n                _fnProcessingDisplay( settings, true );\n                setTimeout( function() {\n                    _fnSortListener( settings, colIdx, e.shiftKey, callback );\n                    // In server-side processing, the draw callback will remove the\n                    // processing display\n                    if ( _fnDataSource( settings ) !== 'ssp' ) {\n                        _fnProcessingDisplay( settings, false );\n                    }\n                }, 0 );\n            }\n            else {\n                _fnSortListener( settings, colIdx, e.shiftKey, callback );\n            }\n        } );\n    }\n    /**\n     * Set the sorting classes on table's body, Note: it is safe to call this function\n     * when bSort and bSortClasses are false\n     *  @param {object} settings dataTables settings object\n     */\n    function _fnSortingClasses( settings )\n    {\n        var oldSort = settings.aLastSort;\n        var sortClass = settings.oClasses.sSortColumn;\n        var sort = _fnSortFlatten( settings );\n        var features = settings.oFeatures;\n        var i, ien, colIdx;\n        if ( features.bSort && features.bSortClasses ) {\n            // Remove old sorting classes\n            for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\n                colIdx = oldSort[i].src;\n                // Remove column sorting\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\n                    .removeClass( sortClass + (i<2 ? i+1 : 3) );\n            }\n            // Add new column sorting\n            for ( i=0, ien=sort.length ; i<ien ; i++ ) {\n                colIdx = sort[i].src;\n                $( _pluck( settings.aoData, 'anCells', colIdx ) )\n                    .addClass( sortClass + (i<2 ? i+1 : 3) );\n            }\n        }\n        settings.aLastSort = sort;\n    }\n    // Get the data to sort a column, be it from cache, fresh (populating the\n    // cache), or from a sort formatter\n    /**\n     * Set the sorting classes on table's body, Note: it is safe to call this function\n     * when bSort and bSortClasses are false\n     *  @param {object} settings dataTables settings object\n     *  @param {idx} idx dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSortData( settings, idx )\n    {\n        // Custom sorting function - provided by the sort data type\n        var column = settings.aoColumns[idx];\n        var customSort = DataTable.ext.order[column.sSortDataType];\n        var customData;\n        if ( customSort ) {\n            customData = customSort.call( settings.oInstance, settings, idx,\n                _fnColumnIndexToVisible( settings, idx )\n            );\n        }\n        // Use / populate cache\n        var row, cellData;\n        var formatter = DataTable.ext.type.order[column.sType+\"-pre\"];\n        for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n            row = settings.aoData[i];\n            if ( ! row._aSortData ) {\n                row._aSortData = [];\n            }\n            if ( ! row._aSortData[idx] || customSort ) {\n                cellData = customSort ?\n                    customData[i] : // If there was a custom sort function, use data from there\n                    _fnGetCellData( settings, i, idx, 'sort' );\n                row._aSortData[idx] = formatter ?\n                    formatter( cellData ) :\n                    cellData;\n            }\n        }\n    }\n    /**\n     * Save the state of a table\n     *  @param {object} settings dataTables settings object\n     *  @memberof DataTable#oApi\n     */\n    function _fnSaveState ( settings )\n    {\n        if ( !settings.oFeatures.bStateSave || settings.bDestroying )\n        {\n            return;\n        }\n        /* Store the interesting variables */\n        var state = {\n            time:    +new Date(),\n            start:   settings._iDisplayStart,\n            length:  settings._iDisplayLength,\n            order:   $.extend( true, [], settings.aaSorting ),\n            search:  _fnSearchToCamel( settings.oPreviousSearch ),\n            columns: $.map( settings.aoColumns, function ( col, i ) {\n                return {\n                    visible: col.bVisible,\n                    search: _fnSearchToCamel( settings.aoPreSearchCols[i] )\n                };\n            } )\n        };\n        _fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\n        settings.oSavedState = state;\n        settings.fnStateSaveCallback.call( settings.oInstance, settings, state );\n    }\n    /**\n     * Attempt to load a saved table state\n     *  @param {object} settings dataTables settings object\n     *  @param {object} oInit DataTables init object so we can override settings\n     *  @param {function} callback Callback to execute when the state has been loaded\n     *  @memberof DataTable#oApi\n     */\n    function _fnLoadState ( settings, oInit, callback )\n    {\n        var i, ien;\n        var columns = settings.aoColumns;\n        var loaded = function ( s ) {\n            if ( ! s || ! s.time ) {\n                callback();\n                return;\n            }\n            // Allow custom and plug-in manipulation functions to alter the saved data set and\n            // cancelling of loading by returning false\n            var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );\n            if ( $.inArray( false, abStateLoad ) !== -1 ) {\n                callback();\n                return;\n            }\n            // Reject old data\n            var duration = settings.iStateDuration;\n            if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\n                callback();\n                return;\n            }\n            // Number of columns have changed - all bets are off, no restore of settings\n            if ( s.columns && columns.length !== s.columns.length ) {\n                callback();\n                return;\n            }\n            // Store the saved state so it might be accessed at any time\n            settings.oLoadedState = $.extend( true, {}, s );\n            // Restore key features - todo - for 1.11 this needs to be done by\n            // subscribed events\n            if ( s.start !== undefined ) {\n                settings._iDisplayStart    = s.start;\n                settings.iInitDisplayStart = s.start;\n            }\n            if ( s.length !== undefined ) {\n                settings._iDisplayLength   = s.length;\n            }\n            // Order\n            if ( s.order !== undefined ) {\n                settings.aaSorting = [];\n                $.each( s.order, function ( i, col ) {\n                    settings.aaSorting.push( col[0] >= columns.length ?\n                        [ 0, col[1] ] :\n                        col\n                    );\n                } );\n            }\n            // Search\n            if ( s.search !== undefined ) {\n                $.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\n            }\n            // Columns\n            //\n            if ( s.columns ) {\n                for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\n                    var col = s.columns[i];\n                    // Visibility\n                    if ( col.visible !== undefined ) {\n                        columns[i].bVisible = col.visible;\n                    }\n                    // Search\n                    if ( col.search !== undefined ) {\n                        $.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\n                    }\n                }\n            }\n            _fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );\n            callback();\n        };\n        if ( ! settings.oFeatures.bStateSave ) {\n            callback();\n            return;\n        }\n        var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\n        if ( state !== undefined ) {\n            loaded( state );\n        }\n        // otherwise, wait for the loaded callback to be executed\n    }\n    /**\n     * Return the settings object for a particular table\n     *  @param {node} table table we are using as a dataTable\n     *  @returns {object} Settings object - or null if not found\n     *  @memberof DataTable#oApi\n     */\n    function _fnSettingsFromNode ( table )\n    {\n        var settings = DataTable.settings;\n        var idx = $.inArray( table, _pluck( settings, 'nTable' ) );\n        return idx !== -1 ?\n            settings[idx] :\n            null;\n    }\n    /**\n     * Log an error message\n     *  @param {object} settings dataTables settings object\n     *  @param {int} level log error messages, or display them to the user\n     *  @param {string} msg error message\n     *  @param {int} tn Technical note id to get more information about the error.\n     *  @memberof DataTable#oApi\n     */\n    function _fnLog( settings, level, msg, tn )\n    {\n        msg = 'DataTables warning: '+\n            (settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\n        if ( tn ) {\n            msg += '. For more information about this error, please see '+\n            'http://datatables.net/tn/'+tn;\n        }\n        if ( ! level  ) {\n            // Backwards compatibility pre 1.10\n            var ext = DataTable.ext;\n            var type = ext.sErrMode || ext.errMode;\n            if ( settings ) {\n                _fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\n            }\n            if ( type == 'alert' ) {\n                alert( msg );\n            }\n            else if ( type == 'throw' ) {\n                throw new Error(msg);\n            }\n            else if ( typeof type == 'function' ) {\n                type( settings, tn, msg );\n            }\n        }\n    }\n    /**\n     * See if a property is defined on one object, if so assign it to the other object\n     *  @param {object} ret target object\n     *  @param {object} src source object\n     *  @param {string} name property\n     *  @param {string} [mappedName] name to map too - optional, name used if not given\n     *  @memberof DataTable#oApi\n     */\n    function _fnMap( ret, src, name, mappedName )\n    {\n        if ( $.isArray( name ) ) {\n            $.each( name, function (i, val) {\n                if ( $.isArray( val ) ) {\n                    _fnMap( ret, src, val[0], val[1] );\n                }\n                else {\n                    _fnMap( ret, src, val );\n                }\n            } );\n            return;\n        }\n        if ( mappedName === undefined ) {\n            mappedName = name;\n        }\n        if ( src[name] !== undefined ) {\n            ret[mappedName] = src[name];\n        }\n    }\n    /**\n     * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n     * shallow copy arrays. The reason we need to do this, is that we don't want to\n     * deep copy array init values (such as aaSorting) since the dev wouldn't be\n     * able to override them, but we do want to deep copy arrays.\n     *  @param {object} out Object to extend\n     *  @param {object} extender Object from which the properties will be applied to\n     *      out\n     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n     *      independent copy with the exception of the `data` or `aaData` parameters\n     *      if they are present. This is so you can pass in a collection to\n     *      DataTables and have that used as your data source without breaking the\n     *      references\n     *  @returns {object} out Reference, just for convenience - out === the return.\n     *  @memberof DataTable#oApi\n     *  @todo This doesn't take account of arrays inside the deep copied objects.\n     */\n    function _fnExtend( out, extender, breakRefs )\n    {\n        var val;\n        for ( var prop in extender ) {\n            if ( extender.hasOwnProperty(prop) ) {\n                val = extender[prop];\n                if ( $.isPlainObject( val ) ) {\n                    if ( ! $.isPlainObject( out[prop] ) ) {\n                        out[prop] = {};\n                    }\n                    $.extend( true, out[prop], val );\n                }\n                else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\n                    out[prop] = val.slice();\n                }\n                else {\n                    out[prop] = val;\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Bind an event handers to allow a click or return key to activate the callback.\n     * This is good for accessibility since a return on the keyboard will have the\n     * same effect as a click, if the element has focus.\n     *  @param {element} n Element to bind the action to\n     *  @param {object} oData Data object to pass to the triggered function\n     *  @param {function} fn Callback function for when the event is triggered\n     *  @memberof DataTable#oApi\n     */\n    function _fnBindAction( n, oData, fn )\n    {\n        $(n)\n            .on( 'click.DT', oData, function (e) {\n                    n.blur(); // Remove focus outline for mouse users\n                    fn(e);\n                } )\n            .on( 'keypress.DT', oData, function (e){\n                    if ( e.which === 13 ) {\n                        e.preventDefault();\n                        fn(e);\n                    }\n                } )\n            .on( 'selectstart.DT', function () {\n                    /* Take the brutal approach to cancelling text selection */\n                    return false;\n                } );\n    }\n    /**\n     * Register a callback function. Easily allows a callback function to be added to\n     * an array store of callback functions that can then all be called together.\n     *  @param {object} oSettings dataTables settings object\n     *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n     *  @param {function} fn Function to be called back\n     *  @param {string} sName Identifying name for the callback (i.e. a label)\n     *  @memberof DataTable#oApi\n     */\n    function _fnCallbackReg( oSettings, sStore, fn, sName )\n    {\n        if ( fn )\n        {\n            oSettings[sStore].push( {\n                \"fn\": fn,\n                \"sName\": sName\n            } );\n        }\n    }\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {object} settings dataTables settings object\n     *  @param {string} callbackArr Name of the array storage for the callbacks in\n     *      oSettings\n     *  @param {string} eventName Name of the jQuery custom event to trigger. If\n     *      null no trigger is fired\n     *  @param {array} args Array of arguments to pass to the callback function /\n     *      trigger\n     *  @memberof DataTable#oApi\n     */\n    function _fnCallbackFire( settings, callbackArr, eventName, args )\n    {\n        var ret = [];\n        if ( callbackArr ) {\n            ret = $.map( settings[callbackArr].slice().reverse(), function (val) {\n                return val.fn.apply( settings.oInstance, args );\n            } );\n        }\n        if ( eventName !== null ) {\n            var e = $.Event( eventName+'.dt' );\n            $(settings.nTable).trigger( e, args );\n            ret.push( e.result );\n        }\n        return ret;\n    }\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {object} settings dataTables settings object\n     */\n    function _fnLengthOverflow ( settings )\n    {\n        var\n            start = settings._iDisplayStart,\n            end = settings.fnDisplayEnd(),\n            len = settings._iDisplayLength;\n        /* If we have space to show extra rows (backing up from the end point - then do so */\n        if ( start >= end )\n        {\n            start = end - len;\n        }\n        // Keep the start record on the current page\n        start -= (start % len);\n        if ( len === -1 || start < 0 )\n        {\n            start = 0;\n        }\n        settings._iDisplayStart = start;\n    }\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {settings} settings dataTables settings object\n     *  @param {type} type Name of the array storage for the callbacks in\n     *      oSettings\n     */\n    function _fnRenderer( settings, type )\n    {\n        var renderer = settings.renderer;\n        var host = DataTable.ext.renderer[type];\n        if ( $.isPlainObject( renderer ) && renderer[type] ) {\n            // Specific renderer for this type. If available use it, otherwise use\n            // the default.\n            return host[renderer[type]] || host._;\n        }\n        else if ( typeof renderer === 'string' ) {\n            // Common renderer - if there is one available for this type use it,\n            // otherwise use the default\n            return host[renderer] || host._;\n        }\n        // Use the default\n        return host._;\n    }\n    /**\n     * Detect the data source being used for the table. Used to simplify the code\n     * a little (ajax) and to make it compress a little smaller.\n     *\n     *  @param {object} settings dataTables settings object\n     *  @returns {string} Data source\n     *  @memberof DataTable#oApi\n     */\n    function _fnDataSource ( settings )\n    {\n        if ( settings.oFeatures.bServerSide ) {\n            return 'ssp';\n        }\n        else if ( settings.ajax || settings.sAjaxSource ) {\n            return 'ajax';\n        }\n        return 'dom';\n    }\n    /**\n     * Computed structure of the DataTables API, defined by the options passed to\n     * `DataTable.Api.register()` when building the API.\n     *\n     * The structure is built in order to speed creation and extension of the Api\n     * objects since the extensions are effectively pre-parsed.\n     *\n     * The array is an array of objects with the following structure, where this\n     * base array represents the Api prototype base:\n     *\n     *     [\n     *       {\n     *         name:      'data'                -- string   - Property name\n     *         val:       function () {},       -- function - Api method (or undefined if just an object\n     *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n     *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n     *       },\n     *       {\n     *         name:     'row'\n     *         val:       {},\n     *         methodExt: [ ... ],\n     *         propExt:   [\n     *           {\n     *             name:      'data'\n     *             val:       function () {},\n     *             methodExt: [ ... ],\n     *             propExt:   [ ... ]\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     ]\n     *\n     * @type {Array}\n     * @ignore\n     */\n    var __apiStruct = [];\n    /**\n     * `Array.prototype` reference.\n     *\n     * @type object\n     * @ignore\n     */\n    var __arrayProto = Array.prototype;\n    /**\n     * Abstraction for `context` parameter of the `Api` constructor to allow it to\n     * take several different forms for ease of use.\n     *\n     * Each of the input parameter types will be converted to a DataTables settings\n     * object where possible.\n     *\n     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n     *   of:\n     *\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\n     *     with be found and used.\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\n     *   * `object` - DataTables settings object\n     *   * `DataTables.Api` - API instance\n     * @return {array|null} Matching DataTables settings objects. `null` or\n     *   `undefined` is returned if no matching DataTable is found.\n     * @ignore\n     */\n    var _toSettings = function ( mixed )\n    {\n        var idx, jq;\n        var settings = DataTable.settings;\n        var tables = $.map( settings, function (el) {\n            return el.nTable;\n        } );\n        if ( ! mixed ) {\n            return [];\n        }\n        else if ( mixed.nTable && mixed.oApi ) {\n            // DataTables settings object\n            return [ mixed ];\n        }\n        else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\n            // Table node\n            idx = $.inArray( mixed, tables );\n            return idx !== -1 ? [ settings[idx] ] : null;\n        }\n        else if ( mixed && typeof mixed.settings === 'function' ) {\n            return mixed.settings().toArray();\n        }\n        else if ( typeof mixed === 'string' ) {\n            // jQuery selector\n            jq = $(mixed);\n        }\n        else if ( mixed instanceof $ ) {\n            // jQuery object (also DataTables instance)\n            jq = mixed;\n        }\n        if ( jq ) {\n            return jq.map( function() {\n                idx = $.inArray( this, tables );\n                return idx !== -1 ? settings[idx] : null;\n            } ).toArray();\n        }\n    };\n    /**\n     * DataTables API class - used to control and interface with  one or more\n     * DataTables enhanced tables.\n     *\n     * The API class is heavily based on jQuery, presenting a chainable interface\n     * that you can use to interact with tables. Each instance of the API class has\n     * a \"context\" - i.e. the tables that it will operate on. This could be a single\n     * table, all tables on a page or a sub-set thereof.\n     *\n     * Additionally the API is designed to allow you to easily work with the data in\n     * the tables, retrieving and manipulating it as required. This is done by\n     * presenting the API class as an array like interface. The contents of the\n     * array depend upon the actions requested by each method (for example\n     * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n     * return an array of objects or arrays depending upon your table's\n     * configuration). The API object has a number of array like methods (`push`,\n     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n     * `unique` etc) to assist your working with the data held in a table.\n     *\n     * Most methods (those which return an Api instance) are chainable, which means\n     * the return from a method call also has all of the methods available that the\n     * top level object had. For example, these two calls are equivalent:\n     *\n     *     // Not chained\n     *     api.row.add( {...} );\n     *     api.draw();\n     *\n     *     // Chained\n     *     api.row.add( {...} ).draw();\n     *\n     * @class DataTable.Api\n     * @param {array|object|string|jQuery} context DataTable identifier. This is\n     *   used to define which DataTables enhanced tables this API will operate on.\n     *   Can be one of:\n     *\n     *   * `string` - jQuery selector. Any DataTables' matching the given selector\n     *     with be found and used.\n     *   * `node` - `TABLE` node which has already been formed into a DataTable.\n     *   * `jQuery` - A jQuery object of `TABLE` nodes.\n     *   * `object` - DataTables settings object\n     * @param {array} [data] Data to initialise the Api instance with.\n     *\n     * @example\n     *   // Direct initialisation during DataTables construction\n     *   var api = $('#example').DataTable();\n     *\n     * @example\n     *   // Initialisation using a DataTables jQuery object\n     *   var api = $('#example').dataTable().api();\n     *\n     * @example\n     *   // Initialisation as a constructor\n     *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n     */\n    _Api = function ( context, data )\n    {\n        if ( ! (this instanceof _Api) ) {\n            return new _Api( context, data );\n        }\n        var settings = [];\n        var ctxSettings = function ( o ) {\n            var a = _toSettings( o );\n            if ( a ) {\n                settings = settings.concat( a );\n            }\n        };\n        if ( $.isArray( context ) ) {\n            for ( var i=0, ien=context.length ; i<ien ; i++ ) {\n                ctxSettings( context[i] );\n            }\n        }\n        else {\n            ctxSettings( context );\n        }\n        // Remove duplicates\n        this.context = _unique( settings );\n        // Initial data\n        if ( data ) {\n            $.merge( this, data );\n        }\n        // selector\n        this.selector = {\n            rows: null,\n            cols: null,\n            opts: null\n        };\n        _Api.extend( this, this, __apiStruct );\n    };\n    DataTable.Api = _Api;\n    // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n    // isPlainObject.\n    $.extend( _Api.prototype, {\n        any: function ()\n        {\n            return this.count() !== 0;\n        },\n        concat:  __arrayProto.concat,\n        context: [], // array of table settings objects\n        count: function ()\n        {\n            return this.flatten().length;\n        },\n        each: function ( fn )\n        {\n            for ( var i=0, ien=this.length ; i<ien; i++ ) {\n                fn.call( this, this[i], i, this );\n            }\n            return this;\n        },\n        eq: function ( idx )\n        {\n            var ctx = this.context;\n            return ctx.length > idx ?\n                new _Api( ctx[idx], this[idx] ) :\n                null;\n        },\n        filter: function ( fn )\n        {\n            var a = [];\n            if ( __arrayProto.filter ) {\n                a = __arrayProto.filter.call( this, fn, this );\n            }\n            else {\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\n                    if ( fn.call( this, this[i], i, this ) ) {\n                        a.push( this[i] );\n                    }\n                }\n            }\n            return new _Api( this.context, a );\n        },\n        flatten: function ()\n        {\n            var a = [];\n            return new _Api( this.context, a.concat.apply( a, this.toArray() ) );\n        },\n        join:    __arrayProto.join,\n        indexOf: __arrayProto.indexOf || function (obj, start)\n        {\n            for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\n                if ( this[i] === obj ) {\n                    return i;\n                }\n            }\n            return -1;\n        },\n        iterator: function ( flatten, type, fn, alwaysNew ) {\n            var\n                a = [], ret,\n                i, ien, j, jen,\n                context = this.context,\n                rows, items, item,\n                selector = this.selector;\n            // Argument shifting\n            if ( typeof flatten === 'string' ) {\n                alwaysNew = fn;\n                fn = type;\n                type = flatten;\n                flatten = false;\n            }\n            for ( i=0, ien=context.length ; i<ien ; i++ ) {\n                var apiInst = new _Api( context[i] );\n                if ( type === 'table' ) {\n                    ret = fn.call( apiInst, context[i], i );\n                    if ( ret !== undefined ) {\n                        a.push( ret );\n                    }\n                }\n                else if ( type === 'columns' || type === 'rows' ) {\n                    // this has same length as context - one entry for each table\n                    ret = fn.call( apiInst, context[i], this[i], i );\n                    if ( ret !== undefined ) {\n                        a.push( ret );\n                    }\n                }\n                else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\n                    // columns and rows share the same structure.\n                    // 'this' is an array of column indexes for each context\n                    items = this[i];\n                    if ( type === 'column-rows' ) {\n                        rows = _selector_row_indexes( context[i], selector.opts );\n                    }\n                    for ( j=0, jen=items.length ; j<jen ; j++ ) {\n                        item = items[j];\n                        if ( type === 'cell' ) {\n                            ret = fn.call( apiInst, context[i], item.row, item.column, i, j );\n                        }\n                        else {\n                            ret = fn.call( apiInst, context[i], item, i, j, rows );\n                        }\n                        if ( ret !== undefined ) {\n                            a.push( ret );\n                        }\n                    }\n                }\n            }\n            if ( a.length || alwaysNew ) {\n                var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\n                var apiSelector = api.selector;\n                apiSelector.rows = selector.rows;\n                apiSelector.cols = selector.cols;\n                apiSelector.opts = selector.opts;\n                return api;\n            }\n            return this;\n        },\n        lastIndexOf: __arrayProto.lastIndexOf || function ()\n        {\n            // Bit cheeky...\n            return this.indexOf.apply( this.toArray.reverse(), arguments );\n        },\n        length:  0,\n        map: function ( fn )\n        {\n            var a = [];\n            if ( __arrayProto.map ) {\n                a = __arrayProto.map.call( this, fn, this );\n            }\n            else {\n                // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n                for ( var i=0, ien=this.length ; i<ien ; i++ ) {\n                    a.push( fn.call( this, this[i], i ) );\n                }\n            }\n            return new _Api( this.context, a );\n        },\n        pluck: function ( prop )\n        {\n            return this.map( function ( el ) {\n                return el[prop];\n            } );\n        },\n        pop:     __arrayProto.pop,\n        push:    __arrayProto.push,\n        // Does not return an API instance\n        reduce: __arrayProto.reduce || function ( fn, init )\n        {\n            return _fnReduce( this, fn, init, 0, this.length, 1 );\n        },\n        reduceRight: __arrayProto.reduceRight || function ( fn, init )\n        {\n            return _fnReduce( this, fn, init, this.length-1, -1, -1 );\n        },\n        reverse: __arrayProto.reverse,\n        // Object with rows, columns and opts\n        selector: null,\n        shift:   __arrayProto.shift,\n        slice: function () {\n            return new _Api( this.context, this );\n        },\n        sort:    __arrayProto.sort, // ? name - order?\n        splice:  __arrayProto.splice,\n        toArray: function ()\n        {\n            return __arrayProto.slice.call( this );\n        },\n        to$: function ()\n        {\n            return $( this );\n        },\n        toJQuery: function ()\n        {\n            return $( this );\n        },\n        unique: function ()\n        {\n            return new _Api( this.context, _unique(this) );\n        },\n        unshift: __arrayProto.unshift\n    } );\n    _Api.extend = function ( scope, obj, ext )\n    {\n        // Only extend API instances and static properties of the API\n        if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\n            return;\n        }\n        var\n            i, ien,\n            struct,\n            methodScoping = function ( scope, fn, struc ) {\n                return function () {\n                    var ret = fn.apply( scope, arguments );\n                    // Method extension\n                    _Api.extend( ret, ret, struc.methodExt );\n                    return ret;\n                };\n            };\n        for ( i=0, ien=ext.length ; i<ien ; i++ ) {\n            struct = ext[i];\n            // Value\n            obj[struct.name] = typeof struct.val === 'function' ?\n                methodScoping( scope, struct.val, struct ) :\n                $.isPlainObject( struct.val ) ?\n                    {} :\n                    struct.val;\n            obj[struct.name].__dt_wrapper = true;\n            // Property extension\n            _Api.extend( scope, obj[struct.name], struct.propExt );\n        }\n    };\n    _Api.register = _api_register = function ( name, val )\n    {\n        if ( $.isArray( name ) ) {\n            for ( var j=0, jen=name.length ; j<jen ; j++ ) {\n                _Api.register( name[j], val );\n            }\n            return;\n        }\n        var\n            i, ien,\n            heir = name.split('.'),\n            struct = __apiStruct,\n            key, method;\n        var find = function ( src, name ) {\n            for ( var i=0, ien=src.length ; i<ien ; i++ ) {\n                if ( src[i].name === name ) {\n                    return src[i];\n                }\n            }\n            return null;\n        };\n        for ( i=0, ien=heir.length ; i<ien ; i++ ) {\n            method = heir[i].indexOf('()') !== -1;\n            key = method ?\n                heir[i].replace('()', '') :\n                heir[i];\n            var src = find( struct, key );\n            if ( ! src ) {\n                src = {\n                    name:      key,\n                    val:       {},\n                    methodExt: [],\n                    propExt:   []\n                };\n                struct.push( src );\n            }\n            if ( i === ien-1 ) {\n                src.val = val;\n            }\n            else {\n                struct = method ?\n                    src.methodExt :\n                    src.propExt;\n            }\n        }\n    };\n    _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\n        _Api.register( pluralName, val );\n        _Api.register( singularName, function () {\n            var ret = val.apply( this, arguments );\n            if ( ret === this ) {\n                // Returned item is the API instance that was passed in, return it\n                return this;\n            }\n            else if ( ret instanceof _Api ) {\n                // New API instance returned, want the value from the first item\n                // in the returned array for the singular result.\n                return ret.length ?\n                    $.isArray( ret[0] ) ?\n                        new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\n                        ret[0] :\n                    undefined;\n            }\n            // Non-API return - just fire it back\n            return ret;\n        } );\n    };\n    /**\n     * Selector for HTML tables. Apply the given selector to the give array of\n     * DataTables settings objects.\n     *\n     * @param {string|integer} [selector] jQuery selector string or integer\n     * @param  {array} a of DataTables settings objects to be filtered\n     * @return {array}\n     * @ignore\n     */\n    var __table_selector = function ( selector, a )\n    {\n        // Integer is used to pick out a table by index\n        if ( typeof selector === 'number' ) {\n            return [a[selector]];\n        }\n        // Perform a jQuery selector on the table nodes\n        var nodes = $.map( a, function (el) {\n            return el.nTable;\n        } );\n        return $(nodes)\n            .filter( selector )\n            .map( function () {\n                // Need to translate back from the table node to the settings\n                var idx = $.inArray( this, nodes );\n                return a[idx];\n            } )\n            .toArray();\n    };\n    /**\n     * Context selector for the API's context (i.e. the tables the API instance\n     * refers to.\n     *\n     * @name    DataTable.Api#tables\n     * @param {string|integer} [selector] Selector to pick which tables the iterator\n     *   should operate on. If not given, all tables in the current context are\n     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n     *   select multiple tables or as an integer to select a single table.\n     * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n     */\n    _api_register( 'tables()', function ( selector ) {\n        // A new instance is created if there was a selector specified\n        return selector ?\n            new _Api( __table_selector( selector, this.context ) ) :\n            this;\n    } );\n    _api_register( 'table()', function ( selector ) {\n        var tables = this.tables( selector );\n        var ctx = tables.context;\n        // Truncate to the first matched table\n        return ctx.length ?\n            new _Api( ctx[0] ) :\n            tables;\n    } );\n    _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTable;\n        }, 1 );\n    } );\n    _api_registerPlural( 'tables().body()', 'table().body()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTBody;\n        }, 1 );\n    } );\n    _api_registerPlural( 'tables().header()', 'table().header()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTHead;\n        }, 1 );\n    } );\n    _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTFoot;\n        }, 1 );\n    } );\n    _api_registerPlural( 'tables().containers()', 'table().container()' , function () {\n        return this.iterator( 'table', function ( ctx ) {\n            return ctx.nTableWrapper;\n        }, 1 );\n    } );\n    /**\n     * Redraw the tables in the current context.\n     */\n    _api_register( 'draw()', function ( paging ) {\n        return this.iterator( 'table', function ( settings ) {\n            if ( paging === 'page' ) {\n                _fnDraw( settings );\n            }\n            else {\n                if ( typeof paging === 'string' ) {\n                    paging = paging === 'full-hold' ?\n                        false :\n                        true;\n                }\n                _fnReDraw( settings, paging===false );\n            }\n        } );\n    } );\n    /**\n     * Get the current page index.\n     *\n     * @return {integer} Current page index (zero based)\n     *//**\n     * Set the current page.\n     *\n     * Note that if you attempt to show a page which does not exist, DataTables will\n     * not throw an error, but rather reset the paging.\n     *\n     * @param {integer|string} action The paging action to take. This can be one of:\n     *  * `integer` - The page index to jump to\n     *  * `string` - An action to take:\n     *    * `first` - Jump to first page.\n     *    * `next` - Jump to the next page\n     *    * `previous` - Jump to previous page\n     *    * `last` - Jump to the last page.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'page()', function ( action ) {\n        if ( action === undefined ) {\n            return this.page.info().page; // not an expensive call\n        }\n        // else, have an action to take on all tables\n        return this.iterator( 'table', function ( settings ) {\n            _fnPageChange( settings, action );\n        } );\n    } );\n    /**\n     * Paging information for the first table in the current context.\n     *\n     * If you require paging information for another table, use the `table()` method\n     * with a suitable selector.\n     *\n     * @return {object} Object with the following properties set:\n     *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n     *  * `pages` - Total number of pages\n     *  * `start` - Display index for the first record shown on the current page\n     *  * `end` - Display index for the last record shown on the current page\n     *  * `length` - Display length (number of records). Note that generally `start\n     *    + length = end`, but this is not always true, for example if there are\n     *    only 2 records to show on the final page, with a length of 10.\n     *  * `recordsTotal` - Full data set length\n     *  * `recordsDisplay` - Data set length once the current filtering criterion\n     *    are applied.\n     */\n    _api_register( 'page.info()', function () {\n        if ( this.context.length === 0 ) {\n            return undefined;\n        }\n        var\n            settings   = this.context[0],\n            start      = settings._iDisplayStart,\n            len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n            visRecords = settings.fnRecordsDisplay(),\n            all        = len === -1;\n        return {\n            \"page\":           all ? 0 : Math.floor( start / len ),\n            \"pages\":          all ? 1 : Math.ceil( visRecords / len ),\n            \"start\":          start,\n            \"end\":            settings.fnDisplayEnd(),\n            \"length\":         len,\n            \"recordsTotal\":   settings.fnRecordsTotal(),\n            \"recordsDisplay\": visRecords,\n            \"serverSide\":     _fnDataSource( settings ) === 'ssp'\n        };\n    } );\n    /**\n     * Get the current page length.\n     *\n     * @return {integer} Current page length. Note `-1` indicates that all records\n     *   are to be shown.\n     *//**\n     * Set the current page length.\n     *\n     * @param {integer} Page length to set. Use `-1` to show all records.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'page.len()', function ( len ) {\n        // Note that we can't call this function 'length()' because `length`\n        // is a Javascript property of functions which defines how many arguments\n        // the function expects.\n        if ( len === undefined ) {\n            return this.context.length !== 0 ?\n                this.context[0]._iDisplayLength :\n                undefined;\n        }\n        // else, set the page length\n        return this.iterator( 'table', function ( settings ) {\n            _fnLengthChange( settings, len );\n        } );\n    } );\n    var __reload = function ( settings, holdPosition, callback ) {\n        // Use the draw event to trigger a callback\n        if ( callback ) {\n            var api = new _Api( settings );\n            api.one( 'draw', function () {\n                callback( api.ajax.json() );\n            } );\n        }\n        if ( _fnDataSource( settings ) == 'ssp' ) {\n            _fnReDraw( settings, holdPosition );\n        }\n        else {\n            _fnProcessingDisplay( settings, true );\n            // Cancel an existing request\n            var xhr = settings.jqXHR;\n            if ( xhr && xhr.readyState !== 4 ) {\n                xhr.abort();\n            }\n            // Trigger xhr\n            _fnBuildAjax( settings, [], function( json ) {\n                _fnClearTable( settings );\n                var data = _fnAjaxDataSrc( settings, json );\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    _fnAddData( settings, data[i] );\n                }\n                _fnReDraw( settings, holdPosition );\n                _fnProcessingDisplay( settings, false );\n            } );\n        }\n    };\n    /**\n     * Get the JSON response from the last Ajax request that DataTables made to the\n     * server. Note that this returns the JSON from the first table in the current\n     * context.\n     *\n     * @return {object} JSON received from the server.\n     */\n    _api_register( 'ajax.json()', function () {\n        var ctx = this.context;\n        if ( ctx.length > 0 ) {\n            return ctx[0].json;\n        }\n        // else return undefined;\n    } );\n    /**\n     * Get the data submitted in the last Ajax request\n     */\n    _api_register( 'ajax.params()', function () {\n        var ctx = this.context;\n        if ( ctx.length > 0 ) {\n            return ctx[0].oAjaxData;\n        }\n        // else return undefined;\n    } );\n    /**\n     * Reload tables from the Ajax data source. Note that this function will\n     * automatically re-draw the table when the remote data has been loaded.\n     *\n     * @param {boolean} [reset=true] Reset (default) or hold the current paging\n     *   position. A full re-sort and re-filter is performed when this method is\n     *   called, which is why the pagination reset is the default action.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.reload()', function ( callback, resetPaging ) {\n        return this.iterator( 'table', function (settings) {\n            __reload( settings, resetPaging===false, callback );\n        } );\n    } );\n    /**\n     * Get the current Ajax URL. Note that this returns the URL from the first\n     * table in the current context.\n     *\n     * @return {string} Current Ajax source URL\n     *//**\n     * Set the Ajax URL. Note that this will set the URL for all tables in the\n     * current context.\n     *\n     * @param {string} url URL to set.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.url()', function ( url ) {\n        var ctx = this.context;\n        if ( url === undefined ) {\n            // get\n            if ( ctx.length === 0 ) {\n                return undefined;\n            }\n            ctx = ctx[0];\n            return ctx.ajax ?\n                $.isPlainObject( ctx.ajax ) ?\n                    ctx.ajax.url :\n                    ctx.ajax :\n                ctx.sAjaxSource;\n        }\n        // set\n        return this.iterator( 'table', function ( settings ) {\n            if ( $.isPlainObject( settings.ajax ) ) {\n                settings.ajax.url = url;\n            }\n            else {\n                settings.ajax = url;\n            }\n            // No need to consider sAjaxSource here since DataTables gives priority\n            // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n            // value of `sAjaxSource` redundant.\n        } );\n    } );\n    /**\n     * Load data from the newly set Ajax URL. Note that this method is only\n     * available when `ajax.url()` is used to set a URL. Additionally, this method\n     * has the same effect as calling `ajax.reload()` but is provided for\n     * convenience when setting a new URL. Like `ajax.reload()` it will\n     * automatically redraw the table once the remote data has been loaded.\n     *\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\n        // Same as a reload, but makes sense to present it for easy access after a\n        // url change\n        return this.iterator( 'table', function ( ctx ) {\n            __reload( ctx, resetPaging===false, callback );\n        } );\n    } );\n    var _selector_run = function ( type, selector, selectFn, settings, opts )\n    {\n        var\n            out = [], res,\n            a, i, ien, j, jen,\n            selectorType = typeof selector;\n        // Can't just check for isArray here, as an API or jQuery instance might be\n        // given with their array like look\n        if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\n            selector = [ selector ];\n        }\n        for ( i=0, ien=selector.length ; i<ien ; i++ ) {\n            // Only split on simple strings - complex expressions will be jQuery selectors\n            a = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\n                selector[i].split(',') :\n                [ selector[i] ];\n            for ( j=0, jen=a.length ; j<jen ; j++ ) {\n                res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\n                if ( res && res.length ) {\n                    out = out.concat( res );\n                }\n            }\n        }\n        // selector extensions\n        var ext = _ext.selector[type];\n        if ( ext.length ) {\n            for ( i=0, ien=ext.length ; i<ien ; i++ ) {\n                out = ext[i]( settings, opts, out );\n            }\n        }\n        return _unique( out );\n    };\n    var _selector_opts = function ( opts )\n    {\n        if ( ! opts ) {\n            opts = {};\n        }\n        // Backwards compatibility for 1.9- which used the terminology filter rather\n        // than search\n        if ( opts.filter && opts.search === undefined ) {\n            opts.search = opts.filter;\n        }\n        return $.extend( {\n            search: 'none',\n            order: 'current',\n            page: 'all'\n        }, opts );\n    };\n    var _selector_first = function ( inst )\n    {\n        // Reduce the API instance to the first item found\n        for ( var i=0, ien=inst.length ; i<ien ; i++ ) {\n            if ( inst[i].length > 0 ) {\n                // Assign the first element to the first item in the instance\n                // and truncate the instance and context\n                inst[0] = inst[i];\n                inst[0].length = 1;\n                inst.length = 1;\n                inst.context = [ inst.context[i] ];\n                return inst;\n            }\n        }\n        // Not found - return an empty instance\n        inst.length = 0;\n        return inst;\n    };\n    var _selector_row_indexes = function ( settings, opts )\n    {\n        var\n            i, ien, tmp, a=[],\n            displayFiltered = settings.aiDisplay,\n            displayMaster = settings.aiDisplayMaster;\n        var\n            search = opts.search,  // none, applied, removed\n            order  = opts.order,   // applied, current, index (original - compatibility with 1.9)\n            page   = opts.page;    // all, current\n        if ( _fnDataSource( settings ) == 'ssp' ) {\n            // In server-side processing mode, most options are irrelevant since\n            // rows not shown don't exist and the index order is the applied order\n            // Removed is a special case - for consistency just return an empty\n            // array\n            return search === 'removed' ?\n                [] :\n                _range( 0, displayMaster.length );\n        }\n        else if ( page == 'current' ) {\n            // Current page implies that order=current and fitler=applied, since it is\n            // fairly senseless otherwise, regardless of what order and search actually\n            // are\n            for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\n                a.push( displayFiltered[i] );\n            }\n        }\n        else if ( order == 'current' || order == 'applied' ) {\n            a = search == 'none' ?\n                displayMaster.slice() :                      // no search\n                search == 'applied' ?\n                    displayFiltered.slice() :                // applied search\n                    $.map( displayMaster, function (el) { // removed search\n                        return $.inArray( el, displayFiltered ) === -1 ? el : null;\n                    } );\n        }\n        else if ( order == 'index' || order == 'original' ) {\n            for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n                if ( search == 'none' ) {\n                    a.push( i );\n                }\n                else { // applied | removed\n                    tmp = $.inArray( i, displayFiltered );\n                    if ((tmp === -1 && search == 'removed') ||\n                        (tmp >= 0   && search == 'applied') )\n                    {\n                        a.push( i );\n                    }\n                }\n            }\n        }\n        return a;\n    };\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Rows\n     *\n     * {}          - no selector - use all available rows\n     * {integer}   - row aoData index\n     * {node}      - TR node\n     * {string}    - jQuery selector to apply to the TR elements\n     * {array}     - jQuery array of nodes, or simply an array of TR nodes\n     *\n     */\n    var __row_selector = function ( settings, selector, opts )\n    {\n        var rows;\n        var run = function ( sel ) {\n            var selInt = _intVal( sel );\n            // Short cut - selector is a number and no options provided (default is\n            // all records, so no need to check if the index is in there, since it\n            // must be - dev error if the index doesn't exist).\n            if ( selInt !== null && ! opts ) {\n                return [ selInt ];\n            }\n            if ( ! rows ) {\n                rows = _selector_row_indexes( settings, opts );\n            }\n            if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\n                // Selector - integer\n                return [ selInt ];\n            }\n            else if ( sel === null || sel === undefined || sel === '' ) {\n                // Selector - none\n                return rows;\n            }\n            // Selector - function\n            if ( typeof sel === 'function' ) {\n                return $.map( rows, function (idx) {\n                    var row = settings.aoData[idx];\n                    return sel( idx, row._aData, row.nTr ) ? idx : null;\n                } );\n            }\n            // Get nodes in the order from the `rows` array with null values removed\n            var nodes = _removeEmpty(\n                _pluck_order( settings.aoData, rows, 'nTr' )\n            );\n            // Selector - node\n            if ( sel.nodeName ) {\n                if ( sel._DT_RowIndex !== undefined ) {\n                    return [ sel._DT_RowIndex ]; // Property added by DT for fast lookup\n                }\n                else if ( sel._DT_CellIndex ) {\n                    return [ sel._DT_CellIndex.row ];\n                }\n                else {\n                    var host = $(sel).closest('*[data-dt-row]');\n                    return host.length ?\n                        [ host.data('dt-row') ] :\n                        [];\n                }\n            }\n            // ID selector. Want to always be able to select rows by id, regardless\n            // of if the tr element has been created or not, so can't rely upon\n            // jQuery here - hence a custom implementation. This does not match\n            // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n            // but to select it using a CSS selector engine (like Sizzle or\n            // querySelect) it would need to need to be escaped for some characters.\n            // DataTables simplifies this for row selectors since you can select\n            // only a row. A # indicates an id any anything that follows is the id -\n            // unescaped.\n            if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\n                // get row index from id\n                var rowObj = settings.aIds[sel.replace( /^#/, '' )];\n                if ( rowObj !== undefined ) {\n                    return [ rowObj.idx ];\n                }\n                // need to fall through to jQuery in case there is DOM id that\n                // matches\n            }\n            // Selector - jQuery selector string, array of nodes or jQuery object/\n            // As jQuery's .filter() allows jQuery objects to be passed in filter,\n            // it also allows arrays, so this will cope with all three options\n            return $(nodes)\n                .filter( sel )\n                .map( function () {\n                    return this._DT_RowIndex;\n                } )\n                .toArray();\n        };\n        return _selector_run( 'row', selector, run, settings, opts );\n    };\n    _api_register( 'rows()', function ( selector, opts ) {\n        // argument shifting\n        if ( selector === undefined ) {\n            selector = '';\n        }\n        else if ( $.isPlainObject( selector ) ) {\n            opts = selector;\n            selector = '';\n        }\n        opts = _selector_opts( opts );\n        var inst = this.iterator( 'table', function ( settings ) {\n            return __row_selector( settings, selector, opts );\n        }, 1 );\n        // Want argument shifting here and in __row_selector?\n        inst.selector.rows = selector;\n        inst.selector.opts = opts;\n        return inst;\n    } );\n    _api_register( 'rows().nodes()', function () {\n        return this.iterator( 'row', function ( settings, row ) {\n            return settings.aoData[row].nTr || undefined;\n        }, 1 );\n    } );\n    _api_register( 'rows().data()', function () {\n        return this.iterator( true, 'rows', function ( settings, rows ) {\n            return _pluck_order( settings.aoData, rows, '_aData' );\n        }, 1 );\n    } );\n    _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\n        return this.iterator( 'row', function ( settings, row ) {\n            var r = settings.aoData[row];\n            return type === 'search' ? r._aFilterData : r._aSortData;\n        }, 1 );\n    } );\n    _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\n        return this.iterator( 'row', function ( settings, row ) {\n            _fnInvalidate( settings, row, src );\n        } );\n    } );\n    _api_registerPlural( 'rows().indexes()', 'row().index()', function () {\n        return this.iterator( 'row', function ( settings, row ) {\n            return row;\n        }, 1 );\n    } );\n    _api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\n        var a = [];\n        var context = this.context;\n        // `iterator` will drop undefined values, but in this case we want them\n        for ( var i=0, ien=context.length ; i<ien ; i++ ) {\n            for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\n                var id = context[i].rowIdFn( context[i].aoData[this[i][j]]._aData );\n                a.push( (hash === true ? '#' : '' )+ id );\n            }\n        }\n        return new _Api( context, a );\n    } );\n    _api_registerPlural( 'rows().remove()', 'row().remove()', function () {\n        var that = this;\n        this.iterator( 'row', function ( settings, row, thatIdx ) {\n            var data = settings.aoData;\n            var rowData = data[row];\n            var i, ien, j, jen;\n            var loopRow, loopCells;\n            data.splice( row, 1 );\n            // Update the cached indexes\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\n                loopRow = data[i];\n                loopCells = loopRow.anCells;\n                // Rows\n                if ( loopRow.nTr !== null ) {\n                    loopRow.nTr._DT_RowIndex = i;\n                }\n                // Cells\n                if ( loopCells !== null ) {\n                    for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\n                        loopCells[j]._DT_CellIndex.row = i;\n                    }\n                }\n            }\n            // Delete from the display arrays\n            _fnDeleteIndex( settings.aiDisplayMaster, row );\n            _fnDeleteIndex( settings.aiDisplay, row );\n            _fnDeleteIndex( that[thatIdx], row, false ); // maintain local indexes\n            // Check for an 'overflow' they case for displaying the table\n            _fnLengthOverflow( settings );\n            // Remove the row's ID reference if there is one\n            var id = settings.rowIdFn( rowData._aData );\n            if ( id !== undefined ) {\n                delete settings.aIds[id];\n            }\n        } );\n        this.iterator( 'table', function ( settings ) {\n            for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n                settings.aoData[i].idx = i;\n            }\n        } );\n        return this;\n    } );\n    _api_register( 'rows.add()', function ( rows ) {\n        var newRows = this.iterator( 'table', function ( settings ) {\n                var row, i, ien;\n                var out = [];\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\n                    row = rows[i];\n                    if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n                        out.push( _fnAddTr( settings, row )[0] );\n                    }\n                    else {\n                        out.push( _fnAddData( settings, row ) );\n                    }\n                }\n                return out;\n            }, 1 );\n        // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n        var modRows = this.rows( -1 );\n        modRows.pop();\n        $.merge( modRows, newRows );\n        return modRows;\n    } );\n    /**\n     *\n     */\n    _api_register( 'row()', function ( selector, opts ) {\n        return _selector_first( this.rows( selector, opts ) );\n    } );\n    _api_register( 'row().data()', function ( data ) {\n        var ctx = this.context;\n        if ( data === undefined ) {\n            // Get\n            return ctx.length && this.length ?\n                ctx[0].aoData[this[0]]._aData :\n                undefined;\n        }\n        // Set\n        ctx[0].aoData[this[0]]._aData = data;\n        // Automatically invalidate\n        _fnInvalidate( ctx[0], this[0], 'data' );\n        return this;\n    } );\n    _api_register( 'row().node()', function () {\n        var ctx = this.context;\n        return ctx.length && this.length ?\n            ctx[0].aoData[this[0]].nTr || null :\n            null;\n    } );\n    _api_register( 'row.add()', function ( row ) {\n        // Allow a jQuery object to be passed in - only a single row is added from\n        // it though - the first element in the set\n        if ( row instanceof $ && row.length ) {\n            row = row[0];\n        }\n        var rows = this.iterator( 'table', function ( settings ) {\n            if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n                return _fnAddTr( settings, row )[0];\n            }\n            return _fnAddData( settings, row );\n        } );\n        // Return an Api.rows() extended instance, with the newly added row selected\n        return this.row( rows[0] );\n    } );\n    var __details_add = function ( ctx, row, data, klass )\n    {\n        // Convert to array of TR elements\n        var rows = [];\n        var addRow = function ( r, k ) {\n            // Recursion to allow for arrays of jQuery objects\n            if ( $.isArray( r ) || r instanceof $ ) {\n                for ( var i=0, ien=r.length ; i<ien ; i++ ) {\n                    addRow( r[i], k );\n                }\n                return;\n            }\n            // If we get a TR element, then just add it directly - up to the dev\n            // to add the correct number of columns etc\n            if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\n                rows.push( r );\n            }\n            else {\n                // Otherwise create a row with a wrapper\n                var created = $('<tr><td/></tr>').addClass( k );\n                $('td', created)\n                    .addClass( k )\n                    .html( r )[0].colSpan = _fnVisbleColumns( ctx );\n                rows.push( created[0] );\n            }\n        };\n        addRow( data, klass );\n        if ( row._details ) {\n            row._details.detach();\n        }\n        row._details = $(rows);\n        // If the children were already shown, that state should be retained\n        if ( row._detailsShow ) {\n            row._details.insertAfter( row.nTr );\n        }\n    };\n    var __details_remove = function ( api, idx )\n    {\n        var ctx = api.context;\n        if ( ctx.length ) {\n            var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];\n            if ( row && row._details ) {\n                row._details.remove();\n                row._detailsShow = undefined;\n                row._details = undefined;\n            }\n        }\n    };\n    var __details_display = function ( api, show ) {\n        var ctx = api.context;\n        if ( ctx.length && api.length ) {\n            var row = ctx[0].aoData[api[0]];\n            if ( row._details ) {\n                row._detailsShow = show;\n                if ( show ) {\n                    row._details.insertAfter( row.nTr );\n                }\n                else {\n                    row._details.detach();\n                }\n                __details_events( ctx[0] );\n            }\n        }\n    };\n    var __details_events = function ( settings )\n    {\n        var api = new _Api( settings );\n        var namespace = '.dt.DT_details';\n        var drawEvent = 'draw'+namespace;\n        var colvisEvent = 'column-visibility'+namespace;\n        var destroyEvent = 'destroy'+namespace;\n        var data = settings.aoData;\n        api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\n        if ( _pluck( data, '_details' ).length > 0 ) {\n            // On each draw, insert the required elements into the document\n            api.on( drawEvent, function ( e, ctx ) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n                api.rows( {page:'current'} ).eq(0).each( function (idx) {\n                    // Internal data grab\n                    var row = data[idx];\n                    if ( row._detailsShow ) {\n                        row._details.insertAfter( row.nTr );\n                    }\n                } );\n            } );\n            // Column visibility change - update the colspan\n            api.on( colvisEvent, function ( e, ctx) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n                // Update the colspan for the details rows (note, only if it already has\n                // a colspan)\n                var row, visible = _fnVisbleColumns( ctx );\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    row = data[i];\n                    if ( row._details ) {\n                        row._details.children('td[colspan]').attr('colspan', visible );\n                    }\n                }\n            } );\n            // Table destroyed - nuke any child rows\n            api.on( destroyEvent, function ( e, ctx ) {\n                if ( settings !== ctx ) {\n                    return;\n                }\n                for ( var i=0, ien=data.length ; i<ien ; i++ ) {\n                    if ( data[i]._details ) {\n                        __details_remove( api, i );\n                    }\n                }\n            } );\n        }\n    };\n    // Strings for the method names to help minification\n    var _emp = '';\n    var _child_obj = _emp+'row().child';\n    var _child_mth = _child_obj+'()';\n    // data can be:\n    //  tr\n    //  string\n    //  jQuery or array of any of the above\n    _api_register( _child_mth, function ( data, klass ) {\n        var ctx = this.context;\n        if ( data === undefined ) {\n            // get\n            return ctx.length && this.length ?\n                ctx[0].aoData[this[0]]._details :\n                undefined;\n        }\n        else if ( data === true ) {\n            // show\n            this.child.show();\n        }\n        else if ( data === false ) {\n            // remove\n            __details_remove( this );\n        }\n        else if ( ctx.length && this.length ) {\n            // set\n            __details_add( ctx[0], ctx[0].aoData[this[0]], data, klass );\n        }\n        return this;\n    } );\n    _api_register( [\n        _child_obj+'.show()',\n        _child_mth+'.show()' // only when `child()` was called with parameters (without\n    ], function () {   // it returns an object and this method is not executed)\n        __details_display( this, true );\n        return this;\n    } );\n    _api_register( [\n        _child_obj+'.hide()',\n        _child_mth+'.hide()' // only when `child()` was called with parameters (without\n    ], function () {         // it returns an object and this method is not executed)\n        __details_display( this, false );\n        return this;\n    } );\n    _api_register( [\n        _child_obj+'.remove()',\n        _child_mth+'.remove()' // only when `child()` was called with parameters (without\n    ], function () {           // it returns an object and this method is not executed)\n        __details_remove( this );\n        return this;\n    } );\n    _api_register( _child_obj+'.isShown()', function () {\n        var ctx = this.context;\n        if ( ctx.length && this.length ) {\n            // _detailsShown as false or undefined will fall through to return false\n            return ctx[0].aoData[this[0]]._detailsShow || false;\n        }\n        return false;\n    } );\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Columns\n     *\n     * {integer}           - column index (>=0 count from left, <0 count from right)\n     * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n     * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n     * \"{string}:name\"     - column name\n     * \"{string}\"          - jQuery selector on column header nodes\n     *\n     */\n    // can be an array of these items, comma separated list, or an array of comma\n    // separated lists\n    var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\n    // r1 and r2 are redundant - but it means that the parameters match for the\n    // iterator callback in columns().data()\n    var __columnData = function ( settings, column, r1, r2, rows ) {\n        var a = [];\n        for ( var row=0, ien=rows.length ; row<ien ; row++ ) {\n            a.push( _fnGetCellData( settings, rows[row], column ) );\n        }\n        return a;\n    };\n    var __column_selector = function ( settings, selector, opts )\n    {\n        var\n            columns = settings.aoColumns,\n            names = _pluck( columns, 'sName' ),\n            nodes = _pluck( columns, 'nTh' );\n        var run = function ( s ) {\n            var selInt = _intVal( s );\n            // Selector - all\n            if ( s === '' ) {\n                return _range( columns.length );\n            }\n            // Selector - index\n            if ( selInt !== null ) {\n                return [ selInt >= 0 ?\n                    selInt : // Count from left\n                    columns.length + selInt // Count from right (+ because its a negative value)\n                ];\n            }\n            // Selector = function\n            if ( typeof s === 'function' ) {\n                var rows = _selector_row_indexes( settings, opts );\n                return $.map( columns, function (col, idx) {\n                    return s(\n                            idx,\n                            __columnData( settings, idx, 0, 0, rows ),\n                            nodes[idx]\n                        ) ? idx : null;\n                } );\n            }\n            // jQuery or string selector\n            var match = typeof s === 'string' ?\n                s.match( __re_column_selector ) :\n                '';\n            if ( match ) {\n                switch( match[2] ) {\n                    case 'visIdx':\n                    case 'visible':\n                        var idx = parseInt( match[1], 10 );\n                        // Visible index given, convert to column index\n                        if ( idx < 0 ) {\n                            // Counting from the right\n                            var visColumns = $.map( columns, function (col,i) {\n                                return col.bVisible ? i : null;\n                            } );\n                            return [visColumns[visColumns.length + idx]];\n                        }\n                        // Counting from the left\n                        return [ _fnVisibleToColumnIndex( settings, idx ) ];\n                    case 'name':\n                        // match by name. `names` is column index complete and in order\n                        return $.map( names, function (name, i) {\n                            return name === match[1] ? i : null;\n                        } );\n                    default:\n                        return [];\n                }\n            }\n            // Cell in the table body\n            if ( s.nodeName && s._DT_CellIndex ) {\n                return [ s._DT_CellIndex.column ];\n            }\n            // jQuery selector on the TH elements for the columns\n            var jqResult = $( nodes )\n                .filter( s )\n                .map( function () {\n                    return $.inArray( this, nodes ); // `nodes` is column index complete and in order\n                } )\n                .toArray();\n            if ( jqResult.length || ! s.nodeName ) {\n                return jqResult;\n            }\n            // Otherwise a node which might have a `dt-column` data attribute, or be\n            // a child or such an element\n            var host = $(s).closest('*[data-dt-column]');\n            return host.length ?\n                [ host.data('dt-column') ] :\n                [];\n        };\n        return _selector_run( 'column', selector, run, settings, opts );\n    };\n    var __setColumnVis = function ( settings, column, vis ) {\n        var\n            cols = settings.aoColumns,\n            col  = cols[column],\n            data = settings.aoData,\n            cells, i, ien, tr;\n        // Get\n        if ( vis === undefined ) {\n            return col.bVisible;\n        }\n        // Set\n        // No change\n        if ( col.bVisible === vis ) {\n            return;\n        }\n        if ( vis ) {\n            // Insert column\n            // Need to decide if we should use appendChild or insertBefore\n            var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\n            for ( i=0, ien=data.length ; i<ien ; i++ ) {\n                tr = data[i].nTr;\n                cells = data[i].anCells;\n                if ( tr ) {\n                    // insertBefore can act like appendChild if 2nd arg is null\n                    tr.insertBefore( cells[column], cells[insertBefore] || null );\n                }\n            }\n        }\n        else {\n            // Remove column\n            $( _pluck( settings.aoData, 'anCells', column ) ).detach();\n        }\n        // Common actions\n        col.bVisible = vis;\n        _fnDrawHead( settings, settings.aoHeader );\n        _fnDrawHead( settings, settings.aoFooter );\n        _fnSaveState( settings );\n    };\n    _api_register( 'columns()', function ( selector, opts ) {\n        // argument shifting\n        if ( selector === undefined ) {\n            selector = '';\n        }\n        else if ( $.isPlainObject( selector ) ) {\n            opts = selector;\n            selector = '';\n        }\n        opts = _selector_opts( opts );\n        var inst = this.iterator( 'table', function ( settings ) {\n            return __column_selector( settings, selector, opts );\n        }, 1 );\n        // Want argument shifting here and in _row_selector?\n        inst.selector.cols = selector;\n        inst.selector.opts = opts;\n        return inst;\n    } );\n    _api_registerPlural( 'columns().header()', 'column().header()', function () {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].nTh;\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().footer()', 'column().footer()', function () {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].nTf;\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().data()', 'column().data()', function () {\n        return this.iterator( 'column-rows', __columnData, 1 );\n    } );\n    _api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\n        return this.iterator( 'column', function ( settings, column ) {\n            return settings.aoColumns[column].mData;\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n            return _pluck_order( settings.aoData, rows,\n                type === 'search' ? '_aFilterData' : '_aSortData', column\n            );\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\n        return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n            return _pluck_order( settings.aoData, rows, 'anCells', column ) ;\n        }, 1 );\n    } );\n    _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\n        var ret = this.iterator( 'column', function ( settings, column ) {\n            if ( vis === undefined ) {\n                return settings.aoColumns[column].bVisible;\n            } // else\n            __setColumnVis( settings, column, vis );\n        } );\n        // Group the column visibility changes\n        if ( vis !== undefined ) {\n            // Second loop once the first is done for events\n            this.iterator( 'column', function ( settings, column ) {\n                _fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\n            } );\n            if ( calc === undefined || calc ) {\n                this.columns.adjust();\n            }\n        }\n        return ret;\n    } );\n    _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\n        return this.iterator( 'column', function ( settings, column ) {\n            return type === 'visible' ?\n                _fnColumnIndexToVisible( settings, column ) :\n                column;\n        }, 1 );\n    } );\n    _api_register( 'columns.adjust()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnAdjustColumnSizing( settings );\n        }, 1 );\n    } );\n    _api_register( 'column.index()', function ( type, idx ) {\n        if ( this.context.length !== 0 ) {\n            var ctx = this.context[0];\n            if ( type === 'fromVisible' || type === 'toData' ) {\n                return _fnVisibleToColumnIndex( ctx, idx );\n            }\n            else if ( type === 'fromData' || type === 'toVisible' ) {\n                return _fnColumnIndexToVisible( ctx, idx );\n            }\n        }\n    } );\n    _api_register( 'column()', function ( selector, opts ) {\n        return _selector_first( this.columns( selector, opts ) );\n    } );\n    var __cell_selector = function ( settings, selector, opts )\n    {\n        var data = settings.aoData;\n        var rows = _selector_row_indexes( settings, opts );\n        var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\n        var allCells = $( [].concat.apply([], cells) );\n        var row;\n        var columns = settings.aoColumns.length;\n        var a, i, ien, j, o, host;\n        var run = function ( s ) {\n            var fnSelector = typeof s === 'function';\n            if ( s === null || s === undefined || fnSelector ) {\n                // All cells and function selectors\n                a = [];\n                for ( i=0, ien=rows.length ; i<ien ; i++ ) {\n                    row = rows[i];\n                    for ( j=0 ; j<columns ; j++ ) {\n                        o = {\n                            row: row,\n                            column: j\n                        };\n                        if ( fnSelector ) {\n                            // Selector - function\n                            host = data[row];\n                            if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\n                                a.push( o );\n                            }\n                        }\n                        else {\n                            // Selector - all\n                            a.push( o );\n                        }\n                    }\n                }\n                return a;\n            }\n            // Selector - index\n            if ( $.isPlainObject( s ) ) {\n                return [s];\n            }\n            // Selector - jQuery filtered cells\n            var jqResult = allCells\n                .filter( s )\n                .map( function (i, el) {\n                    return { // use a new object, in case someone changes the values\n                        row:    el._DT_CellIndex.row,\n                        column: el._DT_CellIndex.column\n                    };\n                } )\n                .toArray();\n            if ( jqResult.length || ! s.nodeName ) {\n                return jqResult;\n            }\n            // Otherwise the selector is a node, and there is one last option - the\n            // element might be a child of an element which has dt-row and dt-column\n            // data attributes\n            host = $(s).closest('*[data-dt-row]');\n            return host.length ?\n                [ {\n                    row: host.data('dt-row'),\n                    column: host.data('dt-column')\n                } ] :\n                [];\n        };\n        return _selector_run( 'cell', selector, run, settings, opts );\n    };\n    _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\n        // Argument shifting\n        if ( $.isPlainObject( rowSelector ) ) {\n            // Indexes\n            if ( rowSelector.row === undefined ) {\n                // Selector options in first parameter\n                opts = rowSelector;\n                rowSelector = null;\n            }\n            else {\n                // Cell index objects in first parameter\n                opts = columnSelector;\n                columnSelector = null;\n            }\n        }\n        if ( $.isPlainObject( columnSelector ) ) {\n            opts = columnSelector;\n            columnSelector = null;\n        }\n        // Cell selector\n        if ( columnSelector === null || columnSelector === undefined ) {\n            return this.iterator( 'table', function ( settings ) {\n                return __cell_selector( settings, rowSelector, _selector_opts( opts ) );\n            } );\n        }\n        // Row + column selector\n        var columns = this.columns( columnSelector, opts );\n        var rows = this.rows( rowSelector, opts );\n        var a, i, ien, j, jen;\n        var cells = this.iterator( 'table', function ( settings, idx ) {\n            a = [];\n            for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\n                for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\n                    a.push( {\n                        row:    rows[idx][i],\n                        column: columns[idx][j]\n                    } );\n                }\n            }\n            return a;\n        }, 1 );\n        $.extend( cells.selector, {\n            cols: columnSelector,\n            rows: rowSelector,\n            opts: opts\n        } );\n        return cells;\n    } );\n    _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            var data = settings.aoData[row];\n            return data && data.anCells ?\n                data.anCells[column] :\n                undefined;\n        }, 1 );\n    } );\n    _api_register( 'cells().data()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return _fnGetCellData( settings, row, column );\n        }, 1 );\n    } );\n    _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\n        type = type === 'search' ? '_aFilterData' : '_aSortData';\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return settings.aoData[row][type][column];\n        }, 1 );\n    } );\n    _api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return _fnGetCellData( settings, row, column, type );\n        }, 1 );\n    } );\n    _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            return {\n                row: row,\n                column: column,\n                columnVisible: _fnColumnIndexToVisible( settings, column )\n            };\n        }, 1 );\n    } );\n    _api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\n        return this.iterator( 'cell', function ( settings, row, column ) {\n            _fnInvalidate( settings, row, src, column );\n        } );\n    } );\n    _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\n        return _selector_first( this.cells( rowSelector, columnSelector, opts ) );\n    } );\n    _api_register( 'cell().data()', function ( data ) {\n        var ctx = this.context;\n        var cell = this[0];\n        if ( data === undefined ) {\n            // Get\n            return ctx.length && cell.length ?\n                _fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\n                undefined;\n        }\n        // Set\n        _fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\n        _fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\n        return this;\n    } );\n    /**\n     * Get current ordering (sorting) that has been applied to the table.\n     * @returns {array} 2D array containing the sorting information for the first\n     *   table in the current context. Each element in the parent array represents\n     *   a column being sorted upon (i.e. multi-sorting with two columns would have\n     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n     *   the column index that the sorting condition applies to, the second is the\n     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n     *   index of the sorting order from the `column.sorting` initialisation array.\n     *//**\n     * Set the ordering for the table.\n     * @param {integer} order Column index to sort upon.\n     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n     * @returns {DataTables.Api} this\n     *//**\n     * Set the ordering for the table.\n     * @param {array} order 1D array of sorting information to be applied.\n     * @param {array} [...] Optional additional sorting conditions\n     * @returns {DataTables.Api} this\n     *//**\n     * Set the ordering for the table.\n     * @param {array} order 2D array of sorting information to be applied.\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'order()', function ( order, dir ) {\n        var ctx = this.context;\n        if ( order === undefined ) {\n            // get\n            return ctx.length !== 0 ?\n                ctx[0].aaSorting :\n                undefined;\n        }\n        // set\n        if ( typeof order === 'number' ) {\n            // Simple column / direction passed in\n            order = [ [ order, dir ] ];\n        }\n        else if ( order.length && ! $.isArray( order[0] ) ) {\n            // Arguments passed in (list of 1D arrays)\n            order = Array.prototype.slice.call( arguments );\n        }\n        // otherwise a 2D array was passed in\n        return this.iterator( 'table', function ( settings ) {\n            settings.aaSorting = order.slice();\n        } );\n    } );\n    /**\n     * Attach a sort listener to an element for a given column\n     * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n     *   listener to. This can take the form of a single DOM node, a jQuery\n     *   collection of nodes or a jQuery selector which will identify the node(s).\n     * @param {integer} column the column that a click on this node will sort on\n     * @param {function} [callback] callback function when sort is run\n     * @returns {DataTables.Api} this\n     */\n    _api_register( 'order.listener()', function ( node, column, callback ) {\n        return this.iterator( 'table', function ( settings ) {\n            _fnSortAttachListener( settings, node, column, callback );\n        } );\n    } );\n    _api_register( 'order.fixed()', function ( set ) {\n        if ( ! set ) {\n            var ctx = this.context;\n            var fixed = ctx.length ?\n                ctx[0].aaSortingFixed :\n                undefined;\n            return $.isArray( fixed ) ?\n                { pre: fixed } :\n                fixed;\n        }\n        return this.iterator( 'table', function ( settings ) {\n            settings.aaSortingFixed = $.extend( true, {}, set );\n        } );\n    } );\n    // Order by the selected column(s)\n    _api_register( [\n        'columns().order()',\n        'column().order()'\n    ], function ( dir ) {\n        var that = this;\n        return this.iterator( 'table', function ( settings, i ) {\n            var sort = [];\n            $.each( that[i], function (j, col) {\n                sort.push( [ col, dir ] );\n            } );\n            settings.aaSorting = sort;\n        } );\n    } );\n    _api_register( 'search()', function ( input, regex, smart, caseInsen ) {\n        var ctx = this.context;\n        if ( input === undefined ) {\n            // get\n            return ctx.length !== 0 ?\n                ctx[0].oPreviousSearch.sSearch :\n                undefined;\n        }\n        // set\n        return this.iterator( 'table', function ( settings ) {\n            if ( ! settings.oFeatures.bFilter ) {\n                return;\n            }\n            _fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\n                \"sSearch\": input+\"\",\n                \"bRegex\":  regex === null ? false : regex,\n                \"bSmart\":  smart === null ? true  : smart,\n                \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n            } ), 1 );\n        } );\n    } );\n    _api_registerPlural(\n        'columns().search()',\n        'column().search()',\n        function ( input, regex, smart, caseInsen ) {\n            return this.iterator( 'column', function ( settings, column ) {\n                var preSearch = settings.aoPreSearchCols;\n                if ( input === undefined ) {\n                    // get\n                    return preSearch[column].sSearch;\n                }\n                // set\n                if ( ! settings.oFeatures.bFilter ) {\n                    return;\n                }\n                $.extend( preSearch[column], {\n                    \"sSearch\": input+\"\",\n                    \"bRegex\":  regex === null ? false : regex,\n                    \"bSmart\":  smart === null ? true  : smart,\n                    \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n                } );\n                _fnFilterComplete( settings, settings.oPreviousSearch, 1 );\n            } );\n        }\n    );\n    /*\n     * State API methods\n     */\n    _api_register( 'state()', function () {\n        return this.context.length ?\n            this.context[0].oSavedState :\n            null;\n    } );\n    _api_register( 'state.clear()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            // Save an empty object\n            settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\n        } );\n    } );\n    _api_register( 'state.loaded()', function () {\n        return this.context.length ?\n            this.context[0].oLoadedState :\n            null;\n    } );\n    _api_register( 'state.save()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnSaveState( settings );\n        } );\n    } );\n    /**\n     * Provide a common method for plug-ins to check the version of DataTables being\n     * used, in order to ensure compatibility.\n     *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n     *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n     *  @returns {boolean} true if this version of DataTables is greater or equal to\n     *    the required version, or false if this version of DataTales is not\n     *    suitable\n     *  @static\n     *  @dtopt API-Static\n     *  @example\n     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n     */\n    DataTable.versionCheck = DataTable.fnVersionCheck = function( version )\n    {\n        var aThis = DataTable.version.split('.');\n        var aThat = version.split('.');\n        var iThis, iThat;\n        for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\n            iThis = parseInt( aThis[i], 10 ) || 0;\n            iThat = parseInt( aThat[i], 10 ) || 0;\n            // Parts are the same, keep comparing\n            if (iThis === iThat) {\n                continue;\n            }\n            // Parts are different, return immediately\n            return iThis > iThat;\n        }\n        return true;\n    };\n    /**\n     * Check if a `<table>` node is a DataTable table already or not.\n     *\n     *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n     *      selector for the table to test. Note that if more than more than one\n     *      table is passed on, only the first will be checked\n     *  @returns {boolean} true the table given is a DataTable, or false otherwise\n     *  @static\n     *  @dtopt API-Static\n     *  @example\n     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n     *      $('#example').dataTable();\n     *    }\n     */\n    DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\n    {\n        var t = $(table).get(0);\n        var is = false;\n        if ( table instanceof DataTable.Api ) {\n            return true;\n        }\n        $.each( DataTable.settings, function (i, o) {\n            var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n            var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n            if ( o.nTable === t || head === t || foot === t ) {\n                is = true;\n            }\n        } );\n        return is;\n    };\n    /**\n     * Get all DataTable tables that have been initialised - optionally you can\n     * select to get only currently visible tables.\n     *\n     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n     *    or visible tables only.\n     *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n     *    DataTables\n     *  @static\n     *  @dtopt API-Static\n     *\n     *  @example\n     *    $.each( $.fn.dataTable.tables(true), function () {\n     *      $(table).DataTable().columns.adjust();\n     *    } );\n     */\n    DataTable.tables = DataTable.fnTables = function ( visible )\n    {\n        var api = false;\n        if ( $.isPlainObject( visible ) ) {\n            api = visible.api;\n            visible = visible.visible;\n        }\n        var a = $.map( DataTable.settings, function (o) {\n            if ( !visible || (visible && $(o.nTable).is(':visible')) ) {\n                return o.nTable;\n            }\n        } );\n        return api ?\n            new _Api( a ) :\n            a;\n    };\n    /**\n     * Convert from camel case parameters to Hungarian notation. This is made public\n     * for the extensions to provide the same ability as DataTables core to accept\n     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n     * parameters.\n     *  @param {object} src The model object which holds all parameters that can be\n     *    mapped.\n     *  @param {object} user The object to convert from camel case to Hungarian.\n     *  @param {boolean} force When set to `true`, properties which already have a\n     *    Hungarian value in the `user` object will be overwritten. Otherwise they\n     *    won't be.\n     */\n    DataTable.camelToHungarian = _fnCamelToHungarian;\n    /**\n     *\n     */\n    _api_register( '$()', function ( selector, opts ) {\n        var\n            rows   = this.rows( opts ).nodes(), // Get all rows\n            jqRows = $(rows);\n        return $( [].concat(\n            jqRows.filter( selector ).toArray(),\n            jqRows.find( selector ).toArray()\n        ) );\n    } );\n    // jQuery functions to operate on the tables\n    $.each( [ 'on', 'one', 'off' ], function (i, key) {\n        _api_register( key+'()', function ( /* event, handler */ ) {\n            var args = Array.prototype.slice.call(arguments);\n            // Add the `dt` namespace automatically if it isn't already present\n            args[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\n                return ! e.match(/\\.dt\\b/) ?\n                    e+'.dt' :\n                    e;\n                } ).join( ' ' );\n            var inst = $( this.tables().nodes() );\n            inst[key].apply( inst, args );\n            return this;\n        } );\n    } );\n    _api_register( 'clear()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            _fnClearTable( settings );\n        } );\n    } );\n    _api_register( 'settings()', function () {\n        return new _Api( this.context, this.context );\n    } );\n    _api_register( 'init()', function () {\n        var ctx = this.context;\n        return ctx.length ? ctx[0].oInit : null;\n    } );\n    _api_register( 'data()', function () {\n        return this.iterator( 'table', function ( settings ) {\n            return _pluck( settings.aoData, '_aData' );\n        } ).flatten();\n    } );\n    _api_register( 'destroy()', function ( remove ) {\n        remove = remove || false;\n        return this.iterator( 'table', function ( settings ) {\n            var orig      = settings.nTableWrapper.parentNode;\n            var classes   = settings.oClasses;\n            var table     = settings.nTable;\n            var tbody     = settings.nTBody;\n            var thead     = settings.nTHead;\n            var tfoot     = settings.nTFoot;\n            var jqTable   = $(table);\n            var jqTbody   = $(tbody);\n            var jqWrapper = $(settings.nTableWrapper);\n            var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\n            var ien;\n            // Flag to note that the table is currently being destroyed - no action\n            // should be taken\n            settings.bDestroying = true;\n            // Fire off the destroy callbacks for plug-ins etc\n            _fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\n            // If not being removed from the document, make all columns visible\n            if ( ! remove ) {\n                new _Api( settings ).columns().visible( true );\n            }\n            // Blitz all `DT` namespaced events (these are internal events, the\n            // lowercase, `dt` events are user subscribed and they are responsible\n            // for removing them\n            jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n            $(window).off('.DT-'+settings.sInstance);\n            // When scrolling we had to break the table up - restore it\n            if ( table != thead.parentNode ) {\n                jqTable.children('thead').detach();\n                jqTable.append( thead );\n            }\n            if ( tfoot && table != tfoot.parentNode ) {\n                jqTable.children('tfoot').detach();\n                jqTable.append( tfoot );\n            }\n            settings.aaSorting = [];\n            settings.aaSortingFixed = [];\n            _fnSortingClasses( settings );\n            $( rows ).removeClass( settings.asStripeClasses.join(' ') );\n            $('th, td', thead).removeClass( classes.sSortable+' '+\n                classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\n            );\n            if ( settings.bJUI ) {\n                $('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();\n                $('th, td', thead).each( function () {\n                    var wrapper = $('div.'+classes.sSortJUIWrapper, this);\n                    $(this).append( wrapper.contents() );\n                    wrapper.detach();\n                } );\n            }\n            // Add the TR elements back into the table in their original order\n            jqTbody.children().detach();\n            jqTbody.append( rows );\n            // Remove the DataTables generated nodes, events and classes\n            var removedMethod = remove ? 'remove' : 'detach';\n            jqTable[removedMethod]();\n            jqWrapper[removedMethod]();\n            // If we need to reattach the table to the document\n            if ( ! remove && orig ) {\n                // insertBefore acts like appendChild if !arg[1]\n                orig.insertBefore( table, settings.nTableReinsertBefore );\n                // Restore the width of the original table - was read from the style property,\n                // so we can restore directly to that\n                jqTable\n                    .css( 'width', settings.sDestroyWidth )\n                    .removeClass( classes.sTable );\n                // If the were originally stripe classes - then we add them back here.\n                // Note this is not fool proof (for example if not all rows had stripe\n                // classes - but it's a good effort without getting carried away\n                ien = settings.asDestroyStripes.length;\n                if ( ien ) {\n                    jqTbody.children().each( function (i) {\n                        $(this).addClass( settings.asDestroyStripes[i % ien] );\n                    } );\n                }\n            }\n            /* Remove the settings object from the settings array */\n            var idx = $.inArray( settings, DataTable.settings );\n            if ( idx !== -1 ) {\n                DataTable.settings.splice( idx, 1 );\n            }\n        } );\n    } );\n    // Add the `every()` method for rows, columns and cells in a compact form\n    $.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\n        _api_register( type+'s().every()', function ( fn ) {\n            var opts = this.selector.opts;\n            var api = this;\n            return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\n                // Rows and columns:\n                //  arg1 - index\n                //  arg2 - table counter\n                //  arg3 - loop counter\n                //  arg4 - undefined\n                // Cells:\n                //  arg1 - row index\n                //  arg2 - column index\n                //  arg3 - table counter\n                //  arg4 - loop counter\n                fn.call(\n                    api[type](\n                        arg1,\n                        type==='cell' ? arg2 : opts,\n                        type==='cell' ? opts : undefined\n                    ),\n                    arg1, arg2, arg3, arg4\n                );\n            } );\n        } );\n    } );\n    // i18n method for extensions to be able to use the language object from the\n    // DataTable\n    _api_register( 'i18n()', function ( token, def, plural ) {\n        var ctx = this.context[0];\n        var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\n        if ( resolved === undefined ) {\n            resolved = def;\n        }\n        if ( plural !== undefined && $.isPlainObject( resolved ) ) {\n            resolved = resolved[plural] !== undefined ?\n                resolved[plural] :\n                resolved._;\n        }\n        return resolved.replace( '%d', plural ); // nb: plural might be undefined,\n    } );\n    /**\n     * Version string for plug-ins to check compatibility. Allowed format is\n     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n     * only for non-release builds. See http://semver.org/ for more information.\n     *  @member\n     *  @type string\n     *  @default Version number\n     */\n    DataTable.version = \"1.10.15\";\n    /**\n     * Private data store, containing all of the settings objects that are\n     * created for the tables on a given page.\n     *\n     * Note that the `DataTable.settings` object is aliased to\n     * `jQuery.fn.dataTableExt` through which it may be accessed and\n     * manipulated, or `jQuery.fn.dataTable.settings`.\n     *  @member\n     *  @type array\n     *  @default []\n     *  @private\n     */\n    DataTable.settings = [];\n    /**\n     * Object models container, for the various models that DataTables has\n     * available to it. These models define the objects that are used to hold\n     * the active state and configuration of the table.\n     *  @namespace\n     */\n    DataTable.models = {};\n    /**\n     * Template object for the way in which DataTables holds information about\n     * search information for the global filter and individual column filters.\n     *  @namespace\n     */\n    DataTable.models.oSearch = {\n        /**\n         * Flag to indicate if the filtering should be case insensitive or not\n         *  @type boolean\n         *  @default true\n         */\n        \"bCaseInsensitive\": true,\n        /**\n         * Applied search term\n         *  @type string\n         *  @default <i>Empty string</i>\n         */\n        \"sSearch\": \"\",\n        /**\n         * Flag to indicate if the search term should be interpreted as a\n         * regular expression (true) or not (false) and therefore and special\n         * regex characters escaped.\n         *  @type boolean\n         *  @default false\n         */\n        \"bRegex\": false,\n        /**\n         * Flag to indicate if DataTables is to use its smart filtering or not.\n         *  @type boolean\n         *  @default true\n         */\n        \"bSmart\": true\n    };\n    /**\n     * Template object for the way in which DataTables holds information about\n     * each individual row. This is the object format used for the settings\n     * aoData array.\n     *  @namespace\n     */\n    DataTable.models.oRow = {\n        /**\n         * TR element for the row\n         *  @type node\n         *  @default null\n         */\n        \"nTr\": null,\n        /**\n         * Array of TD elements for each row. This is null until the row has been\n         * created.\n         *  @type array nodes\n         *  @default []\n         */\n        \"anCells\": null,\n        /**\n         * Data object from the original data source for the row. This is either\n         * an array if using the traditional form of DataTables, or an object if\n         * using mData options. The exact type will depend on the passed in\n         * data from the data source, or will be an array if using DOM a data\n         * source.\n         *  @type array|object\n         *  @default []\n         */\n        \"_aData\": [],\n        /**\n         * Sorting data cache - this array is ostensibly the same length as the\n         * number of columns (although each index is generated only as it is\n         * needed), and holds the data that is used for sorting each column in the\n         * row. We do this cache generation at the start of the sort in order that\n         * the formatting of the sort data need be done only once for each cell\n         * per sort. This array should not be read from or written to by anything\n         * other than the master sorting methods.\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_aSortData\": null,\n        /**\n         * Per cell filtering data cache. As per the sort data cache, used to\n         * increase the performance of the filtering in DataTables\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_aFilterData\": null,\n        /**\n         * Filtering data cache. This is the same as the cell filtering cache, but\n         * in this case a string rather than an array. This is easily computed with\n         * a join on `_aFilterData`, but is provided as a cache so the join isn't\n         * needed on every search (memory traded for performance)\n         *  @type array\n         *  @default null\n         *  @private\n         */\n        \"_sFilterRow\": null,\n        /**\n         * Cache of the class name that DataTables has applied to the row, so we\n         * can quickly look at this variable rather than needing to do a DOM check\n         * on className for the nTr property.\n         *  @type string\n         *  @default <i>Empty string</i>\n         *  @private\n         */\n        \"_sRowStripe\": \"\",\n        /**\n         * Denote if the original data source was from the DOM, or the data source\n         * object. This is used for invalidating data, so DataTables can\n         * automatically read data from the original source, unless uninstructed\n         * otherwise.\n         *  @type string\n         *  @default null\n         *  @private\n         */\n        \"src\": null,\n        /**\n         * Index in the aoData array. This saves an indexOf lookup when we have the\n         * object, but want to know the index\n         *  @type integer\n         *  @default -1\n         *  @private\n         */\n        \"idx\": -1\n    };\n    /**\n     * Template object for the column information object in DataTables. This object\n     * is held in the settings aoColumns array and contains all the information that\n     * DataTables needs about each individual column.\n     * Note that this object is related to {@link DataTable.defaults.column}\n     * but this one is the internal data store for DataTables's cache of columns.\n     * It should NOT be manipulated outside of DataTables. Any configuration should\n     * be done through the initialisation options.\n     *  @namespace\n     */\n    DataTable.models.oColumn = {\n        /**\n         * Column index. This could be worked out on-the-fly with $.inArray, but it\n         * is faster to just hold it as a variable\n         *  @type integer\n         *  @default null\n         */\n        \"idx\": null,\n        /**\n         * A list of the columns that sorting should occur on when this column\n         * is sorted. That this property is an array allows multi-column sorting\n         * to be defined for a column (for example first name / last name columns\n         * would benefit from this). The values are integers pointing to the\n         * columns to be sorted on (typically it will be a single integer pointing\n         * at itself, but that doesn't need to be the case).\n         *  @type array\n         */\n        \"aDataSort\": null,\n        /**\n         * Define the sorting directions that are applied to the column, in sequence\n         * as the column is repeatedly sorted upon - i.e. the first value is used\n         * as the sorting direction when the column if first sorted (clicked on).\n         * Sort it again (click again) and it will move on to the next index.\n         * Repeat until loop.\n         *  @type array\n         */\n        \"asSorting\": null,\n        /**\n         * Flag to indicate if the column is searchable, and thus should be included\n         * in the filtering or not.\n         *  @type boolean\n         */\n        \"bSearchable\": null,\n        /**\n         * Flag to indicate if the column is sortable or not.\n         *  @type boolean\n         */\n        \"bSortable\": null,\n        /**\n         * Flag to indicate if the column is currently visible in the table or not\n         *  @type boolean\n         */\n        \"bVisible\": null,\n        /**\n         * Store for manual type assignment using the `column.type` option. This\n         * is held in store so we can manipulate the column's `sType` property.\n         *  @type string\n         *  @default null\n         *  @private\n         */\n        \"_sManualType\": null,\n        /**\n         * Flag to indicate if HTML5 data attributes should be used as the data\n         * source for filtering or sorting. True is either are.\n         *  @type boolean\n         *  @default false\n         *  @private\n         */\n        \"_bAttrSrc\": false,\n        /**\n         * Developer definable function that is called whenever a cell is created (Ajax source,\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n         * allowing you to modify the DOM element (add background colour for example) when the\n         * element is available.\n         *  @type function\n         *  @param {element} nTd The TD node that has been created\n         *  @param {*} sData The Data for the cell\n         *  @param {array|object} oData The data for the whole row\n         *  @param {int} iRow The row index for the aoData data store\n         *  @default null\n         */\n        \"fnCreatedCell\": null,\n        /**\n         * Function to get data from a cell in a column. You should <b>never</b>\n         * access data directly through _aData internally in DataTables - always use\n         * the method attached to this property. It allows mData to function as\n         * required. This function is automatically assigned by the column\n         * initialisation method\n         *  @type function\n         *  @param {array|object} oData The data array/object for the array\n         *    (i.e. aoData[]._aData)\n         *  @param {string} sSpecific The specific data type you want to get -\n         *    'display', 'type' 'filter' 'sort'\n         *  @returns {*} The data for the cell from the given row's data\n         *  @default null\n         */\n        \"fnGetData\": null,\n        /**\n         * Function to set data for a cell in the column. You should <b>never</b>\n         * set the data directly to _aData internally in DataTables - always use\n         * this method. It allows mData to function as required. This function\n         * is automatically assigned by the column initialisation method\n         *  @type function\n         *  @param {array|object} oData The data array/object for the array\n         *    (i.e. aoData[]._aData)\n         *  @param {*} sValue Value to set\n         *  @default null\n         */\n        \"fnSetData\": null,\n        /**\n         * Property to read the value for the cells in the column from the data\n         * source array / object. If null, then the default content is used, if a\n         * function is given then the return from the function is used.\n         *  @type function|int|string|null\n         *  @default null\n         */\n        \"mData\": null,\n        /**\n         * Partner property to mData which is used (only when defined) to get\n         * the data - i.e. it is basically the same as mData, but without the\n         * 'set' option, and also the data fed to it is the result from mData.\n         * This is the rendering method to match the data method of mData.\n         *  @type function|int|string|null\n         *  @default null\n         */\n        \"mRender\": null,\n        /**\n         * Unique header TH/TD element for this column - this is what the sorting\n         * listener is attached to (if sorting is enabled.)\n         *  @type node\n         *  @default null\n         */\n        \"nTh\": null,\n        /**\n         * Unique footer TH/TD element for this column (if there is one). Not used\n         * in DataTables as such, but can be used for plug-ins to reference the\n         * footer for each column.\n         *  @type node\n         *  @default null\n         */\n        \"nTf\": null,\n        /**\n         * The class to apply to all TD elements in the table's TBODY for the column\n         *  @type string\n         *  @default null\n         */\n        \"sClass\": null,\n        /**\n         * When DataTables calculates the column widths to assign to each column,\n         * it finds the longest string in each column and then constructs a\n         * temporary table and reads the widths from that. The problem with this\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n         * string - thus the calculation can go wrong (doing it properly and putting\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\n         * a \"work around\" we provide this option. It will append its value to the\n         * text that is found to be the longest string for the column - i.e. padding.\n         *  @type string\n         */\n        \"sContentPadding\": null,\n        /**\n         * Allows a default value to be given for a column's data, and will be used\n         * whenever a null data source is encountered (this can be because mData\n         * is set to null, or because the data source itself is null).\n         *  @type string\n         *  @default null\n         */\n        \"sDefaultContent\": null,\n        /**\n         * Name for the column, allowing reference to the column by name as well as\n         * by index (needs a lookup to work by name).\n         *  @type string\n         */\n        \"sName\": null,\n        /**\n         * Custom sorting data type - defines which of the available plug-ins in\n         * afnSortData the custom sorting will use - if any is defined.\n         *  @type string\n         *  @default std\n         */\n        \"sSortDataType\": 'std',\n        /**\n         * Class to be applied to the header element when sorting on this column\n         *  @type string\n         *  @default null\n         */\n        \"sSortingClass\": null,\n        /**\n         * Class to be applied to the header element when sorting on this column -\n         * when jQuery UI theming is used.\n         *  @type string\n         *  @default null\n         */\n        \"sSortingClassJUI\": null,\n        /**\n         * Title of the column - what is seen in the TH element (nTh).\n         *  @type string\n         */\n        \"sTitle\": null,\n        /**\n         * Column sorting and filtering type\n         *  @type string\n         *  @default null\n         */\n        \"sType\": null,\n        /**\n         * Width of the column\n         *  @type string\n         *  @default null\n         */\n        \"sWidth\": null,\n        /**\n         * Width of the column when it was first \"encountered\"\n         *  @type string\n         *  @default null\n         */\n        \"sWidthOrig\": null\n    };\n    /*\n     * Developer note: The properties of the object below are given in Hungarian\n     * notation, that was used as the interface for DataTables prior to v1.10, however\n     * from v1.10 onwards the primary interface is camel case. In order to avoid\n     * breaking backwards compatibility utterly with this change, the Hungarian\n     * version is still, internally the primary interface, but is is not documented\n     * - hence the @name tags in each doc comment. This allows a Javascript function\n     * to create a map from Hungarian notation to camel case (going the other direction\n     * would require each property to be listed, which would at around 3K to the size\n     * of DataTables, while this method is about a 0.5K hit.\n     *\n     * Ultimately this does pave the way for Hungarian notation to be dropped\n     * completely, but that is a massive amount of work and will break current\n     * installs (therefore is on-hold until v2).\n     */\n    /**\n     * Initialisation options that can be given to DataTables at initialisation\n     * time.\n     *  @namespace\n     */\n    DataTable.defaults = {\n        /**\n         * An array of data to use for the table, passed in at initialisation which\n         * will be used in preference to any data which is already in the DOM. This is\n         * particularly useful for constructing tables purely in Javascript, for\n         * example with a custom Ajax call.\n         *  @type array\n         *  @default null\n         *  @dtopt Option\n         *  @name DataTable.defaults.data\n         *  @example\n         *    // Using a 2D array data source\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"data\": [\n         *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n         *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n         *        ],\n         *        \"columns\": [\n         *          { \"title\": \"Engine\" },\n         *          { \"title\": \"Browser\" },\n         *          { \"title\": \"Platform\" },\n         *          { \"title\": \"Version\" },\n         *          { \"title\": \"Grade\" }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using an array of objects as a data source (`data`)\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"data\": [\n         *          {\n         *            \"engine\":   \"Trident\",\n         *            \"browser\":  \"Internet Explorer 4.0\",\n         *            \"platform\": \"Win 95+\",\n         *            \"version\":  4,\n         *            \"grade\":    \"X\"\n         *          },\n         *          {\n         *            \"engine\":   \"Trident\",\n         *            \"browser\":  \"Internet Explorer 5.0\",\n         *            \"platform\": \"Win 95+\",\n         *            \"version\":  5,\n         *            \"grade\":    \"C\"\n         *          }\n         *        ],\n         *        \"columns\": [\n         *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n         *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n         *          { \"title\": \"Platform\", \"data\": \"platform\" },\n         *          { \"title\": \"Version\",  \"data\": \"version\" },\n         *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"aaData\": null,\n        /**\n         * If ordering is enabled, then DataTables will perform a first pass sort on\n         * initialisation. You can define which column(s) the sort is performed\n         * upon, and the sorting direction, with this variable. The `sorting` array\n         * should contain an array for each column to be sorted initially containing\n         * the column's index and a direction string ('asc' or 'desc').\n         *  @type array\n         *  @default [[0,'asc']]\n         *  @dtopt Option\n         *  @name DataTable.defaults.order\n         *  @example\n         *    // Sort by 3rd column first, and then 4th column\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"order\": [[2,'asc'], [3,'desc']]\n         *      } );\n         *    } );\n         *    // No initial sorting\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"order\": []\n         *      } );\n         *    } );\n         */\n        \"aaSorting\": [[0,'asc']],\n        /**\n         * This parameter is basically identical to the `sorting` parameter, but\n         * cannot be overridden by user interaction with the table. What this means\n         * is that you could have a column (visible or hidden) which the sorting\n         * will always be forced on first - any sorting after that (from the user)\n         * will then be performed as required. This can be useful for grouping rows\n         * together.\n         *  @type array\n         *  @default null\n         *  @dtopt Option\n         *  @name DataTable.defaults.orderFixed\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"orderFixed\": [[0,'asc']]\n         *      } );\n         *    } )\n         */\n        \"aaSortingFixed\": [],\n        /**\n         * DataTables can be instructed to load data to display in the table from a\n         * Ajax source. This option defines how that Ajax call is made and where to.\n         * The `ajax` property has three different modes of operation, depending on\n         * how it is defined. These are:\n         * * `string` - Set the URL from where the data should be loaded from.\n         * * `object` - Define properties for `jQuery.ajax`.\n         * * `function` - Custom data get function\n         * `string`\n         * --------\n         * As a string, the `ajax` property simply defines the URL from which\n         * DataTables will load data.\n         * `object`\n         * --------\n         * As an object, the parameters in the object are passed to\n         * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n         * of the Ajax request. DataTables has a number of default parameters which\n         * you can override using this option. Please refer to the jQuery\n         * documentation for a full description of the options available, although\n         * the following parameters provide additional options in DataTables or\n         * require special consideration:\n         * * `data` - As with jQuery, `data` can be provided as an object, but it\n         *   can also be used as a function to manipulate the data DataTables sends\n         *   to the server. The function takes a single parameter, an object of\n         *   parameters with the values that DataTables has readied for sending. An\n         *   object may be returned which will be merged into the DataTables\n         *   defaults, or you can add the items to the object that was passed in and\n         *   not return anything from the function. This supersedes `fnServerParams`\n         *   from DataTables 1.9-.\n         * * `dataSrc` - By default DataTables will look for the property `data` (or\n         *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n         *   from an Ajax source or for server-side processing - this parameter\n         *   allows that property to be changed. You can use Javascript dotted\n         *   object notation to get a data source for multiple levels of nesting, or\n         *   it my be used as a function. As a function it takes a single parameter,\n         *   the JSON returned from the server, which can be manipulated as\n         *   required, with the returned value being that used by DataTables as the\n         *   data source for the table. This supersedes `sAjaxDataProp` from\n         *   DataTables 1.9-.\n         *\n         * * `success` - Should not be overridden it is used internally in\n         *   DataTables. To manipulate / transform the data returned by the server\n         *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n         * `function`\n         * ----------\n         * As a function, making the Ajax call is left up to yourself allowing\n         * complete control of the Ajax request. Indeed, if desired, a method other\n         * than Ajax could be used to obtain the required data, such as Web storage\n         * or an AIR database.\n         *\n         * The function is given four parameters and no return is required. The\n         * parameters are:\n         *\n         * 1. _object_ - Data to send to the server\n         * 2. _function_ - Callback function that must be executed when the required\n         *    data has been obtained. That data should be passed into the callback\n         *    as the only parameter\n         * 3. _object_ - DataTables settings object for the table\n         *\n         * Note that this supersedes `fnServerData` from DataTables 1.9-.\n         *  @type string|object|function\n         *  @default null\n         *  @dtopt Option\n         *  @name DataTable.defaults.ajax\n         *  @since 1.10.0\n         * @example\n         *   // Get JSON data from a file via Ajax.\n         *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n         *   $('#example').dataTable( {\n         *     \"ajax\": \"data.json\"\n         *   } );\n         * @example\n         *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n         *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"dataSrc\": \"tableData\"\n         *     }\n         *   } );\n         * @example\n         *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n         *   // from a plain array rather than an array in an object\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"dataSrc\": \"\"\n         *     }\n         *   } );\n         * @example\n         *   // Manipulate the data returned from the server - add a link to data\n         *   // (note this can, should, be done using `render` for the column - this\n         *   // is just a simple example of how the data can be manipulated).\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"dataSrc\": function ( json ) {\n         *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n         *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n         *         }\n         *         return json;\n         *       }\n         *     }\n         *   } );\n         * @example\n         *   // Add data to the request\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"data\": function ( d ) {\n         *         return {\n         *           \"extra_search\": $('#extra').val()\n         *         };\n         *       }\n         *     }\n         *   } );\n         * @example\n         *   // Send request as POST\n         *   $('#example').dataTable( {\n         *     \"ajax\": {\n         *       \"url\": \"data.json\",\n         *       \"type\": \"POST\"\n         *     }\n         *   } );\n         * @example\n         *   // Get the data from localStorage (could interface with a form for\n         *   // adding, editing and removing rows).\n         *   $('#example').dataTable( {\n         *     \"ajax\": function (data, callback, settings) {\n         *       callback(\n         *         JSON.parse( localStorage.getItem('dataTablesData') )\n         *       );\n         *     }\n         *   } );\n         */\n        \"ajax\": null,\n        /**\n         * This parameter allows you to readily specify the entries in the length drop\n         * down menu that DataTables shows when pagination is enabled. It can be\n         * either a 1D array of options which will be used for both the displayed\n         * option and the value, or a 2D array which will use the array in the first\n         * position as the value, and the array in the second position as the\n         * displayed options (useful for language strings such as 'All').\n         *\n         * Note that the `pageLength` property will be automatically set to the\n         * first value given in this array, unless `pageLength` is also provided.\n         *  @type array\n         *  @default [ 10, 25, 50, 100 ]\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.lengthMenu\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n         *      } );\n         *    } );\n         */\n        \"aLengthMenu\": [ 10, 25, 50, 100 ],\n        /**\n         * The `columns` option in the initialisation parameter allows you to define\n         * details about the way individual columns behave. For a full list of\n         * column options that can be set, please see\n         * {@link DataTable.defaults.column}. Note that if you use `columns` to\n         * define your columns, you must have an entry in the array for every single\n         * column that you have in your table (these can be null if you don't which\n         * to specify any options).\n         *  @member\n         *\n         *  @name DataTable.defaults.column\n         */\n        \"aoColumns\": null,\n        /**\n         * Very similar to `columns`, `columnDefs` allows you to target a specific\n         * column, multiple columns, or all columns, using the `targets` property of\n         * each object in the array. This allows great flexibility when creating\n         * tables, as the `columnDefs` arrays can be of any length, targeting the\n         * columns you specifically want. `columnDefs` may use any of the column\n         * options available: {@link DataTable.defaults.column}, but it _must_\n         * have `targets` defined in each object in the array. Values in the `targets`\n         * array may be:\n         *   <ul>\n         *     <li>a string - class name will be matched on the TH for the column</li>\n         *     <li>0 or a positive integer - column index counting from the left</li>\n         *     <li>a negative integer - column index counting from the right</li>\n         *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n         *   </ul>\n         *  @member\n         *\n         *  @name DataTable.defaults.columnDefs\n         */\n        \"aoColumnDefs\": null,\n        /**\n         * Basically the same as `search`, this parameter defines the individual column\n         * filtering state at initialisation time. The array must be of the same size\n         * as the number of columns, and each element be an object with the parameters\n         * `search` and `escapeRegex` (the latter is optional). 'null' is also\n         * accepted and the default will be used.\n         *  @type array\n         *  @default []\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.searchCols\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"searchCols\": [\n         *          null,\n         *          { \"search\": \"My filter\" },\n         *          null,\n         *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n         *        ]\n         *      } );\n         *    } )\n         */\n        \"aoSearchCols\": [],\n        /**\n         * An array of CSS classes that should be applied to displayed rows. This\n         * array may be of any length, and DataTables will apply each class\n         * sequentially, looping when required.\n         *  @type array\n         *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n         *    options</i>\n         *\n         *  @dtopt Option\n         *  @name DataTable.defaults.stripeClasses\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n         *      } );\n         *    } )\n         */\n        \"asStripeClasses\": null,\n        /**\n         * Enable or disable automatic column width calculation. This can be disabled\n         * as an optimisation (it takes some time to calculate the widths) if the\n         * tables widths are passed in using `columns`.\n         *  @type boolean\n         *  @default true\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.autoWidth\n         *\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"autoWidth\": false\n         *      } );\n         *    } );\n         */\n        \"bAutoWidth\": true,\n        /**\n         * Deferred rendering can provide DataTables with a huge speed boost when you\n         * are using an Ajax or JS data source for the table. This option, when set to\n         * true, will cause DataTables to defer the creation of the table elements for\n         * each row until they are needed for a draw - saving a significant amount of\n         * time.\n         *  @type boolean\n         *  @default false\n         *\n         *  @dtopt Features\n         *  @name DataTable.defaults.deferRender\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"ajax\": \"sources/arrays.txt\",\n         *        \"deferRender\": true\n         *      } );\n         *    } );\n         */\n        \"bDeferRender\": false,\n        /**\n         * Replace a DataTable which matches the given selector and replace it with\n         * one which has the properties of the new initialisation object passed. If no\n         * table matches the selector, then the new DataTable will be constructed as\n         * per normal.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Options\n         *  @name DataTable.defaults.destroy\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"srollY\": \"200px\",\n         *        \"paginate\": false\n         *      } );\n         *      // Some time later....\n         *      $('#example').dataTable( {\n         *        \"filter\": false,\n         *        \"destroy\": true\n         *      } );\n         *    } );\n         */\n        \"bDestroy\": false,\n        /**\n         * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n         * that it allows the end user to input multiple words (space separated) and\n         * will match a row containing those words, even if not in the order that was\n         * specified (this allow matching across multiple columns). Note that if you\n         * wish to use filtering in DataTables this must remain 'true' - to remove the\n         * default filtering input box and retain filtering abilities, please use\n         * {@link DataTable.defaults.dom}.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.searching\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"searching\": false\n         *      } );\n         *    } );\n         */\n        \"bFilter\": true,\n        /**\n         * Enable or disable the table information display. This shows information\n         * about the data that is currently visible on the page, including information\n         * about filtered data if that action is being performed.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.info\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"info\": false\n         *      } );\n         *    } );\n         */\n        \"bInfo\": true,\n        /**\n         * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some\n         * slightly different and additional mark-up from what DataTables has\n         * traditionally used).\n         *  @type boolean\n         *  @default false\n         *  @dtopt Features\n         *  @name DataTable.defaults.jQueryUI\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"jQueryUI\": true\n         *      } );\n         *    } );\n         */\n        \"bJQueryUI\": false,\n        /**\n         * Allows the end user to select the size of a formatted page from a select\n         * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.lengthChange\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"lengthChange\": false\n         *      } );\n         *    } );\n         */\n        \"bLengthChange\": true,\n        /**\n         * Enable or disable pagination.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.paging\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"paging\": false\n         *      } );\n         *    } );\n         */\n        \"bPaginate\": true,\n        /**\n         * Enable or disable the display of a 'processing' indicator when the table is\n         * being processed (e.g. a sort). This is particularly useful for tables with\n         * large amounts of data where it can take a noticeable amount of time to sort\n         * the entries.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Features\n         *  @name DataTable.defaults.processing\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"processing\": true\n         *      } );\n         *    } );\n         */\n        \"bProcessing\": false,\n        /**\n         * Retrieve the DataTables object for the given selector. Note that if the\n         * table has already been initialised, this parameter will cause DataTables\n         * to simply return the object that has already been set up - it will not take\n         * account of any changes you might have made to the initialisation object\n         * passed to DataTables (setting this parameter to true is an acknowledgement\n         * that you understand this). `destroy` can be used to reinitialise a table if\n         * you need.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Options\n         *  @name DataTable.defaults.retrieve\n         *  @example\n         *    $(document).ready( function() {\n         *      initTable();\n         *      tableActions();\n         *    } );\n         *    function initTable ()\n         *    {\n         *      return $('#example').dataTable( {\n         *        \"scrollY\": \"200px\",\n         *        \"paginate\": false,\n         *        \"retrieve\": true\n         *      } );\n         *    }\n         *    function tableActions ()\n         *    {\n         *      var table = initTable();\n         *      // perform API operations with oTable\n         *    }\n         */\n        \"bRetrieve\": false,\n        /**\n         * When vertical (y) scrolling is enabled, DataTables will force the height of\n         * the table's viewport to the given height at all times (useful for layout).\n         * However, this can look odd when filtering data down to a small data set,\n         * and the footer is left \"floating\" further down. This parameter (when\n         * enabled) will cause DataTables to collapse the table's viewport down when\n         * the result set will fit within the given Y height.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Options\n         *  @name DataTable.defaults.scrollCollapse\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"scrollY\": \"200\",\n         *        \"scrollCollapse\": true\n         *      } );\n         *    } );\n         */\n        \"bScrollCollapse\": false,\n        /**\n         * Configure DataTables to use server-side processing. Note that the\n         * `ajax` parameter must also be given in order to give DataTables a\n         * source to obtain the required data for each draw.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Features\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverSide\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"serverSide\": true,\n         *        \"ajax\": \"xhr.php\"\n         *      } );\n         *    } );\n         */\n        \"bServerSide\": false,\n        /**\n         * Enable or disable sorting of columns. Sorting of individual columns can be\n         * disabled by the `sortable` option for each column.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.ordering\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"ordering\": false\n         *      } );\n         *    } );\n         */\n        \"bSort\": true,\n        /**\n         * Enable or display DataTables' ability to sort multiple columns at the\n         * same time (activated by shift-click by the user).\n         *  @type boolean\n         *  @default true\n         *  @dtopt Options\n         *  @name DataTable.defaults.orderMulti\n         *  @example\n         *    // Disable multiple column sorting ability\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"orderMulti\": false\n         *      } );\n         *    } );\n         */\n        \"bSortMulti\": true,\n        /**\n         * Allows control over whether DataTables should use the top (true) unique\n         * cell that is found for a single column, or the bottom (false - default).\n         * This is useful when using complex headers.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Options\n         *  @name DataTable.defaults.orderCellsTop\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"orderCellsTop\": true\n         *      } );\n         *    } );\n         */\n        \"bSortCellsTop\": false,\n        /**\n         * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n         * `sorting\\_3` to the columns which are currently being sorted on. This is\n         * presented as a feature switch as it can increase processing time (while\n         * classes are removed and added) so for large data sets you might want to\n         * turn this off.\n         *  @type boolean\n         *  @default true\n         *  @dtopt Features\n         *  @name DataTable.defaults.orderClasses\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"orderClasses\": false\n         *      } );\n         *    } );\n         */\n        \"bSortClasses\": true,\n        /**\n         * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n         * used to save table display information such as pagination information,\n         * display length, filtering and sorting. As such when the end user reloads\n         * the page the display display will match what thy had previously set up.\n         *\n         * Due to the use of `localStorage` the default state saving is not supported\n         * in IE6 or 7. If state saving is required in those browsers, use\n         * `stateSaveCallback` to provide a storage solution such as cookies.\n         *  @type boolean\n         *  @default false\n         *  @dtopt Features\n         *  @name DataTable.defaults.stateSave\n         *  @example\n         *    $(document).ready( function () {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true\n         *      } );\n         *    } );\n         */\n        \"bStateSave\": false,\n        /**\n         * This function is called when a TR element is created (and all TD child\n         * elements have been inserted), or registered if using a DOM source, allowing\n         * manipulation of the TR element (adding classes etc).\n         *  @type function\n         *  @param {node} row \"TR\" element for the current row\n         *  @param {array} data Raw data array for this row\n         *  @param {int} dataIndex The index of this row in the internal aoData array\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.createdRow\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"createdRow\": function( row, data, dataIndex ) {\n         *          // Bold the grade for all 'A' grade browsers\n         *          if ( data[4] == \"A\" )\n         *          {\n         *            $('td:eq(4)', row).html( '<b>A</b>' );\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnCreatedRow\": null,\n        /**\n         * This function is called on every 'draw' event, and allows you to\n         * dynamically modify any aspect you want about the created DOM.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.drawCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"drawCallback\": function( settings ) {\n         *          alert( 'DataTables has redrawn the table' );\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnDrawCallback\": null,\n        /**\n         * Identical to fnHeaderCallback() but for the table footer this function\n         * allows you to modify the table footer on every 'draw' event.\n         *  @type function\n         *  @param {node} foot \"TR\" element for the footer\n         *  @param {array} data Full table data (as derived from the original HTML)\n         *  @param {int} start Index for the current display starting point in the\n         *    display array\n         *  @param {int} end Index for the current display ending point in the\n         *    display array\n         *  @param {array int} display Index array to translate the visual position\n         *    to the full data array\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.footerCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n         *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n         *        }\n         *      } );\n         *    } )\n         */\n        \"fnFooterCallback\": null,\n        /**\n         * When rendering large numbers in the information element for the table\n         * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n         * to have a comma separator for the 'thousands' units (e.g. 1 million is\n         * rendered as \"1,000,000\") to help readability for the end user. This\n         * function will override the default method DataTables uses.\n         *  @type function\n         *  @member\n         *  @param {int} toFormat number to be formatted\n         *  @returns {string} formatted string for DataTables to show the number\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.formatNumber\n         *  @example\n         *    // Format a number using a single quote for the separator (note that\n         *    // this can also be done with the language.thousands option)\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"formatNumber\": function ( toFormat ) {\n         *          return toFormat.toString().replace(\n         *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n         *          );\n         *        };\n         *      } );\n         *    } );\n         */\n        \"fnFormatNumber\": function ( toFormat ) {\n            return toFormat.toString().replace(\n                /\\B(?=(\\d{3})+(?!\\d))/g,\n                this.oLanguage.sThousands\n            );\n        },\n        /**\n         * This function is called on every 'draw' event, and allows you to\n         * dynamically modify the header row. This can be used to calculate and\n         * display useful information about the table.\n         *  @type function\n         *  @param {node} head \"TR\" element for the header\n         *  @param {array} data Full table data (as derived from the original HTML)\n         *  @param {int} start Index for the current display starting point in the\n         *    display array\n         *  @param {int} end Index for the current display ending point in the\n         *    display array\n         *  @param {array int} display Index array to translate the visual position\n         *    to the full data array\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.headerCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"fheaderCallback\": function( head, data, start, end, display ) {\n         *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n         *        }\n         *      } );\n         *    } )\n         */\n        \"fnHeaderCallback\": null,\n        /**\n         * The information element can be used to convey information about the current\n         * state of the table. Although the internationalisation options presented by\n         * DataTables are quite capable of dealing with most customisations, there may\n         * be times where you wish to customise the string further. This callback\n         * allows you to do exactly that.\n         *  @type function\n         *  @param {object} oSettings DataTables settings object\n         *  @param {int} start Starting position in data for the draw\n         *  @param {int} end End position in data for the draw\n         *  @param {int} max Total number of rows in the table (regardless of\n         *    filtering)\n         *  @param {int} total Total number of rows in the data set, after filtering\n         *  @param {string} pre The string that DataTables has formatted using it's\n         *    own rules\n         *  @returns {string} The string to be displayed in the information element.\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.infoCallback\n         *  @example\n         *    $('#example').dataTable( {\n         *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n         *        return start +\" to \"+ end;\n         *      }\n         *    } );\n         */\n        \"fnInfoCallback\": null,\n        /**\n         * Called when the table has been initialised. Normally DataTables will\n         * initialise sequentially and there will be no need for this function,\n         * however, this does not hold true when using external language information\n         * since that is obtained using an async XHR call.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} json The JSON object request from the server - only\n         *    present if client-side Ajax sourced data is used\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.initComplete\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"initComplete\": function(settings, json) {\n         *          alert( 'DataTables has finished its initialisation.' );\n         *        }\n         *      } );\n         *    } )\n         */\n        \"fnInitComplete\": null,\n        /**\n         * Called at the very start of each table draw and can be used to cancel the\n         * draw by returning false, any other return (including undefined) results in\n         * the full draw occurring).\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @returns {boolean} False will cancel the draw, anything else (including no\n         *    return) will allow it to complete.\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.preDrawCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"preDrawCallback\": function( settings ) {\n         *          if ( $('#test').val() == 1 ) {\n         *            return false;\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnPreDrawCallback\": null,\n        /**\n         * This function allows you to 'post process' each row after it have been\n         * generated for each table draw, but before it is rendered on screen. This\n         * function might be used for setting the row class name etc.\n         *  @type function\n         *  @param {node} row \"TR\" element for the current row\n         *  @param {array} data Raw data array for this row\n         *  @param {int} displayIndex The display index for the current table draw\n         *  @param {int} displayIndexFull The index of the data in the full list of\n         *    rows (after filtering)\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.rowCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n         *          // Bold the grade for all 'A' grade browsers\n         *          if ( data[4] == \"A\" ) {\n         *            $('td:eq(4)', row).html( '<b>A</b>' );\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnRowCallback\": null,\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         * This parameter allows you to override the default function which obtains\n         * the data from the server so something more suitable for your application.\n         * For example you could use POST data, or pull information from a Gears or\n         * AIR database.\n         *  @type function\n         *  @member\n         *  @param {string} source HTTP source to obtain the data from (`ajax`)\n         *  @param {array} data A key/value pair object containing the data to send\n         *    to the server\n         *  @param {function} callback to be called on completion of the data get\n         *    process that will draw the data on the page.\n         *  @param {object} settings DataTables settings object\n         *  @dtopt Callbacks\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverData\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"fnServerData\": null,\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         *  It is often useful to send extra data to the server when making an Ajax\n         * request - for example custom filtering information, and this callback\n         * function makes it trivial to send extra information to the server. The\n         * passed in parameter is the data set that has been constructed by\n         * DataTables, and you can add to this or modify it as you require.\n         *  @type function\n         *  @param {array} data Data array (array of objects which are name/value\n         *    pairs) that has been constructed by DataTables and will be sent to the\n         *    server. In the case of Ajax sourced data with server-side processing\n         *    this will be an empty array, for server-side processing there will be a\n         *    significant number of parameters!\n         *  @returns {undefined} Ensure that you modify the data array passed in,\n         *    as this is passed by reference.\n         *  @dtopt Callbacks\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverParams\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"fnServerParams\": null,\n        /**\n         * Load the table state. With this function you can define from where, and how, the\n         * state of a table is loaded. By default DataTables will load from `localStorage`\n         * but you might wish to use a server-side database or cookies.\n         *  @type function\n         *  @member\n         *  @param {object} settings DataTables settings object\n         *  @return {object} The DataTables state object to be loaded\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoadCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateLoadCallback\": function (settings, callback) {\n         *          $.ajax( {\n         *            \"url\": \"/state_load\",\n         *            \"dataType\": \"json\",\n         *            \"success\": function (json) {\n         *              callback( json );\n         *            }\n         *          } );\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateLoadCallback\": function ( settings ) {\n            try {\n                return JSON.parse(\n                    (settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n                        'DataTables_'+settings.sInstance+'_'+location.pathname\n                    )\n                );\n            } catch (e) {}\n        },\n        /**\n         * Callback which allows modification of the saved state prior to loading that state.\n         * This callback is called when the table is loading state from the stored data, but\n         * prior to the settings object being modified by the saved state. Note that for\n         * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n         * a plug-in.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object that is to be loaded\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoadParams\n         *  @example\n         *    // Remove a saved filter, so filtering is never loaded\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateLoadParams\": function (settings, data) {\n         *          data.oSearch.sSearch = \"\";\n         *        }\n         *      } );\n         *    } );\n         *  @example\n         *    // Disallow state loading by returning false\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateLoadParams\": function (settings, data) {\n         *          return false;\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateLoadParams\": null,\n        /**\n         * Callback that is called when the state has been loaded from the state saving method\n         * and the DataTables settings object has been modified as a result of the loaded state.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object that was loaded\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateLoaded\n         *  @example\n         *    // Show an alert with the filtering value that was saved\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateLoaded\": function (settings, data) {\n         *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateLoaded\": null,\n        /**\n         * Save the table state. This function allows you to define where and how the state\n         * information for the table is stored By default DataTables will use `localStorage`\n         * but you might wish to use a server-side database or cookies.\n         *  @type function\n         *  @member\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object to be saved\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateSaveCallback\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateSaveCallback\": function (settings, data) {\n         *          // Send an Ajax request to the server with the state object\n         *          $.ajax( {\n         *            \"url\": \"/state_save\",\n         *            \"data\": data,\n         *            \"dataType\": \"json\",\n         *            \"method\": \"POST\"\n         *            \"success\": function () {}\n         *          } );\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateSaveCallback\": function ( settings, data ) {\n            try {\n                (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n                    'DataTables_'+settings.sInstance+'_'+location.pathname,\n                    JSON.stringify( data )\n                );\n            } catch (e) {}\n        },\n        /**\n         * Callback which allows modification of the state to be saved. Called when the table\n         * has changed state a new state save is required. This method allows modification of\n         * the state saving object prior to actually doing the save, including addition or\n         * other state properties or modification. Note that for plug-in authors, you should\n         * use the `stateSaveParams` event to save parameters for a plug-in.\n         *  @type function\n         *  @param {object} settings DataTables settings object\n         *  @param {object} data The state object to be saved\n         *  @dtopt Callbacks\n         *  @name DataTable.defaults.stateSaveParams\n         *  @example\n         *    // Remove a saved filter, so filtering is never saved\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateSave\": true,\n         *        \"stateSaveParams\": function (settings, data) {\n         *          data.oSearch.sSearch = \"\";\n         *        }\n         *      } );\n         *    } );\n         */\n        \"fnStateSaveParams\": null,\n        /**\n         * Duration for which the saved state information is considered valid. After this period\n         * has elapsed the state will be returned to the default.\n         * Value is given in seconds.\n         *  @type int\n         *  @default 7200 <i>(2 hours)</i>\n         *  @dtopt Options\n         *  @name DataTable.defaults.stateDuration\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"stateDuration\": 60*60*24; // 1 day\n         *      } );\n         *    } )\n         */\n        \"iStateDuration\": 7200,\n        /**\n         * When enabled DataTables will not make a request to the server for the first\n         * page draw - rather it will use the data already on the page (no sorting etc\n         * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n         * is used to indicate that deferred loading is required, but it is also used\n         * to tell DataTables how many records there are in the full table (allowing\n         * the information element and pagination to be displayed correctly). In the case\n         * where a filtering is applied to the table on initial load, this can be\n         * indicated by giving the parameter as an array, where the first element is\n         * the number of records available after filtering and the second element is the\n         * number of records without filtering (allowing the table information element\n         * to be shown correctly).\n         *  @type int | array\n         *  @default null\n         *  @dtopt Options\n         *  @name DataTable.defaults.deferLoading\n         *  @example\n         *    // 57 records available in the table, no filtering applied\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"serverSide\": true,\n         *        \"ajax\": \"scripts/server_processing.php\",\n         *        \"deferLoading\": 57\n         *      } );\n         *    } );\n         *  @example\n         *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"serverSide\": true,\n         *        \"ajax\": \"scripts/server_processing.php\",\n         *        \"deferLoading\": [ 57, 100 ],\n         *        \"search\": {\n         *          \"search\": \"my_filter\"\n         *        }\n         *      } );\n         *    } );\n         */\n        \"iDeferLoading\": null,\n        /**\n         * Number of rows to display on a single page when using pagination. If\n         * feature enabled (`lengthChange`) then the end user will be able to override\n         * this to a custom setting using a pop-up menu.\n         *  @type int\n         *  @default 10\n         *  @dtopt Options\n         *  @name DataTable.defaults.pageLength\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"pageLength\": 50\n         *      } );\n         *    } )\n         */\n        \"iDisplayLength\": 10,\n        /**\n         * Define the starting point for data display when using DataTables with\n         * pagination. Note that this parameter is the number of records, rather than\n         * the page number, so if you have 10 records per page and want to start on\n         * the third page, it should be \"20\".\n         *  @type int\n         *  @default 0\n         *  @dtopt Options\n         *  @name DataTable.defaults.displayStart\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"displayStart\": 20\n         *      } );\n         *    } )\n         */\n        \"iDisplayStart\": 0,\n        /**\n         * By default DataTables allows keyboard navigation of the table (sorting, paging,\n         * and filtering) by adding a `tabindex` attribute to the required elements. This\n         * allows you to tab through the controls and press the enter key to activate them.\n         * The tabindex is default 0, meaning that the tab follows the flow of the document.\n         * You can overrule this using this parameter if you wish. Use a value of -1 to\n         * disable built-in keyboard navigation.\n         *  @type int\n         *  @default 0\n         *  @dtopt Options\n         *  @name DataTable.defaults.tabIndex\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"tabIndex\": 1\n         *      } );\n         *    } );\n         */\n        \"iTabIndex\": 0,\n        /**\n         * Classes that DataTables assigns to the various components and features\n         * that it adds to the HTML table. This allows classes to be configured\n         * during initialisation in addition to through the static\n         * {@link DataTable.ext.oStdClasses} object).\n         *  @namespace\n         *  @name DataTable.defaults.classes\n         */\n        \"oClasses\": {},\n        /**\n         * All strings that DataTables uses in the user interface that it creates\n         * are defined in this object, allowing you to modified them individually or\n         * completely replace them all as required.\n         *  @namespace\n         *  @name DataTable.defaults.language\n         */\n        \"oLanguage\": {\n            /**\n             * Strings that are used for WAI-ARIA labels and controls only (these are not\n             * actually visible on the page, but will be read by screenreaders, and thus\n             * must be internationalised as well).\n             *  @namespace\n             *  @name DataTable.defaults.language.aria\n             */\n            \"oAria\": {\n                /**\n                 * ARIA label that is added to the table headers when the column may be\n                 * sorted ascending by activing the column (click or return when focused).\n                 * Note that the column header is prefixed to this string.\n                 *  @type string\n                 *  @default : activate to sort column ascending\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.aria.sortAscending\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"aria\": {\n                 *            \"sortAscending\": \" - click/return to sort ascending\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sSortAscending\": \": activate to sort column ascending\",\n                /**\n                 * ARIA label that is added to the table headers when the column may be\n                 * sorted descending by activing the column (click or return when focused).\n                 * Note that the column header is prefixed to this string.\n                 *  @type string\n                 *  @default : activate to sort column ascending\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.aria.sortDescending\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"aria\": {\n                 *            \"sortDescending\": \" - click/return to sort descending\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sSortDescending\": \": activate to sort column descending\"\n            },\n            /**\n             * Pagination string used by DataTables for the built-in pagination\n             * control types.\n             *  @namespace\n             *  @name DataTable.defaults.language.paginate\n             */\n            \"oPaginate\": {\n                /**\n                 * Text to use when using the 'full_numbers' type of pagination for the\n                 * button to take the user to the first page.\n                 *  @type string\n                 *  @default First\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.first\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"paginate\": {\n                 *            \"first\": \"First page\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sFirst\": \"First\",\n                /**\n                 * Text to use when using the 'full_numbers' type of pagination for the\n                 * button to take the user to the last page.\n                 *  @type string\n                 *  @default Last\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.last\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"paginate\": {\n                 *            \"last\": \"Last page\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sLast\": \"Last\",\n                /**\n                 * Text to use for the 'next' pagination button (to take the user to the\n                 * next page).\n                 *  @type string\n                 *  @default Next\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.next\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"paginate\": {\n                 *            \"next\": \"Next page\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sNext\": \"Next\",\n                /**\n                 * Text to use for the 'previous' pagination button (to take the user to\n                 * the previous page).\n                 *  @type string\n                 *  @default Previous\n                 *  @dtopt Language\n                 *  @name DataTable.defaults.language.paginate.previous\n                 *  @example\n                 *    $(document).ready( function() {\n                 *      $('#example').dataTable( {\n                 *        \"language\": {\n                 *          \"paginate\": {\n                 *            \"previous\": \"Previous page\"\n                 *          }\n                 *        }\n                 *      } );\n                 *    } );\n                 */\n                \"sPrevious\": \"Previous\"\n            },\n            /**\n             * This string is shown in preference to `zeroRecords` when the table is\n             * empty of data (regardless of filtering). Note that this is an optional\n             * parameter - if it is not given, the value of `zeroRecords` will be used\n             * instead (either the default or given value).\n             *  @type string\n             *  @default No sessions available in table\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.emptyTable\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"emptyTable\": \"No sessions available in table\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sEmptyTable\": \"No sessions available in table\",\n            /**\n             * This string gives information to the end user about the information\n             * that is current on display on the page. The following tokens can be\n             * used in the string and will be dynamically replaced as the table\n             * display updates. This tokens can be placed anywhere in the string, or\n             * removed as needed by the language requires:\n             *\n             * * `\\_START\\_` - Display index of the first record on the current page\n             * * `\\_END\\_` - Display index of the last record on the current page\n             * * `\\_TOTAL\\_` - Number of records in the table after filtering\n             * * `\\_MAX\\_` - Number of records in the table without filtering\n             * * `\\_PAGE\\_` - Current page number\n             * * `\\_PAGES\\_` - Total number of pages of data in the table\n             *  @type string\n             *  @default Showing _START_ to _END_ of _TOTAL_ entries\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.info\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n            /**\n             * Display information string for when the table is empty. Typically the\n             * format of this string should match `info`.\n             *  @type string\n             *  @default Showing 0 to 0 of 0 entries\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoEmpty\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"infoEmpty\": \"No entries to show\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n            /**\n             * When a user filters the information in a table, this string is appended\n             * to the information (`info`) to give an idea of how strong the filtering\n             * is. The variable _MAX_ is dynamically updated.\n             *  @type string\n             *  @default (filtered from _MAX_ total entries)\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoFiltered\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n            /**\n             * If can be useful to append extra information to the info string at times,\n             * and this variable does exactly that. This information will be appended to\n             * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n             * being used) at all times.\n             *  @type string\n             *  @default <i>Empty string</i>\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.infoPostFix\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"infoPostFix\": \"All records shown are derived from real information.\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sInfoPostFix\": \"\",\n            /**\n             * This decimal place operator is a little different from the other\n             * language options since DataTables doesn't output floating point\n             * numbers, so it won't ever use this for display of a number. Rather,\n             * what this parameter does is modify the sort methods of the table so\n             * that numbers which are in a format which has a character other than\n             * a period (`.`) as a decimal place will be sorted numerically.\n             *\n             * Note that numbers with different decimal places cannot be shown in\n             * the same table and still be sortable, the table must be consistent.\n             * However, multiple different tables on the page can use different\n             * decimal place characters.\n             *  @type string\n             *  @default\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.decimal\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"decimal\": \",\"\n             *          \"thousands\": \".\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sDecimal\": \"\",\n            /**\n             * DataTables has a build in number formatter (`formatNumber`) which is\n             * used to format large numbers that are used in the table information.\n             * By default a comma is used, but this can be trivially changed to any\n             * character you wish with this parameter.\n             *  @type string\n             *  @default ,\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.thousands\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"thousands\": \"'\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sThousands\": \",\",\n            /**\n             * Detail the action that will be taken when the drop down menu for the\n             * pagination length option is changed. The '_MENU_' variable is replaced\n             * with a default select list of 10, 25, 50 and 100, and can be replaced\n             * with a custom select box if required.\n             *  @type string\n             *  @default Show _MENU_ entries\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.lengthMenu\n             *  @example\n             *    // Language change only\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"lengthMenu\": \"Display _MENU_ records\"\n             *        }\n             *      } );\n             *    } );\n             *  @example\n             *    // Language and options change\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"lengthMenu\": 'Display <select>'+\n             *            '<option value=\"10\">10</option>'+\n             *            '<option value=\"20\">20</option>'+\n             *            '<option value=\"30\">30</option>'+\n             *            '<option value=\"40\">40</option>'+\n             *            '<option value=\"50\">50</option>'+\n             *            '<option value=\"-1\">All</option>'+\n             *            '</select> records'\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sLengthMenu\": \"Show _MENU_ entries\",\n            /**\n             * When using Ajax sourced data and during the first draw when DataTables is\n             * gathering the data, this message is shown in an empty row in the table to\n             * indicate to the end user the the data is being loaded. Note that this\n             * parameter is not used when loading data by server-side processing, just\n             * Ajax sourced data with client-side processing.\n             *  @type string\n             *  @default Loading...\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.loadingRecords\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"loadingRecords\": \"Please wait - loading...\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sLoadingRecords\": \"Loading...\",\n            /**\n             * Text which is displayed when the table is processing a user action\n             * (usually a sort command or similar).\n             *  @type string\n             *  @default Processing...\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.processing\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"processing\": \"DataTables is currently busy\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sProcessing\": \"Processing...\",\n            /**\n             * Details the actions that will be taken when the user types into the\n             * filtering input text box. The variable \"_INPUT_\", if used in the string,\n             * is replaced with the HTML text box for the filtering input allowing\n             * control over where it appears in the string. If \"_INPUT_\" is not given\n             * then the input box is appended to the string automatically.\n             *  @type string\n             *  @default Search:\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.search\n             *  @example\n             *    // Input text box will be appended at the end automatically\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"search\": \"Filter records:\"\n             *        }\n             *      } );\n             *    } );\n             *  @example\n             *    // Specify where the filter should appear\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"search\": \"Apply filter _INPUT_ to table\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sSearch\": \"Search:\",\n            /**\n             * Assign a `placeholder` attribute to the search `input` element\n             *  @type string\n             *  @default\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.searchPlaceholder\n             */\n            \"sSearchPlaceholder\": \"\",\n            /**\n             * All of the language information can be stored in a file on the\n             * server-side, which DataTables will look up if this parameter is passed.\n             * It must store the URL of the language file, which is in a JSON format,\n             * and the object has the same properties as the oLanguage object in the\n             * initialiser object (i.e. the above parameters). Please refer to one of\n             * the example language files to see how this works in action.\n             *  @type string\n             *  @default <i>Empty string - i.e. disabled</i>\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.url\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sUrl\": \"\",\n            /**\n             * Text shown inside the table records when the is no information to be\n             * displayed after filtering. `emptyTable` is shown when there is simply no\n             * information in the table at all (regardless of filtering).\n             *  @type string\n             *  @default No motivation message found\n             *  @dtopt Language\n             *  @name DataTable.defaults.language.zeroRecords\n             *  @example\n             *    $(document).ready( function() {\n             *      $('#example').dataTable( {\n             *        \"language\": {\n             *          \"zeroRecords\": \"No sessions to display\"\n             *        }\n             *      } );\n             *    } );\n             */\n            \"sZeroRecords\": \"No motivation message found\"\n        },\n        /**\n         * This parameter allows you to have define the global filtering state at\n         * initialisation time. As an object the `search` parameter must be\n         * defined, but all other parameters are optional. When `regex` is true,\n         * the search string will be treated as a regular expression, when false\n         * (default) it will be treated as a straight string. When `smart`\n         * DataTables will use it's smart filtering methods (to word match at\n         * any point in the data), when false this will not be done.\n         *  @namespace\n         *  @extends DataTable.models.oSearch\n         *  @dtopt Options\n         *  @name DataTable.defaults.search\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"search\": {\"search\": \"Initial search\"}\n         *      } );\n         *    } )\n         */\n        \"oSearch\": $.extend( {}, DataTable.models.oSearch ),\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         * By default DataTables will look for the property `data` (or `aaData` for\n         * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n         * source or for server-side processing - this parameter allows that\n         * property to be changed. You can use Javascript dotted object notation to\n         * get a data source for multiple levels of nesting.\n         *  @type string\n         *  @default data\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.ajaxDataProp\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sAjaxDataProp\": \"data\",\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         * You can instruct DataTables to load data from an external\n         * source using this parameter (use aData if you want to pass data in you\n         * already have). Simply provide a url a JSON object can be obtained from.\n         *  @type string\n         *  @default null\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.ajaxSource\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sAjaxSource\": null,\n        /**\n         * This initialisation variable allows you to specify exactly where in the\n         * DOM you want DataTables to inject the various controls it adds to the page\n         * (for example you might want the pagination controls at the top of the\n         * table). DIV elements (with or without a custom class) can also be added to\n         * aid styling. The follow syntax is used:\n         *   <ul>\n         *     <li>The following options are allowed:\n         *       <ul>\n         *         <li>'l' - Length changing</li>\n         *         <li>'f' - Filtering input</li>\n         *         <li>'t' - The table!</li>\n         *         <li>'i' - Information</li>\n         *         <li>'p' - Pagination</li>\n         *         <li>'r' - pRocessing</li>\n         *       </ul>\n         *     </li>\n         *     <li>The following constants are allowed:\n         *       <ul>\n         *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr\n         * ui-helper-clearfix')</li>\n         *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br\n         * ui-helper-clearfix')</li>\n         *       </ul>\n         *     </li>\n         *     <li>The following syntax is expected:\n         *       <ul>\n         *         <li>'&lt;' and '&gt;' - div elements</li>\n         *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n         *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n         *       </ul>\n         *     </li>\n         *     <li>Examples:\n         *       <ul>\n         *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n         *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n         *       </ul>\n         *     </li>\n         *   </ul>\n         *  @type string\n         *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n         *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n         *  @dtopt Options\n         *  @name DataTable.defaults.dom\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n         *      } );\n         *    } );\n         */\n        \"sDom\": \"lfrtip\",\n        /**\n         * Search delay option. This will throttle full table searches that use the\n         * DataTables provided search input element (it does not effect calls to\n         * `dt-api search()`, providing a delay before the search is made.\n         *  @type integer\n         *  @default 0\n         *  @dtopt Options\n         *  @name DataTable.defaults.searchDelay\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"searchDelay\": 200\n         *      } );\n         *    } )\n         */\n        \"searchDelay\": null,\n        /**\n         * DataTables features six different built-in options for the buttons to\n         * display for pagination control:\n         *\n         * * `numbers` - Page number buttons only\n         * * `simple` - 'Previous' and 'Next' buttons only\n         * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n         * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n         * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n         * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n         * Further methods can be added using {@link DataTable.ext.oPagination}.\n         *  @type string\n         *  @default simple_numbers\n         *  @dtopt Options\n         *  @name DataTable.defaults.pagingType\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"pagingType\": \"full_numbers\"\n         *      } );\n         *    } )\n         */\n        \"sPaginationType\": \"simple_numbers\",\n        /**\n         * Enable horizontal scrolling. When a table is too wide to fit into a\n         * certain layout, or you have a large number of columns in the table, you\n         * can enable x-scrolling to show the table in a viewport, which can be\n         * scrolled. This property can be `true` which will allow the table to\n         * scroll horizontally when needed, or any CSS unit, or a number (in which\n         * case it will be treated as a pixel measurement). Setting as simply `true`\n         * is recommended.\n         *  @type boolean|string\n         *  @default <i>blank string - i.e. disabled</i>\n         *  @dtopt Features\n         *  @name DataTable.defaults.scrollX\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"scrollX\": true,\n         *        \"scrollCollapse\": true\n         *      } );\n         *    } );\n         */\n        \"sScrollX\": \"\",\n        /**\n         * This property can be used to force a DataTable to use more width than it\n         * might otherwise do when x-scrolling is enabled. For example if you have a\n         * table which requires to be well spaced, this parameter is useful for\n         * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n         * any CSS unit, or a number (in which case it will be treated as a pixel\n         * measurement).\n         *  @type string\n         *  @default <i>blank string - i.e. disabled</i>\n         *  @dtopt Options\n         *  @name DataTable.defaults.scrollXInner\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"scrollX\": \"100%\",\n         *        \"scrollXInner\": \"110%\"\n         *      } );\n         *    } );\n         */\n        \"sScrollXInner\": \"\",\n        /**\n         * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n         * to the given height, and enable scrolling for any data which overflows the\n         * current viewport. This can be used as an alternative to paging to display\n         * a lot of data in a small area (although paging and scrolling can both be\n         * enabled at the same time). This property can be any CSS unit, or a number\n         * (in which case it will be treated as a pixel measurement).\n         *  @type string\n         *  @default <i>blank string - i.e. disabled</i>\n         *  @dtopt Features\n         *  @name DataTable.defaults.scrollY\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"scrollY\": \"200px\",\n         *        \"paginate\": false\n         *      } );\n         *    } );\n         */\n        \"sScrollY\": \"\",\n        /**\n         * __Deprecated__ The functionality provided by this parameter has now been\n         * superseded by that provided through `ajax`, which should be used instead.\n         * Set the HTTP method that is used to make the Ajax call for server-side\n         * processing or Ajax sourced data.\n         *  @type string\n         *  @default GET\n         *  @dtopt Options\n         *  @dtopt Server-side\n         *  @name DataTable.defaults.serverMethod\n         *  @deprecated 1.10. Please use `ajax` for this functionality now.\n         */\n        \"sServerMethod\": \"GET\",\n        /**\n         * DataTables makes use of renderers when displaying HTML elements for\n         * a table. These renderers can be added or modified by plug-ins to\n         * generate suitable mark-up for a site. For example the Bootstrap\n         * integration plug-in for DataTables uses a paging button renderer to\n         * display pagination buttons in the mark-up required by Bootstrap.\n         * For further information about the renderers available see\n         * DataTable.ext.renderer\n         *  @type string|object\n         *  @default null\n         *  @name DataTable.defaults.renderer\n         */\n        \"renderer\": null,\n        /**\n         * Set the data property name that DataTables should use to get a row's id\n         * to set as the `id` property in the node.\n         *  @type string\n         *  @default DT_RowId\n         *  @name DataTable.defaults.rowId\n         */\n        \"rowId\": \"DT_RowId\"\n    };\n    _fnHungarianMap( DataTable.defaults );\n    /*\n     * Developer note - See note in model.defaults.js about the use of Hungarian\n     * notation and camel case.\n     */\n    /**\n     * Column options that can be given to DataTables at initialisation time.\n     *  @namespace\n     */\n    DataTable.defaults.column = {\n        /**\n         * Define which column(s) an order will occur on for this column. This\n         * allows a column's ordering to take multiple columns into account when\n         * doing a sort or use the data from a different column. For example first\n         * name / last name columns make sense to do a multi-column sort over the\n         * two columns.\n         *  @type array|int\n         *  @default null <i>Takes the value of the column index automatically</i>\n         *  @name DataTable.defaults.column.orderData\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n         *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n         *          { \"orderData\": 2, \"targets\": [ 2 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"orderData\": [ 0, 1 ] },\n         *          { \"orderData\": [ 1, 0 ] },\n         *          { \"orderData\": 2 },\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"aDataSort\": null,\n        \"iDataSort\": -1,\n        /**\n         * You can control the default ordering direction, and even alter the\n         * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n         * using this parameter.\n         *  @type array\n         *  @default [ 'asc', 'desc' ]\n         *  @name DataTable.defaults.column.orderSequence\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n         *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n         *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          null,\n         *          { \"orderSequence\": [ \"asc\" ] },\n         *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n         *          { \"orderSequence\": [ \"desc\" ] },\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"asSorting\": [ 'asc', 'desc' ],\n        /**\n         * Enable or disable filtering on the data in this column.\n         *  @type boolean\n         *  @default true\n         *  @name DataTable.defaults.column.searchable\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"searchable\": false, \"targets\": [ 0 ] }\n         *        ] } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"searchable\": false },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ] } );\n         *    } );\n         */\n        \"bSearchable\": true,\n        /**\n         * Enable or disable ordering on this column.\n         *  @type boolean\n         *  @default true\n         *  @name DataTable.defaults.column.orderable\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"orderable\": false, \"targets\": [ 0 ] }\n         *        ] } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"orderable\": false },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ] } );\n         *    } );\n         */\n        \"bSortable\": true,\n        /**\n         * Enable or disable the display of this column.\n         *  @type boolean\n         *  @default true\n         *  @name DataTable.defaults.column.visible\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"visible\": false, \"targets\": [ 0 ] }\n         *        ] } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"visible\": false },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ] } );\n         *    } );\n         */\n        \"bVisible\": true,\n        /**\n         * Developer definable function that is called whenever a cell is created (Ajax source,\n         * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n         * allowing you to modify the DOM element (add background colour for example) when the\n         * element is available.\n         *  @type function\n         *  @param {element} td The TD node that has been created\n         *  @param {*} cellData The Data for the cell\n         *  @param {array|object} rowData The data for the whole row\n         *  @param {int} row The row index for the aoData data store\n         *  @param {int} col The column index for aoColumns\n         *  @name DataTable.defaults.column.createdCell\n         *  @dtopt Columns\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [3],\n         *          \"createdCell\": function (td, cellData, rowData, row, col) {\n         *            if ( cellData == \"1.7\" ) {\n         *              $(td).css('color', 'blue')\n         *            }\n         *          }\n         *        } ]\n         *      });\n         *    } );\n         */\n        \"fnCreatedCell\": null,\n        /**\n         * This parameter has been replaced by `data` in DataTables to ensure naming\n         * consistency. `dataProp` can still be used, as there is backwards\n         * compatibility in DataTables for this option, but it is strongly\n         * recommended that you use `data` in preference to `dataProp`.\n         *  @name DataTable.defaults.column.dataProp\n         */\n        /**\n         * This property can be used to read data from any data source property,\n         * including deeply nested objects / properties. `data` can be given in a\n         * number of different ways which effect its behaviour:\n         *\n         * * `integer` - treated as an array index for the data source. This is the\n         *   default that DataTables uses (incrementally increased for each column).\n         * * `string` - read an object property from the data source. There are\n         *   three 'special' options that can be used in the string to alter how\n         *   DataTables reads the data from the source object:\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n         *      Javascript to read from nested objects, so to can the options\n         *      specified in `data`. For example: `browser.version` or\n         *      `browser.name`. If your object parameter name contains a period, use\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\n         *    * `[]` - Array notation. DataTables can automatically combine data\n         *      from and array source, joining the data with the characters provided\n         *      between the two brackets. For example: `name[, ]` would provide a\n         *      comma-space separated list from the source array. If no characters\n         *      are provided between the brackets, the original array source is\n         *      returned.\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\n         *      execute a function of the name given. For example: `browser()` for a\n         *      simple function on the data source, `browser.version()` for a\n         *      function in a nested property or even `browser().version` to get an\n         *      object property if the function called returns an object. Note that\n         *      function notation is recommended for use in `render` rather than\n         *      `data` as it is much simpler to use as a renderer.\n         * * `null` - use the original data source for the row rather than plucking\n         *   data directly from it. This action has effects on two other\n         *   initialisation options:\n         *    * `defaultContent` - When null is given as the `data` option and\n         *      `defaultContent` is specified for the column, the value defined by\n         *      `defaultContent` will be used for the cell.\n         *    * `render` - When null is used for the `data` option and the `render`\n         *      option is specified for the column, the whole data source for the\n         *      row is used for the renderer.\n         * * `function` - the function given will be executed whenever DataTables\n         *   needs to set or get the data for a cell in the column. The function\n         *   takes three parameters:\n         *    * Parameters:\n         *      * `{array|object}` The data source for the row\n         *      * `{string}` The type call data requested - this will be 'set' when\n         *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n         *        when gathering data. Note that when `undefined` is given for the\n         *        type DataTables expects to get the raw data for the object back<\n         *      * `{*}` Data to set when the second parameter is 'set'.\n         *    * Return:\n         *      * The return value from the function is not required when 'set' is\n         *        the type of call, but otherwise the return is what will be used\n         *        for the data requested.\n         *\n         * Note that `data` is a getter and setter option. If you just require\n         * formatting of data for output, you will likely want to use `render` which\n         * is simply a getter and thus simpler to use.\n         *\n         * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n         * name change reflects the flexibility of this property and is consistent\n         * with the naming of mRender. If 'mDataProp' is given, then it will still\n         * be used by DataTables, as it automatically maps the old name to the new\n         * if required.\n         *  @type string|int|function|null\n         *  @default null <i>Use automatically calculated column index</i>\n         *  @name DataTable.defaults.column.data\n         *  @dtopt Columns\n         *  @example\n         *    // Read table data from objects\n         *    // JSON structure for each row:\n         *    //   {\n         *    //      \"engine\": {value},\n         *    //      \"browser\": {value},\n         *    //      \"platform\": {value},\n         *    //      \"version\": {value},\n         *    //      \"grade\": {value}\n         *    //   }\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"ajaxSource\": \"sources/objects.txt\",\n         *        \"columns\": [\n         *          { \"data\": \"engine\" },\n         *          { \"data\": \"browser\" },\n         *          { \"data\": \"platform\" },\n         *          { \"data\": \"version\" },\n         *          { \"data\": \"grade\" }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Read information from deeply nested objects\n         *    // JSON structure for each row:\n         *    //   {\n         *    //      \"engine\": {value},\n         *    //      \"browser\": {value},\n         *    //      \"platform\": {\n         *    //         \"inner\": {value}\n         *    //      },\n         *    //      \"details\": [\n         *    //         {value}, {value}\n         *    //      ]\n         *    //   }\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"ajaxSource\": \"sources/deep.txt\",\n         *        \"columns\": [\n         *          { \"data\": \"engine\" },\n         *          { \"data\": \"browser\" },\n         *          { \"data\": \"platform.inner\" },\n         *          { \"data\": \"platform.details.0\" },\n         *          { \"data\": \"platform.details.1\" }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `data` as a function to provide different information for\n         *    // sorting, filtering and display. In this case, currency (price)\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": function ( source, type, val ) {\n         *            if (type === 'set') {\n         *              source.price = val;\n         *              // Store the computed dislay and filter values for efficiency\n         *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n         *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n         *              return;\n         *            }\n         *            else if (type === 'display') {\n         *              return source.price_display;\n         *            }\n         *            else if (type === 'filter') {\n         *              return source.price_filter;\n         *            }\n         *            // 'sort', 'type' and undefined all just use the integer\n         *            return source.price;\n         *          }\n         *        } ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using default content\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": null,\n         *          \"defaultContent\": \"Click to edit\"\n         *        } ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using array notation - outputting a list from an array\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": \"name[, ]\"\n         *        } ]\n         *      } );\n         *    } );\n         *\n         */\n        \"mData\": null,\n        /**\n         * This property is the rendering partner to `data` and it is suggested that\n         * when you want to manipulate data for display (including filtering,\n         * sorting etc) without altering the underlying data for the table, use this\n         * property. `render` can be considered to be the the read only companion to\n         * `data` which is read / write (then as such more complex). Like `data`\n         * this option can be given in a number of different ways to effect its\n         * behaviour:\n         *\n         * * `integer` - treated as an array index for the data source. This is the\n         *   default that DataTables uses (incrementally increased for each column).\n         * * `string` - read an object property from the data source. There are\n         *   three 'special' options that can be used in the string to alter how\n         *   DataTables reads the data from the source object:\n         *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n         *      Javascript to read from nested objects, so to can the options\n         *      specified in `data`. For example: `browser.version` or\n         *      `browser.name`. If your object parameter name contains a period, use\n         *      `\\\\` to escape it - i.e. `first\\\\.name`.\n         *    * `[]` - Array notation. DataTables can automatically combine data\n         *      from and array source, joining the data with the characters provided\n         *      between the two brackets. For example: `name[, ]` would provide a\n         *      comma-space separated list from the source array. If no characters\n         *      are provided between the brackets, the original array source is\n         *      returned.\n         *    * `()` - Function notation. Adding `()` to the end of a parameter will\n         *      execute a function of the name given. For example: `browser()` for a\n         *      simple function on the data source, `browser.version()` for a\n         *      function in a nested property or even `browser().version` to get an\n         *      object property if the function called returns an object.\n         * * `object` - use different data for the different data types requested by\n         *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n         *   of the object is the data type the property refers to and the value can\n         *   defined using an integer, string or function using the same rules as\n         *   `render` normally does. Note that an `_` option _must_ be specified.\n         *   This is the default value to use if you haven't specified a value for\n         *   the data type requested by DataTables.\n         * * `function` - the function given will be executed whenever DataTables\n         *   needs to set or get the data for a cell in the column. The function\n         *   takes three parameters:\n         *    * Parameters:\n         *      * {array|object} The data source for the row (based on `data`)\n         *      * {string} The type call data requested - this will be 'filter',\n         *        'display', 'type' or 'sort'.\n         *      * {array|object} The full data source for the row (not based on\n         *        `data`)\n         *    * Return:\n         *      * The return value from the function is what will be used for the\n         *        data requested.\n         *  @type string|int|function|object|null\n         *  @default null Use the data source value.\n         *  @name DataTable.defaults.column.render\n         *  @dtopt Columns\n         *  @example\n         *    // Create a comma separated list from an array of objects\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"ajaxSource\": \"sources/deep.txt\",\n         *        \"columns\": [\n         *          { \"data\": \"engine\" },\n         *          { \"data\": \"browser\" },\n         *          {\n         *            \"data\": \"platform\",\n         *            \"render\": \"[, ].name\"\n         *          }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Execute a function to obtain data\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": null, // Use the full data source object for the renderer's source\n         *          \"render\": \"browserName()\"\n         *        } ]\n         *      } );\n         *    } );\n         *  @example\n         *    // As an object, extracting different data for the different types\n         *    // This would be used with a data source such as:\n         *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n         *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n         *    // (which has both forms) is used for filtering for if a user inputs either format, while\n         *    // the formatted phone number is the one that is shown in the table.\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": null, // Use the full data source object for the renderer's source\n         *          \"render\": {\n         *            \"_\": \"phone\",\n         *            \"filter\": \"phone_filter\",\n         *            \"display\": \"phone_display\"\n         *          }\n         *        } ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Use as a function to create a link from the data source\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"data\": \"download_link\",\n         *          \"render\": function ( data, type, full ) {\n         *            return '<a href=\"'+data+'\">Download</a>';\n         *          }\n         *        } ]\n         *      } );\n         *    } );\n         */\n        \"mRender\": null,\n        /**\n         * Change the cell type created for the column - either TD cells or TH cells. This\n         * can be useful as TH cells have semantic meaning in the table body, allowing them\n         * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n         *  @type string\n         *  @default td\n         *  @name DataTable.defaults.column.cellType\n         *  @dtopt Columns\n         *  @example\n         *    // Make the first column use TH cells\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [ {\n         *          \"targets\": [ 0 ],\n         *          \"cellType\": \"th\"\n         *        } ]\n         *      } );\n         *    } );\n         */\n        \"sCellType\": \"td\",\n        /**\n         * Class to give to each cell in this column.\n         *  @type string\n         *  @default <i>Empty string</i>\n         *  @name DataTable.defaults.column.class\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"class\": \"my_class\" },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sClass\": \"\",\n        /**\n         * When DataTables calculates the column widths to assign to each column,\n         * it finds the longest string in each column and then constructs a\n         * temporary table and reads the widths from that. The problem with this\n         * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n         * string - thus the calculation can go wrong (doing it properly and putting\n         * it into an DOM object and measuring that is horribly(!) slow). Thus as\n         * a \"work around\" we provide this option. It will append its value to the\n         * text that is found to be the longest string for the column - i.e. padding.\n         * Generally you shouldn't need this!\n         *  @type string\n         *  @default <i>Empty string<i>\n         *  @name DataTable.defaults.column.contentPadding\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          null,\n         *          null,\n         *          null,\n         *          {\n         *            \"contentPadding\": \"mmm\"\n         *          }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sContentPadding\": \"\",\n        /**\n         * Allows a default value to be given for a column's data, and will be used\n         * whenever a null data source is encountered (this can be because `data`\n         * is set to null, or because the data source itself is null).\n         *  @type string\n         *  @default null\n         *  @name DataTable.defaults.column.defaultContent\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          {\n         *            \"data\": null,\n         *            \"defaultContent\": \"Edit\",\n         *            \"targets\": [ -1 ]\n         *          }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          null,\n         *          null,\n         *          null,\n         *          {\n         *            \"data\": null,\n         *            \"defaultContent\": \"Edit\"\n         *          }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sDefaultContent\": null,\n        /**\n         * This parameter is only used in DataTables' server-side processing. It can\n         * be exceptionally useful to know what columns are being displayed on the\n         * client side, and to map these to database fields. When defined, the names\n         * also allow DataTables to reorder information from the server if it comes\n         * back in an unexpected order (i.e. if you switch your columns around on the\n         * client-side, your server-side code does not also need updating).\n         *  @type string\n         *  @default <i>Empty string</i>\n         *  @name DataTable.defaults.column.name\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n         *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n         *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n         *          { \"name\": \"version\", \"targets\": [ 3 ] },\n         *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"name\": \"engine\" },\n         *          { \"name\": \"browser\" },\n         *          { \"name\": \"platform\" },\n         *          { \"name\": \"version\" },\n         *          { \"name\": \"grade\" }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sName\": \"\",\n        /**\n         * Defines a data source type for the ordering which can be used to read\n         * real-time information from the table (updating the internally cached\n         * version) prior to ordering. This allows ordering to occur on user\n         * editable elements such as form inputs.\n         *  @type string\n         *  @default std\n         *  @name DataTable.defaults.column.orderDataType\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n         *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n         *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n         *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          null,\n         *          null,\n         *          { \"orderDataType\": \"dom-text\" },\n         *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n         *          { \"orderDataType\": \"dom-select\" },\n         *          { \"orderDataType\": \"dom-checkbox\" }\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sSortDataType\": \"std\",\n        /**\n         * The title of this column.\n         *  @type string\n         *  @default null <i>Derived from the 'TH' value for this column in the\n         *    original HTML table.</i>\n         *  @name DataTable.defaults.column.title\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"title\": \"My column title\" },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sTitle\": null,\n        /**\n         * The type allows you to specify how the data for this column will be\n         * ordered. Four types (string, numeric, date and html (which will strip\n         * HTML tags before ordering)) are currently available. Note that only date\n         * formats understood by Javascript's Date() object will be accepted as type\n         * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n         * 'numeric', 'date' or 'html' (by default). Further types can be adding\n         * through plug-ins.\n         *  @type string\n         *  @default null <i>Auto-detected from raw data</i>\n         *  @name DataTable.defaults.column.type\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"type\": \"html\", \"targets\": [ 0 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"type\": \"html\" },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sType\": null,\n        /**\n         * Defining the width of the column, this parameter may take any CSS value\n         * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n         * been given a specific width through this interface ensuring that the table\n         * remains readable.\n         *  @type string\n         *  @default null <i>Automatic</i>\n         *\n         *  @name DataTable.defaults.column.width\n         *  @dtopt Columns\n         *  @example\n         *    // Using `columnDefs`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columnDefs\": [\n         *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n         *        ]\n         *      } );\n         *    } );\n         *  @example\n         *    // Using `columns`\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"columns\": [\n         *          { \"width\": \"20%\" },\n         *          null,\n         *          null,\n         *          null,\n         *          null\n         *        ]\n         *      } );\n         *    } );\n         */\n        \"sWidth\": null\n    };\n    _fnHungarianMap( DataTable.defaults.column );\n    /**\n     * DataTables settings object - this holds all the information needed for a\n     * given table, including configuration, data and current application of the\n     * table options. DataTables does not have a single instance for each DataTable\n     * with the settings attached to that instance, but rather instances of the\n     * DataTable \"class\" are created on-the-fly as needed (typically by a\n     * $().dataTable() call) and the settings object is then applied to that\n     * instance.\n     * Note that this object is related to {@link DataTable.defaults} but this\n     * one is the internal data store for DataTables's cache of columns. It should\n     * NOT be manipulated outside of DataTables. Any configuration should be done\n     * through the initialisation options.\n     *  @namespace\n     *  @todo Really should attach the settings object to individual instances so we\n     *    don't need to create new instances on each $().dataTable() call (if the\n     *    table already exists). It would also save passing oSettings around and\n     *    into every single function. However, this is a very significant\n     *    architecture change for DataTables and will almost certainly break\n     *    backwards compatibility with older installations. This is something that\n     *    will be done in 2.0.\n     */\n    DataTable.models.oSettings = {\n        /**\n         * Primary features of DataTables and their enablement state.\n         *  @namespace\n         */\n        \"oFeatures\": {\n            /**\n             * Flag to say if DataTables should automatically try to calculate the\n             * optimum table and columns widths (true) or not (false).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bAutoWidth\": null,\n            /**\n             * Delay the creation of TR and TD elements until they are actually\n             * needed by a driven page draw. This can give a significant speed\n             * increase for Ajax source and Javascript source data, but makes no\n             * difference at all fro DOM and server-side processing tables.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bDeferRender\": null,\n            /**\n             * Enable filtering on the table or not. Note that if this is disabled\n             * then there is no filtering at all on the table, including fnFilter.\n             * To just remove the filtering input use sDom and remove the 'f' option.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bFilter\": null,\n            /**\n             * Table information element (the 'Showing x of y records' div) enable\n             * flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bInfo\": null,\n            /**\n             * Present a user control allowing the end user to change the page size\n             * when pagination is enabled.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bLengthChange\": null,\n            /**\n             * Pagination enabled or not. Note that if this is disabled then length\n             * changing must also be disabled.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bPaginate\": null,\n            /**\n             * Processing indicator enable flag whenever DataTables is enacting a\n             * user request - typically an Ajax request for server-side processing.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bProcessing\": null,\n            /**\n             * Server-side processing enabled flag - when enabled DataTables will\n             * get all data from the server for every draw - there is no filtering,\n             * sorting or paging done on the client-side.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bServerSide\": null,\n            /**\n             * Sorting enablement flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSort\": null,\n            /**\n             * Multi-column sorting\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSortMulti\": null,\n            /**\n             * Apply a class to the columns which are being sorted to provide a\n             * visual highlight or not. This can slow things down when enabled since\n             * there is a lot of DOM interaction.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bSortClasses\": null,\n            /**\n             * State saving enablement flag.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bStateSave\": null\n        },\n        /**\n         * Scrolling settings for a table.\n         *  @namespace\n         */\n        \"oScroll\": {\n            /**\n             * When the table is shorter in height than sScrollY, collapse the\n             * table container down to the height of the table (when true).\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type boolean\n             */\n            \"bCollapse\": null,\n            /**\n             * Width of the scrollbar for the web-browser's platform. Calculated\n             * during table initialisation.\n             *  @type int\n             *  @default 0\n             */\n            \"iBarWidth\": 0,\n            /**\n             * Viewport width for horizontal scrolling. Horizontal scrolling is\n             * disabled if an empty string.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             */\n            \"sX\": null,\n            /**\n             * Width to expand the table to when using x-scrolling. Typically you\n             * should not need to use this.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             *  @deprecated\n             */\n            \"sXInner\": null,\n            /**\n             * Viewport height for vertical scrolling. Vertical scrolling is disabled\n             * if an empty string.\n             * Note that this parameter will be set by the initialisation routine. To\n             * set a default use {@link DataTable.defaults}.\n             *  @type string\n             */\n            \"sY\": null\n        },\n        /**\n         * Language information for the table.\n         *  @namespace\n         *  @extends DataTable.defaults.oLanguage\n         */\n        \"oLanguage\": {\n            /**\n             * Information callback function. See\n             * {@link DataTable.defaults.fnInfoCallback}\n             *  @type function\n             *  @default null\n             */\n            \"fnInfoCallback\": null\n        },\n        /**\n         * Browser support parameters\n         *  @namespace\n         */\n        \"oBrowser\": {\n            /**\n             * Indicate if the browser incorrectly calculates width:100% inside a\n             * scrolling element (IE6/7)\n             *  @type boolean\n             *  @default false\n             */\n            \"bScrollOversize\": false,\n            /**\n             * Determine if the vertical scrollbar is on the right or left of the\n             * scrolling container - needed for rtl language layout, although not\n             * all browsers move the scrollbar (Safari).\n             *  @type boolean\n             *  @default false\n             */\n            \"bScrollbarLeft\": false,\n            /**\n             * Flag for if `getBoundingClientRect` is fully supported or not\n             *  @type boolean\n             *  @default false\n             */\n            \"bBounding\": false,\n            /**\n             * Browser scrollbar width\n             *  @type integer\n             *  @default 0\n             */\n            \"barWidth\": 0\n        },\n        \"ajax\": null,\n        /**\n         * Array referencing the nodes which are used for the features. The\n         * parameters of this object match what is allowed by sDom - i.e.\n         *   <ul>\n         *     <li>'l' - Length changing</li>\n         *     <li>'f' - Filtering input</li>\n         *     <li>'t' - The table!</li>\n         *     <li>'i' - Information</li>\n         *     <li>'p' - Pagination</li>\n         *     <li>'r' - pRocessing</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aanFeatures\": [],\n        /**\n         * Store data information - see {@link DataTable.models.oRow} for detailed\n         * information.\n         *  @type array\n         *  @default []\n         */\n        \"aoData\": [],\n        /**\n         * Array of indexes which are in the current display (after filtering etc)\n         *  @type array\n         *  @default []\n         */\n        \"aiDisplay\": [],\n        /**\n         * Array of indexes for display - no filtering\n         *  @type array\n         *  @default []\n         */\n        \"aiDisplayMaster\": [],\n        /**\n         * Map of row ids to data indexes\n         *  @type object\n         *  @default {}\n         */\n        \"aIds\": {},\n        /**\n         * Store information about each column that is in use\n         *  @type array\n         *  @default []\n         */\n        \"aoColumns\": [],\n        /**\n         * Store information about the table's header\n         *  @type array\n         *  @default []\n         */\n        \"aoHeader\": [],\n        /**\n         * Store information about the table's footer\n         *  @type array\n         *  @default []\n         */\n        \"aoFooter\": [],\n        /**\n         * Store the applied global search information in case we want to force a\n         * research or compare the old search to a new one.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @namespace\n         *  @extends DataTable.models.oSearch\n         */\n        \"oPreviousSearch\": {},\n        /**\n         * Store the applied search for each column - see\n         * {@link DataTable.models.oSearch} for the format that is used for the\n         * filtering information for each column.\n         *  @type array\n         *  @default []\n         */\n        \"aoPreSearchCols\": [],\n        /**\n         * Sorting that is applied to the table. Note that the inner arrays are\n         * used in the following manner:\n         * <ul>\n         *   <li>Index 0 - column number</li>\n         *   <li>Index 1 - current sorting direction</li>\n         * </ul>\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @todo These inner arrays should really be objects\n         */\n        \"aaSorting\": null,\n        /**\n         * Sorting that is always applied to the table (i.e. prefixed in front of\n         * aaSorting).\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"aaSortingFixed\": [],\n        /**\n         * Classes to use for the striping of a table.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"asStripeClasses\": null,\n        /**\n         * If restoring a table - we should restore its striping classes as well\n         *  @type array\n         *  @default []\n         */\n        \"asDestroyStripes\": [],\n        /**\n         * If restoring a table - we should restore its width\n         *  @type int\n         *  @default 0\n         */\n        \"sDestroyWidth\": 0,\n        /**\n         * Callback functions array for every time a row is inserted (i.e. on a draw).\n         *  @type array\n         *  @default []\n         */\n        \"aoRowCallback\": [],\n        /**\n         * Callback functions for the header on each draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoHeaderCallback\": [],\n        /**\n         * Callback function for the footer on each draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoFooterCallback\": [],\n        /**\n         * Array of callback functions for draw callback functions\n         *  @type array\n         *  @default []\n         */\n        \"aoDrawCallback\": [],\n        /**\n         * Array of callback functions for row created function\n         *  @type array\n         *  @default []\n         */\n        \"aoRowCreatedCallback\": [],\n        /**\n         * Callback functions for just before the table is redrawn. A return of\n         * false will be used to cancel the draw.\n         *  @type array\n         *  @default []\n         */\n        \"aoPreDrawCallback\": [],\n        /**\n         * Callback functions for when the table has been initialised.\n         *  @type array\n         *  @default []\n         */\n        \"aoInitComplete\": [],\n        /**\n         * Callbacks for modifying the settings to be stored for state saving, prior to\n         * saving state.\n         *  @type array\n         *  @default []\n         */\n        \"aoStateSaveParams\": [],\n        /**\n         * Callbacks for modifying the settings that have been stored for state saving\n         * prior to using the stored values to restore the state.\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoadParams\": [],\n        /**\n         * Callbacks for operating on the settings object once the saved state has been\n         * loaded\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoaded\": [],\n        /**\n         * Cache the table ID for quick access\n         *  @type string\n         *  @default <i>Empty string</i>\n         */\n        \"sTableId\": \"\",\n        /**\n         * The TABLE node for the main table\n         *  @type node\n         *  @default null\n         */\n        \"nTable\": null,\n        /**\n         * Permanent ref to the thead element\n         *  @type node\n         *  @default null\n         */\n        \"nTHead\": null,\n        /**\n         * Permanent ref to the tfoot element - if it exists\n         *  @type node\n         *  @default null\n         */\n        \"nTFoot\": null,\n        /**\n         * Permanent ref to the tbody element\n         *  @type node\n         *  @default null\n         */\n        \"nTBody\": null,\n        /**\n         * Cache the wrapper node (contains all DataTables controlled elements)\n         *  @type node\n         *  @default null\n         */\n        \"nTableWrapper\": null,\n        /**\n         * Indicate if when using server-side processing the loading of data\n         * should be deferred until the second draw.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         *  @default false\n         */\n        \"bDeferLoading\": false,\n        /**\n         * Indicate if all required information has been read in\n         *  @type boolean\n         *  @default false\n         */\n        \"bInitialised\": false,\n        /**\n         * Information about open rows. Each object in the array has the parameters\n         * 'nTr' and 'nParent'\n         *  @type array\n         *  @default []\n         */\n        \"aoOpenRows\": [],\n        /**\n         * Dictate the positioning of DataTables' control elements - see\n         * {@link DataTable.model.oInit.sDom}.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default null\n         */\n        \"sDom\": null,\n        /**\n         * Search delay (in mS)\n         *  @type integer\n         *  @default null\n         */\n        \"searchDelay\": null,\n        /**\n         * Which type of pagination should be used.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default two_button\n         */\n        \"sPaginationType\": \"two_button\",\n        /**\n         * The state duration (for `stateSave`) in seconds.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type int\n         *  @default 0\n         */\n        \"iStateDuration\": 0,\n        /**\n         * Array of callback functions for state saving. Each array element is an\n         * object with the following parameters:\n         *   <ul>\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\n         *       and the JSON string to save that has been thus far created. Returns\n         *       a JSON string to be inserted into a json object\n         *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n         *     <li>string:sName - name of callback</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aoStateSave\": [],\n        /**\n         * Array of callback functions for state loading. Each array element is an\n         * object with the following parameters:\n         *   <ul>\n         *     <li>function:fn - function to call. Takes two parameters, oSettings\n         *       and the object stored. May return false to cancel state loading</li>\n         *     <li>string:sName - name of callback</li>\n         *   </ul>\n         *  @type array\n         *  @default []\n         */\n        \"aoStateLoad\": [],\n        /**\n         * State that was saved. Useful for back reference\n         *  @type object\n         *  @default null\n         */\n        \"oSavedState\": null,\n        /**\n         * State that was loaded. Useful for back reference\n         *  @type object\n         *  @default null\n         */\n        \"oLoadedState\": null,\n        /**\n         * Source url for AJAX data for the table.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         *  @default null\n         */\n        \"sAjaxSource\": null,\n        /**\n         * Property from a given object from which to read the table data from. This\n         * can be an empty string (when not server-side processing), in which case\n         * it is  assumed an an array is given directly.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         */\n        \"sAjaxDataProp\": null,\n        /**\n         * Note if draw should be blocked while getting data\n         *  @type boolean\n         *  @default true\n         */\n        \"bAjaxDataGet\": true,\n        /**\n         * The last jQuery XHR object that was used for server-side data gathering.\n         * This can be used for working with the XHR information in one of the\n         * callbacks\n         *  @type object\n         *  @default null\n         */\n        \"jqXHR\": null,\n        /**\n         * JSON returned from the server in the last Ajax request\n         *  @type object\n         *  @default undefined\n         */\n        \"json\": undefined,\n        /**\n         * Data submitted as part of the last Ajax request\n         *  @type object\n         *  @default undefined\n         */\n        \"oAjaxData\": undefined,\n        /**\n         * Function to get the server-side data.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type function\n         */\n        \"fnServerData\": null,\n        /**\n         * Functions which are called prior to sending an Ajax request so extra\n         * parameters can easily be sent to the server\n         *  @type array\n         *  @default []\n         */\n        \"aoServerParams\": [],\n        /**\n         * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n         * required).\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type string\n         */\n        \"sServerMethod\": null,\n        /**\n         * Format numbers for display.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type function\n         */\n        \"fnFormatNumber\": null,\n        /**\n         * List of options that can be used for the user selectable length menu.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type array\n         *  @default []\n         */\n        \"aLengthMenu\": null,\n        /**\n         * Counter for the draws that the table does. Also used as a tracker for\n         * server-side processing\n         *  @type int\n         *  @default 0\n         */\n        \"iDraw\": 0,\n        /**\n         * Indicate if a redraw is being done - useful for Ajax\n         *  @type boolean\n         *  @default false\n         */\n        \"bDrawing\": false,\n        /**\n         * Draw index (iDraw) of the last error when parsing the returned data\n         *  @type int\n         *  @default -1\n         */\n        \"iDrawError\": -1,\n        /**\n         * Paging display length\n         *  @type int\n         *  @default 10\n         */\n        \"_iDisplayLength\": 10,\n        /**\n         * Paging start point - aiDisplay index\n         *  @type int\n         *  @default 0\n         */\n        \"_iDisplayStart\": 0,\n        /**\n         * Server-side processing - number of records in the result set\n         * (i.e. before filtering), Use fnRecordsTotal rather than\n         * this property to get the value of the number of records, regardless of\n         * the server-side processing setting.\n         *  @type int\n         *  @default 0\n         *  @private\n         */\n        \"_iRecordsTotal\": 0,\n        /**\n         * Server-side processing - number of records in the current display set\n         * (i.e. after filtering). Use fnRecordsDisplay rather than\n         * this property to get the value of the number of records, regardless of\n         * the server-side processing setting.\n         *  @type boolean\n         *  @default 0\n         *  @private\n         */\n        \"_iRecordsDisplay\": 0,\n        /**\n         * Flag to indicate if jQuery UI marking and classes should be used.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         */\n        \"bJUI\": null,\n        /**\n         * The classes to use for the table\n         *  @type object\n         *  @default {}\n         */\n        \"oClasses\": {},\n        /**\n         * Flag attached to the settings object so you can check in the draw\n         * callback if filtering has been done in the draw. Deprecated in favour of\n         * events.\n         *  @type boolean\n         *  @default false\n         *  @deprecated\n         */\n        \"bFiltered\": false,\n        /**\n         * Flag attached to the settings object so you can check in the draw\n         * callback if sorting has been done in the draw. Deprecated in favour of\n         * events.\n         *  @type boolean\n         *  @default false\n         *  @deprecated\n         */\n        \"bSorted\": false,\n        /**\n         * Indicate that if multiple rows are in the header and there is more than\n         * one unique cell per column, if the top one (true) or bottom one (false)\n         * should be used for sorting / title by DataTables.\n         * Note that this parameter will be set by the initialisation routine. To\n         * set a default use {@link DataTable.defaults}.\n         *  @type boolean\n         */\n        \"bSortCellsTop\": null,\n        /**\n         * Initialisation object that is used for the table\n         *  @type object\n         *  @default null\n         */\n        \"oInit\": null,\n        /**\n         * Destroy callback functions - for plug-ins to attach themselves to the\n         * destroy so they can clean up markup and events.\n         *  @type array\n         *  @default []\n         */\n        \"aoDestroyCallback\": [],\n        /**\n         * Get the number of records in the current record set, before filtering\n         *  @type function\n         */\n        \"fnRecordsTotal\": function ()\n        {\n            return _fnDataSource( this ) == 'ssp' ?\n                this._iRecordsTotal * 1 :\n                this.aiDisplayMaster.length;\n        },\n        /**\n         * Get the number of records in the current record set, after filtering\n         *  @type function\n         */\n        \"fnRecordsDisplay\": function ()\n        {\n            return _fnDataSource( this ) == 'ssp' ?\n                this._iRecordsDisplay * 1 :\n                this.aiDisplay.length;\n        },\n        /**\n         * Get the display end point - aiDisplay index\n         *  @type function\n         */\n        \"fnDisplayEnd\": function ()\n        {\n            var\n                len      = this._iDisplayLength,\n                start    = this._iDisplayStart,\n                calc     = start + len,\n                records  = this.aiDisplay.length,\n                features = this.oFeatures,\n                paginate = features.bPaginate;\n            if ( features.bServerSide ) {\n                return paginate === false || len === -1 ?\n                    start + records :\n                    Math.min( start+len, this._iRecordsDisplay );\n            }\n            else {\n                return ! paginate || calc>records || len===-1 ?\n                    records :\n                    calc;\n            }\n        },\n        /**\n         * The DataTables object for this table\n         *  @type object\n         *  @default null\n         */\n        \"oInstance\": null,\n        /**\n         * Unique identifier for each instance of the DataTables object. If there\n         * is an ID on the table node, then it takes that value, otherwise an\n         * incrementing internal counter is used.\n         *  @type string\n         *  @default null\n         */\n        \"sInstance\": null,\n        /**\n         * tabindex attribute value that is added to DataTables control elements, allowing\n         * keyboard navigation of the table and its controls.\n         */\n        \"iTabIndex\": 0,\n        /**\n         * DIV container for the footer scrolling table if scrolling\n         */\n        \"nScrollHead\": null,\n        /**\n         * DIV container for the footer scrolling table if scrolling\n         */\n        \"nScrollFoot\": null,\n        /**\n         * Last applied sort\n         *  @type array\n         *  @default []\n         */\n        \"aLastSort\": [],\n        /**\n         * Stored plug-in instances\n         *  @type object\n         *  @default {}\n         */\n        \"oPlugins\": {},\n        /**\n         * Function used to get a row's id from the row's data\n         *  @type function\n         *  @default null\n         */\n        \"rowIdFn\": null,\n        /**\n         * Data location where to store a row's id\n         *  @type string\n         *  @default null\n         */\n        \"rowId\": null\n    };\n    /**\n     * Extension object for DataTables that is used to provide all extension\n     * options.\n     * Note that the `DataTable.ext` object is available through\n     * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n     * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n     *  @namespace\n     *  @extends DataTable.models.ext\n     */\n    /**\n     * DataTables extensions\n     * This namespace acts as a collection area for plug-ins that can be used to\n     * extend DataTables capabilities. Indeed many of the build in methods\n     * use this method to provide their own capabilities (sorting methods for\n     * example).\n     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n     * reasons\n     *  @namespace\n     */\n    DataTable.ext = _ext = {\n        /**\n         * Buttons. For use with the Buttons extension for DataTables. This is\n         * defined here so other extensions can define buttons regardless of load\n         * order. It is _not_ used by DataTables core.\n         *  @type object\n         *  @default {}\n         */\n        buttons: {},\n        /**\n         * Element class names\n         *  @type object\n         *  @default {}\n         */\n        classes: {},\n        /**\n         * DataTables build type (expanded by the download builder)\n         *  @type string\n         */\n        builder: \"-source-\",\n        /**\n         * Error reporting.\n         * How should DataTables report an error. Can take the value 'alert',\n         * 'throw', 'none' or a function.\n         *  @type string|function\n         *  @default alert\n         */\n        errMode: \"alert\",\n        /**\n         * Feature plug-ins.\n         * This is an array of objects which describe the feature plug-ins that are\n         * available to DataTables. These feature plug-ins are then available for\n         * use through the `dom` initialisation option.\n         * Each feature plug-in is described by an object which must have the\n         * following properties:\n         * * `fnInit` - function that is used to initialise the plug-in,\n         * * `cFeature` - a character so the feature can be enabled by the `dom`\n         *   instillation option. This is case sensitive.\n         * The `fnInit` function has the following input parameters:\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * And the following return is expected:\n         * * {node|null} The element which contains your feature. Note that the\n         *   return may also be void if your plug-in does not require to inject any\n         *   DOM elements into DataTables control (`dom`) - for example this might\n         *   be useful when developing a plug-in which allows table control via\n         *   keyboard entry\n         *  @type array\n         *  @example\n         *    $.fn.dataTable.ext.features.push( {\n         *      \"fnInit\": function( oSettings ) {\n         *        return new TableTools( { \"oDTSettings\": oSettings } );\n         *      },\n         *      \"cFeature\": \"T\"\n         *    } );\n         */\n        feature: [],\n        /**\n         * Row searching.\n         * This method of searching is complimentary to the default type based\n         * searching, and a lot more comprehensive as it allows you complete control\n         * over the searching logic. Each element in this array is a function\n         * (parameters described below) that is called for every row in the table,\n         * and your logic decides if it should be included in the searching data set\n         * or not.\n         *\n         * Searching functions have the following input parameters:\n         *\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{array|object}` Data for the row to be processed (same as the\n         *    original format that was passed in as the data source, or an array\n         *    from a DOM data source\n         * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n         *    can be useful to retrieve the `TR` element if you need DOM interaction.\n         *\n         * And the following return is expected:\n         *\n         * * {boolean} Include the row in the searched result set (true) or not\n         *   (false)\n         *\n         * Note that as with the main search ability in DataTables, technically this\n         * is \"filtering\", since it is subtractive. However, for consistency in\n         * naming we call it searching here.\n         *\n         *  @type array\n         *  @default []\n         *  @example\n         *    // The following example shows custom search being applied to the\n         *    // fourth column (i.e. the data[3] index) based on two input values\n         *    // from the end-user, matching the data in a certain range.\n         *    $.fn.dataTable.ext.search.push(\n         *      function( settings, data, dataIndex ) {\n         *        var min = document.getElementById('min').value * 1;\n         *        var max = document.getElementById('max').value * 1;\n         *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n         *\n         *        if ( min == \"\" && max == \"\" ) {\n         *          return true;\n         *        }\n         *        else if ( min == \"\" && version < max ) {\n         *          return true;\n         *        }\n         *        else if ( min < version && \"\" == max ) {\n         *          return true;\n         *        }\n         *        else if ( min < version && version < max ) {\n         *          return true;\n         *        }\n         *        return false;\n         *      }\n         *    );\n         */\n        search: [],\n        /**\n         * Selector extensions\n         *\n         * The `selector` option can be used to extend the options available for the\n         * selector modifier options (`selector-modifier` object data type) that\n         * each of the three built in selector types offer (row, column and cell +\n         * their plural counterparts). For example the Select extension uses this\n         * mechanism to provide an option to select only rows, columns and cells\n         * that have been marked as selected by the end user (`{selected: true}`),\n         * which can be used in conjunction with the existing built in selector\n         * options.\n         *\n         * Each property is an array to which functions can be pushed. The functions\n         * take three attributes:\n         *\n         * * Settings object for the host table\n         * * Options object (`selector-modifier` object type)\n         * * Array of selected item indexes\n         * The return is an array of the resulting item indexes after the custom\n         * selector has been applied.\n         *  @type object\n         */\n        selector: {\n            cell: [],\n            column: [],\n            row: []\n        },\n        /**\n         * Internal functions, exposed for used in plug-ins.\n         * Please note that you should not need to use the internal methods for\n         * anything other than a plug-in (and even then, try to avoid if possible).\n         * The internal function may change between releases.\n         *\n         *  @type object\n         *  @default {}\n         */\n        internal: {},\n        /**\n         * Legacy configuration options. Enable and disable legacy options that\n         * are available in DataTables.\n         *\n         *  @type object\n         */\n        legacy: {\n            /**\n             * Enable / disable DataTables 1.9 compatible server-side processing\n             * requests\n             *\n             *  @type boolean\n             *  @default null\n             */\n            ajax: null\n        },\n        /**\n         * Pagination plug-in methods.\n         * Each entry in this object is a function and defines which buttons should\n         * be shown by the pagination rendering method that is used for the table:\n         * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n         * buttons are displayed in the document, while the functions here tell it\n         * what buttons to display. This is done by returning an array of button\n         * descriptions (what each button will do).\n         *\n         * Pagination types (the four built in options and any additional plug-in\n         * options defined here) can be used through the `paginationType`\n         * initialisation parameter.\n         *\n         * The functions defined take two parameters:\n         *\n         * 1. `{int} page` The current page index\n         * 2. `{int} pages` The number of pages in the table\n         *\n         * Each function is expected to return an array where each element of the\n         * array can be one of:\n         *\n         * * `first` - Jump to first page when activated\n         * * `last` - Jump to last page when activated\n         * * `previous` - Show previous page when activated\n         * * `next` - Show next page when activated\n         * * `{int}` - Show page of the index given\n         * * `{array}` - A nested array containing the above elements to add a\n         *   containing 'DIV' element (might be useful for styling).\n         *\n         * Note that DataTables v1.9- used this object slightly differently whereby\n         * an object with two functions would be defined for each plug-in. That\n         * ability is still supported by DataTables 1.10+ to provide backwards\n         * compatibility, but this option of use is now decremented and no longer\n         * documented in DataTables 1.10+.\n         *\n         *  @type object\n         *  @default {}\n         *\n         *  @example\n         *    // Show previous, next and current page buttons only\n         *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n         *      return [ 'previous', page, 'next' ];\n         *    };\n         */\n        pager: {},\n        renderer: {\n            pageButton: {},\n            header: {}\n        },\n        /**\n         * Ordering plug-ins - custom data source\n         * The extension options for ordering of data available here is complimentary\n         * to the default type based ordering that DataTables typically uses. It\n         * allows much greater control over the the data that is being used to\n         * order a column, but is necessarily therefore more complex.\n         * This type of ordering is useful if you want to do ordering based on data\n         * live from the DOM (for example the contents of an 'input' element) rather\n         * than just the static string that DataTables knows of.\n         * The way these plug-ins work is that you create an array of the values you\n         * wish to be ordering for the column in question and then return that\n         * array. The data in the array much be in the index order of the rows in\n         * the table (not the currently ordering order!). Which order data gathering\n         * function is run here depends on the `dt-init columns.orderDataType`\n         * parameter that is used for the column (if any).\n         * The functions defined take two parameters:\n         * 1. `{object}` DataTables settings object: see\n         *    {@link DataTable.models.oSettings}\n         * 2. `{int}` Target column index\n         *\n         * Each function is expected to return an array:\n         *\n         * * `{array}` Data for the column to be ordering upon\n         *\n         *  @type array\n         *\n         *  @example\n         *    // Ordering using `input` node values\n         *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n         *    {\n         *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n         *        return $('input', td).val();\n         *      } );\n         *    }\n         */\n        order: {},\n        /**\n         * Type based plug-ins.\n         *\n         * Each column in DataTables has a type assigned to it, either by automatic\n         * detection or by direct assignment using the `type` option for the column.\n         * The type of a column will effect how it is ordering and search (plug-ins\n         * can also make use of the column type if required).\n         * @namespace\n         */\n        type: {\n            /**\n             * Type detection functions.\n             * The functions defined in this object are used to automatically detect\n             * a column's type, making initialisation of DataTables super easy, even\n             * when complex data is in the table.\n             * The functions defined take two parameters:\n             *\n             *  1. `{*}` Data from the column cell to be analysed\n             *  2. `{settings}` DataTables settings object. This can be used to\n             *     perform context specific type detection - for example detection\n             *     based on language settings such as using a comma for a decimal\n             *     place. Generally speaking the options from the settings will not\n             *     be required\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Data type detected, or null if unknown (and thus\n             *   pass it on to the other type detection functions.\n             *\n             *  @type array\n             *\n             *  @example\n             *    // Currency type detection plug-in:\n             *    $.fn.dataTable.ext.type.detect.push(\n             *      function ( data, settings ) {\n             *        // Check the numeric part\n             *        if ( ! $.isNumeric( data.substring(1) ) ) {\n             *          return null;\n             *        }\n             *\n             *        // Check prefixed by currency\n             *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n             *          return 'currency';\n             *        }\n             *        return null;\n             *      }\n             *    );\n             */\n            detect: [],\n            /**\n             * Type based search formatting.\n             * The type based searching functions can be used to pre-format the\n             * data to be search on. For example, it can be used to strip HTML\n             * tags or to de-format telephone numbers for numeric only searching.\n             * Note that is a search is not defined for a column of a given type,\n             * no search formatting will be performed.\n             * Pre-processing of searching data plug-ins - When you assign the sType\n             * for a column (or have it automatically detected for you by DataTables\n             * or a type detection plug-in), you will typically be using this for\n             * custom sorting, but it can also be used to provide custom searching\n             * by allowing you to pre-processing the data and returning the data in\n             * the format that should be searched upon. This is done by adding\n             * functions this object with a parameter name which matches the sType\n             * for that target column. This is the corollary of <i>afnSortData</i>\n             * for searching data.\n             *\n             * The functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for searching\n             *\n             * Each function is expected to return:\n             *\n             * * `{string|null}` Formatted string that will be used for the searching.\n             *\n             *  @type object\n             *  @default {}\n             *\n             *  @example\n             *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n             *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n             *    }\n             */\n            search: {},\n            /**\n             * Type based ordering.\n             *\n             * The column type tells DataTables what ordering to apply to the table\n             * when a column is sorted upon. The order for each type that is defined,\n             * is defined by the functions available in this object.\n             *\n             * Each ordering option can be described by three properties added to\n             * this object:\n             *\n             * * `{type}-pre` - Pre-formatting function\n             * * `{type}-asc` - Ascending order function\n             * * `{type}-desc` - Descending order function\n             *\n             * All three can be used together, only `{type}-pre` or only\n             * `{type}-asc` and `{type}-desc` together. It is generally recommended\n             * that only `{type}-pre` is used, as this provides the optimal\n             * implementation in terms of speed, although the others are provided\n             * for compatibility with existing Javascript sort functions.\n             *\n             * `{type}-pre`: Functions defined take a single parameter:\n             *\n             *  1. `{*}` Data from the column cell to be prepared for ordering\n             *\n             * And return:\n             *\n             * * `{*}` Data to be sorted upon\n             *\n             * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n             * functions, taking two parameters:\n             *  1. `{*}` Data to compare to the second parameter\n             *  2. `{*}` Data to compare to the first parameter\n             * And returning:\n             * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n             *   than the second parameter, ===0 if the two parameters are equal and\n             *   >0 if the first parameter should be sorted height than the second\n             *   parameter.\n             *  @type object\n             *  @default {}\n             *  @example\n             *    // Numeric ordering of formatted numbers with a pre-formatter\n             *    $.extend( $.fn.dataTable.ext.type.order, {\n             *      \"string-pre\": function(x) {\n             *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n             *        return parseFloat( a );\n             *      }\n             *    } );\n             *  @example\n             *    // Case-sensitive string ordering, with no pre-formatting method\n             *    $.extend( $.fn.dataTable.ext.order, {\n             *      \"string-case-asc\": function(x,y) {\n             *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n             *      },\n             *      \"string-case-desc\": function(x,y) {\n             *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n             *      }\n             *    } );\n             */\n            order: {}\n        },\n        /**\n         * Unique DataTables instance counter\n         *\n         * @type int\n         * @private\n         */\n        _unique: 0,\n        // Depreciated\n        // The following properties are retained for backwards compatiblity only.\n        // The should not be used in new projects and will be removed in a future\n        // version\n        /**\n         * Version check function.\n         *  @type function\n         *  @depreciated Since 1.10\n         */\n        fnVersionCheck: DataTable.fnVersionCheck,\n        /**\n         * Index for what 'this' index API functions should use\n         *  @type int\n         *  @deprecated Since v1.10\n         */\n        iApiIndex: 0,\n        /**\n         * jQuery UI class container\n         *  @type object\n         *  @deprecated Since v1.10\n         */\n        oJUIClasses: {},\n        /**\n         * Software version\n         *  @type string\n         *  @deprecated Since v1.10\n         */\n        sVersion: DataTable.version\n    };\n    //\n    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n    //\n    $.extend( _ext, {\n        afnFiltering: _ext.search,\n        aTypes:       _ext.type.detect,\n        ofnSearch:    _ext.type.search,\n        oSort:        _ext.type.order,\n        afnSortData:  _ext.order,\n        aoFeatures:   _ext.feature,\n        oApi:         _ext.internal,\n        oStdClasses:  _ext.classes,\n        oPagination:  _ext.pager\n    } );\n    $.extend( DataTable.ext.classes, {\n        \"sTable\": \"dataTable\",\n        \"sNoFooter\": \"no-footer\",\n        /* Paging buttons */\n        \"sPageButton\": \"paginate_button\",\n        \"sPageButtonActive\": \"current\",\n        \"sPageButtonDisabled\": \"disabled\",\n        /* Striping classes */\n        \"sStripeOdd\": \"odd\",\n        \"sStripeEven\": \"even\",\n        /* Empty row */\n        \"sRowEmpty\": \"dataTables_empty\",\n        /* Features */\n        \"sWrapper\": \"dataTables_wrapper\",\n        \"sFilter\": \"dataTables_filter\",\n        \"sInfo\": \"dataTables_info\",\n        \"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n        \"sLength\": \"dataTables_length\",\n        \"sProcessing\": \"dataTables_processing\",\n        /* Sorting */\n        \"sSortAsc\": \"sorting_asc\",\n        \"sSortDesc\": \"sorting_desc\",\n        \"sSortable\": \"sorting\", /* Sortable in both directions */\n        \"sSortableAsc\": \"sorting_asc_disabled\",\n        \"sSortableDesc\": \"sorting_desc_disabled\",\n        \"sSortableNone\": \"sorting_disabled\",\n        \"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n        /* Filtering */\n        \"sFilterInput\": \"\",\n        /* Page length */\n        \"sLengthSelect\": \"\",\n        /* Scrolling */\n        \"sScrollWrapper\": \"dataTables_scroll\",\n        \"sScrollHead\": \"dataTables_scrollHead\",\n        \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n        \"sScrollBody\": \"dataTables_scrollBody\",\n        \"sScrollFoot\": \"dataTables_scrollFoot\",\n        \"sScrollFootInner\": \"dataTables_scrollFootInner\",\n        /* Misc */\n        \"sHeaderTH\": \"\",\n        \"sFooterTH\": \"\",\n        // Deprecated\n        \"sSortJUIAsc\": \"\",\n        \"sSortJUIDesc\": \"\",\n        \"sSortJUI\": \"\",\n        \"sSortJUIAscAllowed\": \"\",\n        \"sSortJUIDescAllowed\": \"\",\n        \"sSortJUIWrapper\": \"\",\n        \"sSortIcon\": \"\",\n        \"sJUIHeader\": \"\",\n        \"sJUIFooter\": \"\"\n    } );\n    (function() {\n    // Reused strings for better compression. Closure compiler appears to have a\n    // weird edge case where it is trying to expand strings rather than use the\n    // variable version. This results in about 200 bytes being added, for very\n    // little preference benefit since it this run on script load only.\n    var _empty = '';\n    _empty = '';\n    var _stateDefault = _empty + 'ui-state-default';\n    var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';\n    var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';\n    $.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {\n        /* Full numbers paging buttons */\n        \"sPageButton\":         \"fg-button ui-button \"+_stateDefault,\n        \"sPageButtonActive\":   \"ui-state-disabled\",\n        \"sPageButtonDisabled\": \"ui-state-disabled\",\n        /* Features */\n        \"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+\n            \"ui-buttonset-multi paging_\", /* Note that the type is postfixed */\n        /* Sorting */\n        \"sSortAsc\":            _stateDefault+\" sorting_asc\",\n        \"sSortDesc\":           _stateDefault+\" sorting_desc\",\n        \"sSortable\":           _stateDefault+\" sorting\",\n        \"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",\n        \"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",\n        \"sSortableNone\":       _stateDefault+\" sorting_disabled\",\n        \"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",\n        \"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",\n        \"sSortJUI\":            _sortIcon+\"carat-2-n-s\",\n        \"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",\n        \"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",\n        \"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",\n        \"sSortIcon\":           \"DataTables_sort_icon\",\n        /* Scrolling */\n        \"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,\n        \"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,\n        /* Misc */\n        \"sHeaderTH\":  _stateDefault,\n        \"sFooterTH\":  _stateDefault,\n        \"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",\n        \"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"\n    } );\n    }());\n    var extPagination = DataTable.ext.pager;\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {page} page dataTables settings object\n     *  @param {pages} pages Name of the array storage for the callbacks in\n     *      oSettings\n     */\n    function _numbers ( page, pages ) {\n        var\n            numbers = [],\n            buttons = extPagination.numbers_length,\n            half = Math.floor( buttons / 2 );\n        if ( pages <= buttons ) {\n            numbers = _range( 0, pages );\n        }\n        else if ( page <= half ) {\n            numbers = _range( 0, buttons-2 );\n            numbers.push( 'ellipsis' );\n            numbers.push( pages-1 );\n        }\n        else if ( page >= pages - 1 - half ) {\n            numbers = _range( pages-(buttons-2), pages );\n            numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\n            numbers.splice( 0, 0, 0 );\n        }\n        else {\n            numbers = _range( page-half+2, page+half-1 );\n            numbers.push( 'ellipsis' );\n            numbers.push( pages-1 );\n            numbers.splice( 0, 0, 'ellipsis' );\n            numbers.splice( 0, 0, 0 );\n        }\n        numbers.DT_el = 'span';\n        return numbers;\n    }\n    $.extend( extPagination, {\n        // simple: function ( page, pages ) {\n        //     return [ 'previous', 'next' ];\n        // },\n        full: function () {\n            return [  'first', 'previous', 'next', 'last' ];\n        },\n        numbers: function ( page, pages ) {\n            return [ _numbers(page, pages) ];\n        },\n        simple_numbers: function ( page, pages ) {\n            return [ 'previous', _numbers(page, pages), 'next' ];\n        },\n        full_numbers: function ( page, pages ) {\n            return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\n        },\n        first_last_numbers: function (page, pages) {\n            return ['first', _numbers(page, pages), 'last'];\n        },\n        // For testing and plug-ins to use\n        _numbers: _numbers,\n        // Number of number buttons (including ellipsis) to show. _Must be odd!_\n        numbers_length: 7\n    } );\n    $.extend( true, DataTable.ext.renderer, {\n        pageButton: {\n            _: function ( settings, host, idx, buttons, page, pages ) {\n                var classes = settings.oClasses;\n                var lang = settings.oLanguage.oPaginate;\n                var aria = settings.oLanguage.oAria.paginate || {};\n                var btnDisplay, btnClass, counter=0;\n                var attach = function( container, buttons ) {\n                    var i, ien, node, button;\n                    var clickHandler = function ( e ) {\n                        _fnPageChange( settings, e.data.action, true );\n                    };\n                    for ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n                        button = buttons[i];\n                        if ( $.isArray( button ) ) {\n                            var inner = $( '<'+(button.DT_el || 'div')+'/>' )\n                                .appendTo( container );\n                            attach( inner, button );\n                        }\n                        else {\n                            btnDisplay = null;\n                            btnClass = '';\n                            switch ( button ) {\n                                case 'ellipsis':\n                                    container.append('<span class=\"ellipsis\">&#x2026;</span>');\n                                    break;\n                                case 'first':\n                                    btnDisplay = lang.sFirst;\n                                    btnClass = button + (page > 0 ?\n                                        '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n                                case 'previous':\n                                    btnDisplay = lang.sPrevious;\n                                    btnClass = button + (page > 0 ?\n                                        '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n                                case 'next':\n                                    btnDisplay = lang.sNext;\n                                    btnClass = button + (page < pages-1 ?\n                                        '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n                                case 'last':\n                                    btnDisplay = lang.sLast;\n                                    btnClass = button + (page < pages-1 ?\n                                        '' : ' '+classes.sPageButtonDisabled);\n                                    break;\n                                default:\n                                    btnDisplay = button + 1;\n                                    btnClass = page === button ?\n                                        classes.sPageButtonActive : '';\n                                    break;\n                            }\n                            if ( btnDisplay !== null ) {\n                                node = $('<a>', {\n                                        'class': classes.sPageButton+' '+btnClass,\n                                        'aria-controls': settings.sTableId,\n                                        'aria-label': aria[button],\n                                        'data-dt-idx': counter,\n                                        'tabindex': settings.iTabIndex,\n                                        'id': idx === 0 && typeof button === 'string' ?\n                                            settings.sTableId +'_'+ button :\n                                            null\n                                    } )\n                                    .html( btnDisplay )\n                                    .appendTo( container );\n                                _fnBindAction(\n                                    node, {action: button}, clickHandler\n                                );\n                                counter++;\n                            }\n                        }\n                    }\n                };\n                // IE9 throws an 'unknown error' if document.activeElement is used\n                // inside an iframe or frame. Try / catch the error. Not good for\n                // accessibility, but neither are frames.\n                var activeEl;\n                try {\n                    // Because this approach is destroying and recreating the paging\n                    // elements, focus is lost on the select button which is bad for\n                    // accessibility. So we want to restore focus once the draw has\n                    // completed\n                    activeEl = $(host).find(document.activeElement).data('dt-idx');\n                }\n                catch (e) {}\n                attach( $(host).empty(), buttons );\n                if ( activeEl !== undefined ) {\n                    $(host).find( '[data-dt-idx='+activeEl+']' ).focus();\n                }\n            }\n        }\n    } );\n    // Built in type detection. See model.ext.aTypes for information about\n    // what is required from this methods.\n    $.extend( DataTable.ext.type.detect, [\n        // Plain numbers - first since V8 detects some plain numbers as dates\n        // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber( d, decimal ) ? 'num'+decimal : null;\n        },\n        // Dates (only those recognised by the browser's Date.parse)\n        function ( d )\n        {\n            // V8 tries _very_ hard to make a string passed into `Date.parse()`\n            // valid, so we need to use a regex to restrict date formats. Use a\n            // plug-in for anything other than ISO8601 style strings\n            if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\n                return null;\n            }\n            var parsed = Date.parse(d);\n            return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n        },\n        // Formatted numbers\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\n        },\n        // HTML numeric\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\n        },\n        // HTML numeric, formatted\n        function ( d, settings )\n        {\n            var decimal = settings.oLanguage.sDecimal;\n            return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\n        },\n        // HTML (this is strict checking - there must be html)\n        function ( d )\n        {\n            return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n                'html' : null;\n        }\n    ] );\n    // Filter formatting functions. See model.ext.ofnSearch for information about\n    // what is required from these methods.\n    // Note that additional search methods are added for the html numbers and\n    // html formatted numbers by `_addNumericSort()` when we know what the decimal\n    // place is\n    $.extend( DataTable.ext.type.search, {\n        html: function ( data ) {\n            return _empty(data) ?\n                data :\n                typeof data === 'string' ?\n                    data\n                        .replace( _re_new_lines, \" \" )\n                        .replace( _re_html, \"\" ) :\n                    '';\n        },\n        string: function ( data ) {\n            return _empty(data) ?\n                data :\n                typeof data === 'string' ?\n                    data.replace( _re_new_lines, \" \" ) :\n                    data;\n        }\n    } );\n    var __numericReplace = function ( d, decimalPlace, re1, re2 ) {\n        if ( d !== 0 && (!d || d === '-') ) {\n            return -Infinity;\n        }\n        // If a decimal place other than `.` is used, it needs to be given to the\n        // function so we can detect it and replace with a `.` which is the only\n        // decimal place Javascript recognises - it is not locale aware.\n        if ( decimalPlace ) {\n            d = _numToDecimal( d, decimalPlace );\n        }\n        if ( d.replace ) {\n            if ( re1 ) {\n                d = d.replace( re1, '' );\n            }\n            if ( re2 ) {\n                d = d.replace( re2, '' );\n            }\n        }\n        return d * 1;\n    };\n    // Add the numeric 'deformatting' functions for sorting and search. This is done\n    // in a function to provide an easy ability for the language options to add\n    // additional methods if a non-period decimal place is used.\n    /**\n     * Fire callback functions and trigger events. Note that the loop over the\n     * callback array store is done backwards! Further note that you do not want to\n     * fire off triggers in time sensitive applications (for example cell creation)\n     * as its slow.\n     *  @param {decimalPlace} decimalPlace dataTables settings object\n     */\n    function _addNumericSort ( decimalPlace ) {\n        $.each(\n            {\n                // Plain numbers\n                \"num\": function ( d ) {\n                    return __numericReplace( d, decimalPlace );\n                },\n                // Formatted numbers\n                \"num-fmt\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_formatted_numeric );\n                },\n                // HTML numeric\n                \"html-num\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_html );\n                },\n                // HTML numeric, formatted\n                \"html-num-fmt\": function ( d ) {\n                    return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\n                }\n            },\n            function ( key, fn ) {\n                // Add the ordering method\n                _ext.type.order[key+decimalPlace+'-pre'] = fn;\n                // For HTML types add a search formatter that will strip the HTML\n                if ( key.match(/^html\\-/) ) {\n                    _ext.type.search[key+decimalPlace] = _ext.type.search.html;\n                }\n            }\n        );\n    }\n    // Default sort methods\n    $.extend( _ext.type.order, {\n        // Dates\n        \"date-pre\": function ( d ) {\n            return Date.parse( d ) || -Infinity;\n        },\n        // html\n        \"html-pre\": function ( a ) {\n            return _empty(a) ?\n                '' :\n                a.replace ?\n                    a.replace( /<.*?>/g, \"\" ).toLowerCase() :\n                    a+'';\n        },\n        // string\n        \"string-pre\": function ( a ) {\n            // This is a little complex, but faster than always calling toString,\n            // http://jsperf.com/tostring-v-check\n            return _empty(a) ?\n                '' :\n                typeof a === 'string' ?\n                    a.toLowerCase() :\n                    ! a.toString ?\n                        '' :\n                        a.toString();\n        },\n        // string-asc and -desc are retained only for compatibility with the old\n        // sort methods\n        \"string-asc\": function ( x, y ) {\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n        },\n        \"string-desc\": function ( x, y ) {\n            return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n        }\n    } );\n    // Numeric sorting types - order doesn't matter here\n    _addNumericSort( '' );\n    $.extend( true, DataTable.ext.renderer, {\n        header: {\n            _: function ( settings, cell, column, classes ) {\n                // No additional mark-up required\n                // Attach a sort listener to update on sort - note that using the\n                // `DT` namespace will allow the event to be removed automatically\n                // on destroy, while the `dt` namespaced event is the one we are\n                // listening for\n                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n                    if ( settings !== ctx ) { // need to check this this is the host\n                        return;               // table, not a nested one\n                    }\n                    var colIdx = column.idx;\n                    cell\n                        .removeClass(\n                            column.sSortingClass +' '+\n                            classes.sSortAsc +' '+\n                            classes.sSortDesc\n                        )\n                        .addClass( columns[colIdx] == 'asc' ?\n                            classes.sSortAsc : columns[colIdx] == 'desc' ?\n                                classes.sSortDesc :\n                                column.sSortingClass\n                        );\n                } );\n            },\n            jqueryui: function ( settings, cell, column, classes ) {\n                $('<div/>')\n                    .addClass( classes.sSortJUIWrapper )\n                    .append( cell.contents() )\n                    .append( $('<span/>')\n                        .addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\n                    )\n                    .appendTo( cell );\n                // Attach a sort listener to update on sort\n                $(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n                    if ( settings !== ctx ) {\n                        return;\n                    }\n                    var colIdx = column.idx;\n                    cell\n                        .removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n                        .addClass( columns[colIdx] == 'asc' ?\n                            classes.sSortAsc : columns[colIdx] == 'desc' ?\n                                classes.sSortDesc :\n                                column.sSortingClass\n                        );\n                    cell\n                        .find( 'span.'+classes.sSortIcon )\n                        .removeClass(\n                            classes.sSortJUIAsc +\" \"+\n                            classes.sSortJUIDesc +\" \"+\n                            classes.sSortJUI +\" \"+\n                            classes.sSortJUIAscAllowed +\" \"+\n                            classes.sSortJUIDescAllowed\n                        )\n                        .addClass( columns[colIdx] == 'asc' ?\n                            classes.sSortJUIAsc : columns[colIdx] == 'desc' ?\n                                classes.sSortJUIDesc :\n                                column.sSortingClassJUI\n                        );\n                } );\n            }\n        }\n    } );\n    /*\n     * Public helper functions. These aren't used internally by DataTables, or\n     * called by any of the options passed into DataTables, but they can be used\n     * externally by developers working with DataTables. They are helper functions\n     * to make working with DataTables a little bit easier.\n     */\n    var __htmlEscapeEntities = function ( d ) {\n        return typeof d === 'string' ?\n            d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') :\n            d;\n    };\n    /**\n     * Helpers for `columns.render`.\n     *\n     * The options defined here can be used with the `columns.render` initialisation\n     * option to provide a display renderer. The following functions are defined:\n     *\n     * * `number` - Will format numeric data (defined by `columns.data`) for\n     *   display, retaining the original unformatted data for sorting and filtering.\n     *   It takes 5 parameters:\n     *   * `string` - Thousands grouping separator\n     *   * `string` - Decimal point indicator\n     *   * `integer` - Number of decimal points to show\n     *   * `string` (optional) - Prefix.\n     *   * `string` (optional) - Postfix (/suffix).\n     * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n     *   parameters.\n     *\n     * @example\n     *   // Column definition using the number renderer\n     *   {\n     *     data: \"salary\",\n     *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n     *   }\n     *\n     * @namespace\n     */\n    DataTable.render = {\n        number: function ( thousands, decimal, precision, prefix, postfix ) {\n            return {\n                display: function ( d ) {\n                    if ( typeof d !== 'number' && typeof d !== 'string' ) {\n                        return d;\n                    }\n                    var negative = d < 0 ? '-' : '';\n                    var flo = parseFloat( d );\n                    // If NaN then there isn't much formatting that we can do - just\n                    // return immediately, escaping any HTML (this was supposed to\n                    // be a number after all)\n                    if ( isNaN( flo ) ) {\n                        return __htmlEscapeEntities( d );\n                    }\n                    flo = flo.toFixed( precision );\n                    d = Math.abs( flo );\n                    var intPart = parseInt( d, 10 );\n                    var floatPart = precision ?\n                        decimal+(d - intPart).toFixed( precision ).substring( 2 ):\n                        '';\n                    return negative + (prefix||'') +\n                        intPart.toString().replace(\n                            /\\B(?=(\\d{3})+(?!\\d))/g, thousands\n                        ) +\n                        floatPart +\n                        (postfix||'');\n                }\n            };\n        },\n        text: function () {\n            return {\n                display: __htmlEscapeEntities\n            };\n        }\n    };\n    /**\n     * Create a wrapper function for exporting an internal functions to an external API.\n     *  @param {string} fn API function name\n     *  @returns {function} wrapped function\n     *  @memberof DataTable#internal\n     */\n    function _fnExternApiFunc (fn)\n    {\n        return function() {\n            var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\n                Array.prototype.slice.call(arguments)\n            );\n            return DataTable.ext.internal[fn].apply( this, args );\n        };\n    }\n    /**\n     * Reference to internal functions for use by plug-in developers. Note that\n     * these methods are references to internal functions and are considered to be\n     * private. If you use these methods, be aware that they are liable to change\n     * between versions.\n     *  @namespace\n     */\n    $.extend( DataTable.ext.internal, {\n        _fnExternApiFunc: _fnExternApiFunc,\n        _fnBuildAjax: _fnBuildAjax,\n        _fnAjaxUpdate: _fnAjaxUpdate,\n        _fnAjaxParameters: _fnAjaxParameters,\n        _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n        _fnAjaxDataSrc: _fnAjaxDataSrc,\n        _fnAddColumn: _fnAddColumn,\n        _fnColumnOptions: _fnColumnOptions,\n        _fnAdjustColumnSizing: _fnAdjustColumnSizing,\n        _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n        _fnColumnIndexToVisible: _fnColumnIndexToVisible,\n        _fnVisbleColumns: _fnVisbleColumns,\n        _fnGetColumns: _fnGetColumns,\n        _fnColumnTypes: _fnColumnTypes,\n        _fnApplyColumnDefs: _fnApplyColumnDefs,\n        _fnHungarianMap: _fnHungarianMap,\n        _fnCamelToHungarian: _fnCamelToHungarian,\n        _fnLanguageCompat: _fnLanguageCompat,\n        _fnBrowserDetect: _fnBrowserDetect,\n        _fnAddData: _fnAddData,\n        _fnAddTr: _fnAddTr,\n        _fnNodeToDataIndex: _fnNodeToDataIndex,\n        _fnNodeToColumnIndex: _fnNodeToColumnIndex,\n        _fnGetCellData: _fnGetCellData,\n        _fnSetCellData: _fnSetCellData,\n        _fnSplitObjNotation: _fnSplitObjNotation,\n        _fnGetObjectDataFn: _fnGetObjectDataFn,\n        _fnSetObjectDataFn: _fnSetObjectDataFn,\n        _fnGetDataMaster: _fnGetDataMaster,\n        _fnClearTable: _fnClearTable,\n        _fnDeleteIndex: _fnDeleteIndex,\n        _fnInvalidate: _fnInvalidate,\n        _fnGetRowElements: _fnGetRowElements,\n        _fnCreateTr: _fnCreateTr,\n        _fnBuildHead: _fnBuildHead,\n        _fnDrawHead: _fnDrawHead,\n        _fnDraw: _fnDraw,\n        _fnReDraw: _fnReDraw,\n        _fnAddOptionsHtml: _fnAddOptionsHtml,\n        _fnDetectHeader: _fnDetectHeader,\n        _fnGetUniqueThs: _fnGetUniqueThs,\n        _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n        _fnFilterComplete: _fnFilterComplete,\n        _fnFilterCustom: _fnFilterCustom,\n        _fnFilterColumn: _fnFilterColumn,\n        _fnFilter: _fnFilter,\n        _fnFilterCreateSearch: _fnFilterCreateSearch,\n        _fnEscapeRegex: _fnEscapeRegex,\n        _fnFilterData: _fnFilterData,\n        _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n        _fnUpdateInfo: _fnUpdateInfo,\n        _fnInfoMacros: _fnInfoMacros,\n        _fnInitialise: _fnInitialise,\n        _fnInitComplete: _fnInitComplete,\n        _fnLengthChange: _fnLengthChange,\n        _fnFeatureHtmlLength: _fnFeatureHtmlLength,\n        _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n        _fnPageChange: _fnPageChange,\n        _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n        _fnProcessingDisplay: _fnProcessingDisplay,\n        _fnFeatureHtmlTable: _fnFeatureHtmlTable,\n        _fnScrollDraw: _fnScrollDraw,\n        _fnApplyToChildren: _fnApplyToChildren,\n        _fnCalculateColumnWidths: _fnCalculateColumnWidths,\n        _fnThrottle: _fnThrottle,\n        _fnConvertToWidth: _fnConvertToWidth,\n        _fnGetWidestNode: _fnGetWidestNode,\n        _fnGetMaxLenString: _fnGetMaxLenString,\n        _fnStringToCss: _fnStringToCss,\n        _fnSortFlatten: _fnSortFlatten,\n        _fnSort: _fnSort,\n        _fnSortAria: _fnSortAria,\n        _fnSortListener: _fnSortListener,\n        _fnSortAttachListener: _fnSortAttachListener,\n        _fnSortingClasses: _fnSortingClasses,\n        _fnSortData: _fnSortData,\n        _fnSaveState: _fnSaveState,\n        _fnLoadState: _fnLoadState,\n        _fnSettingsFromNode: _fnSettingsFromNode,\n        _fnLog: _fnLog,\n        _fnMap: _fnMap,\n        _fnBindAction: _fnBindAction,\n        _fnCallbackReg: _fnCallbackReg,\n        _fnCallbackFire: _fnCallbackFire,\n        _fnLengthOverflow: _fnLengthOverflow,\n        _fnRenderer: _fnRenderer,\n        _fnDataSource: _fnDataSource,\n        _fnRowAttributes: _fnRowAttributes,\n        _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n                                        // in 1.10, so this dead-end function is\n                                        // added to prevent errors\n    } );\n    // jQuery access\n    $.fn.dataTable = DataTable;\n    // Provide access to the host jQuery object (circular reference)\n    DataTable.$ = $;\n    // Legacy aliases\n    $.fn.dataTableSettings = DataTable.settings;\n    $.fn.dataTableExt = DataTable.ext;\n    // With a capital `D` we return a DataTables API instance rather than a\n    // jQuery object\n    $.fn.DataTable = function ( opts ) {\n        return $(this).dataTable( opts ).api();\n    };\n    // All properties that are available to $.fn.dataTable should also be\n    // available on $.fn.DataTable\n    $.each( DataTable, function ( prop, val ) {\n        $.fn.DataTable[prop] = val;\n    } );\n    // Information about events fired by DataTables - for documentation.\n    /**\n     * Draw event, fired whenever the table is redrawn on the page, at the same\n     * point as fnDrawCallback. This may be useful for binding events or\n     * performing calculations when the table is altered at all.\n     *  @name DataTable#draw.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Search event, fired when the searching applied to the table (using the\n     * built-in global search, or column filters) is altered.\n     *  @name DataTable#search.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Page change event, fired when the paging of the table is altered.\n     *  @name DataTable#page.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Order event, fired when the ordering applied to the table is altered.\n     *  @name DataTable#order.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * DataTables initialisation complete event, fired when the table is fully\n     * drawn, including Ajax data loaded, if Ajax data is required.\n     *  @name DataTable#init.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The JSON object request from the server - only\n     *    present if client-side Ajax sourced data is used</li></ol>\n     */\n    /**\n     * State save event, fired when the table has changed state a new state save\n     * is required. This event allows modification of the state saving object\n     * prior to actually doing the save, including addition or other state\n     * properties (for plug-ins) or modification of a DataTables core property.\n     *  @name DataTable#stateSaveParams.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The state information to be saved\n     */\n    /**\n     * State load event, fired when the table is loading state from the stored\n     * data, but prior to the settings object being modified by the saved state\n     * - allowing modification of the saved state is required or loading of\n     * state for a plug-in.\n     *  @name DataTable#stateLoadParams.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The saved state information\n     */\n    /**\n     * State loaded event, fired when state has been loaded from stored data and\n     * the settings object has been modified by the loaded data.\n     *  @name DataTable#stateLoaded.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {object} json The saved state information\n     */\n    /**\n     * Processing event, fired when DataTables is doing some kind of processing\n     * (be it, order, searcg or anything else). It can be used to indicate to\n     * the end user that there is something happening, or that something has\n     * finished.\n     *  @name DataTable#processing.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} oSettings DataTables settings object\n     *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n     */\n    /**\n     * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n     * request to made to the server for new data. This event is called before\n     * DataTables processed the returned data, so it can also be used to pre-\n     * process the data returned from the server, if needed.\n     *\n     * Note that this trigger is called in `fnServerData`, if you override\n     * `fnServerData` and which to use this event, you need to trigger it in you\n     * success function.\n     *  @name DataTable#xhr.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {object} json JSON returned from the server\n     *\n     *  @example\n     *     // Use a custom property returned from the server in another DOM element\n     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n     *       $('#status').html( json.status );\n     *     } );\n     *\n     *  @example\n     *     // Pre-process the data returned from the server\n     *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n     *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n     *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n     *       }\n     *       // Note no return - manipulate the data directly in the JSON object.\n     *     } );\n     */\n    /**\n     * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n     * or passing the bDestroy:true parameter in the initialisation object. This\n     * can be used to remove bound events, added DOM nodes, etc.\n     *  @name DataTable#destroy.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Page length change event, fired when number of records to show on each\n     * page (the length) is changed.\n     *  @name DataTable#length.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {integer} len New length\n     */\n    /**\n     * Column sizing has changed.\n     *  @name DataTable#column-sizing.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     */\n    /**\n     * Column visibility has changed.\n     *  @name DataTable#column-visibility.dt\n     *  @event\n     *  @param {event} e jQuery event object\n     *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n     *  @param {int} column Column index\n     *  @param {bool} vis `false` if column now hidden, or `true` if visible\n     */\n\n    return $.fn.dataTable;\n}));"],"names":["factory","$","window","document","_ext","_Api","_api_register","_api_registerPlural","DataTable","options","this","sSelector","oOpts","api","_","rows","data","traditional","_fnSettingsFromNode","iApiIndex","fnAddData","redraw","isArray","isPlainObject","add","row","undefined","draw","flatten","toArray","fnAdjustColumnSizing","bRedraw","columns","adjust","settings","scroll","oScroll","sX","sY","_fnScrollDraw","fnClearTable","clear","fnClose","nTr","child","hide","fnDeleteRow","target","callback","aoData","remove","call","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","iColumn","bRegex","bSmart","bShowGlobal","bCaseInsensitive","search","column","fnGetData","src","col","type","nodeName","toLowerCase","cell","fnGetNodes","iRow","node","nodes","fnGetPosition","toUpperCase","index","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","sClass","show","fnPageChange","mAction","page","fnSetColumnVis","iCol","bShow","visible","fnSettings","fnSort","aaSort","order","fnSortListener","nNode","fnCallback","listener","fnUpdate","mData","mRow","bAction","fnVersionCheck","_that","emptyInit","len","length","fn","oApi","internal","ext","_fnExternApiFunc","each","iLen","oInit","_fnExtend","i","sId","getAttribute","bInitHandedOff","defaults","$this","_fnCompatOpts","_fnCompatCols","_fnCamelToHungarian","extend","allSettings","s","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","_fnLog","sTableId","id","splice","_unique","oSettings","models","sDestroyWidth","style","width","sInstance","push","dataTable","oLanguage","_fnLanguageCompat","aLengthMenu","iDisplayLength","_fnMap","oFeatures","_fnCallbackReg","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","bJQueryUI","oJUIClasses","sDom","renderer","header","classes","addClass","sTable","iInitDisplayStart","iDisplayStart","_iDisplayStart","iDeferLoading","bDeferLoading","tmp","_iRecordsDisplay","_iRecordsTotal","sUrl","ajax","dataType","url","success","json","_fnInitialise","error","asStripeClasses","sStripeOdd","sStripeEven","stripeClasses","rowOne","children","find","eq","inArray","map","el","hasClass","removeClass","join","asDestroyStripes","slice","aoColumnsInit","anThs","nThead","getElementsByTagName","_fnDetectHeader","aoHeader","_fnGetUniqueThs","aoColumns","_fnAddColumn","_fnApplyColumnDefs","aoColumnDefs","oDef","_fnColumnOptions","a","name","sort","filter","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSort","bSorted","aSort","_fnSortFlatten","sortedColumns","val","dir","_fnCallbackFire","_fnSortAria","_fnDataSource","bDeferRender","captions","_captionSide","css","thead","appendTo","tbody","nTBody","tfoot","sNoFooter","aoFooter","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","bInitialised","bStateSave","_fnSaveState","_fnLoadState","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","RegExp","_re_formatted_numeric","_empty","d","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","replace","_isNumber","formatted","strType","parseFloat","_htmlNumeric","html","_isHtml","_stripHtml","_pluck","prop","prop2","out","ien","_pluck_order","_range","start","end","_removeEmpty","sorted","last","_areAllUnique","j","k","_fnHungarianMap","o","match","newKey","key","indexOf","_hungarianMap","user","force","hungarianKey","charAt","lang","zeroRecords","sZeroRecords","sEmptyTable","sLoadingRecords","sInfoThousands","sThousands","decimal","sDecimal","_addNumericSort","util","throttle","freq","timer","frequency","that","now","Date","args","arguments","clearTimeout","setTimeout","apply","escapeRegex","_fnCompatMap","knew","old","init","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","dataSort","aDataSort","__browser","browser","n","position","top","left","scrollLeft","height","overflow","append","outer","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","Math","round","offset","bBounding","getBoundingClientRect","oBrowser","iBarWidth","_fnReduce","inc","value","isSet","hasOwnProperty","nTh","oDefaults","oCol","oColumn","createElement","sTitle","innerHTML","idx","aoPreSearchCols","oOptions","th","sWidthOrig","attr","t","mDataProp","sType","_sManualType","className","iDataSort","mDataSrc","mRender","attrTest","_bAttrSrc","_setter","rowData","meta","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSortable","sSortableNone","bAsc","bDesc","sSortingClass","sSortableAsc","sSortingClassJUI","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","bVisible","sParam","_fnColumnTypes","jen","ken","detectedType","cache","types","detect","_fnGetCellData","aoColDefs","aoCols","jLen","kLen","def","aTargets","targets","aDataIn","anTds","oData","oRow","_aData","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","_fnSetCellData","__reArray","__reFn","_fnSplitObjNotation","str","mSource","fetchData","arrayNotation","funcNotation","innerSrc","substring","setData","b","aLast","_fnGetDataMaster","_fnClearTable","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","childNodes","removeChild","firstChild","anCells","_aSortData","_aFilterData","cols","_fnRowAttributes","contents","tds","td","objectRead","setter","cellProcess","trim","nextSibling","rowNode","nTrIn","nTd","_DT_RowIndex","sCellType","_DT_CellIndex","appendChild","fnCreatedCell","setAttribute","tr","DT_RowClass","split","__rowc","concat","DT_RowAttr","DT_RowData","_fnBuildHead","createHeader","iTabIndex","_fnSortAttachListener","_fnRenderer","sHeaderTH","sFooterTH","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","iRowspan","iColspan","aoLocal","aApplied","iColumns","_fnDraw","aPreDraw","anRows","iRowCount","iStripes","oLang","bServerSide","bDrawing","fnRecordsDisplay","iDisplayEnd","fnDisplayEnd","_fnProcessingDisplay","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","class","valign","colSpan","sRowEmpty","body","detach","bFiltered","_fnReDraw","holdPosition","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","table","holding","insertBefore","insert","sWrapper","nHolding","nTableWrapper","nTableReinsertBefore","featureNode","cOption","nNewNode","cNext","sAttr","aDom","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nCell","l","iColShifted","bUnique","nTrs","fnShiftCol","unique","nHeader","aReturn","bSortCellsTop","_fnBuildAjax","rbracket","ajaxData","instance","jqXHR","newData","isFunction","baseAjax","sError","sServerMethod","xhr","ret","readyState","oAjaxData","fnServerData","sAjaxSource","bAjaxDataGet","_fnAjaxParameters","_fnAjaxUpdateDraw","dataProp","columnSearch","columnCount","preSearch","preColSearch","displayStart","displayLength","_iDisplayLength","param","sSearch","regex","sName","searchable","bSearchable","orderable","legacy","compat","modern","_fnAjaxDataSrc","recordsTotal","recordsFiltered","_bInitComplete","_fnInitComplete","dataSrc","sAjaxDataProp","tableId","language","previousSearch","input","sFilterInput","f","sFilter","searchFn","searchDelay","jqFilter","sSearchPlaceholder","on","_fnThrottle","e","keyCode","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","merge","searchStr","smart","caseInsensitive","display","rpSearch","_fnFilterCreateSearch","test","invalidated","prevSearch","displayMaster","filtered","_fnFilterData","_sFilterRow","word","m","__filter_div","__filter_div_textContent","textContent","filterData","fomatters","wasInvalidated","toString","innerText","_fnSearchToCamel","obj","_fnSearchToHung","tid","sInfo","aoDrawCallback","_fnUpdateInfo","max","total","sInfoEmpty","sInfoFiltered","_fnInfoMacros","sInfoPostFix","fnInfoCallback","formatter","fnFormatNumber","all","ceil","iAjaxStart","deferLoading","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","d2","lengths","select","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","sPaging","p","visRecords","pages","buttons","_fnPageChange","action","records","floor","changed","r","sProcessing","scrollY","caption","captionSide","headerClone","cloneNode","footerClone","footer","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","correction","sanityWidth","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooterInner","divFooterTable","tableEl","tableStyle","ie67","dtHeaderCells","headerWidths","footerWidths","headerContent","footerContent","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","clone","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","nToSize","iOuterWidth","bScrolling","padding","scrollTop","an1","an2","nNode1","nNode2","nodeType","__re_html_remove","columnIdx","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","styleWidth","_fnConvertToWidth","tmpTable","margin","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","_fnGetMaxLenString","maxIdx","srcCol","fixed","aaSortingFixed","fixedObj","nestedSort","pre","post","_idx","sortCol","aiOrig","oExtSort","formatters","_fnSortData","x","y","dataA","dataB","label","nextSort","oAria","removeAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customData","customSort","sSortDataType","state","time","oSavedState","fnStateSaveCallback","loaded","abStateLoad","duration","iStateDuration","oLoadedState","fnStateLoadCallback","level","msg","tn","sErrMode","errMode","alert","Error","mappedName","extender","breakRefs","blur","which","preventDefault","sStore","callbackArr","eventName","reverse","Event","trigger","result","host","__apiStruct","__arrayProto","Array","prototype","context","ctxSettings","mixed","jq","tables","_toSettings","selector","opts","Api","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","unshift","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","method","heir","registerPlural","pluralName","singularName","__table_selector","paging","info","recordsDisplay","serverSide","__reload","one","abort","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","sel","selInt","closest","rowObj","__row_selector","hash","thatIdx","loopRow","loopCells","newRows","modRows","__details_remove","_details","_detailsShow","__details_display","insertAfter","__details_events","off","drawEvent","_child_obj","klass","addRow","created","__details_add","_child_mth","_stateDefault","_sortIcon","_headerFooter","__re_column_selector","__columnData","r1","r2","names","visColumns","jqResult","__column_selector","calc","__setColumnVis","rowSelector","columnSelector","allCells","fnSelector","__cell_selector","set","caseInsen","versionCheck","version","iThis","iThat","aThis","aThat","isDataTable","fnIsDataTable","get","is","head","foot","fnTables","camelToHungarian","jqRows","orig","jqTable","jqTbody","jqWrapper","bJUI","sSortIcon","wrapper","sSortJUIWrapper","removedMethod","arg1","arg2","arg3","arg4","token","plural","resolved","bScrollCollapse","toFormat","JSON","parse","sessionStorage","localStorage","getItem","location","pathname","setItem","stringify","oPaginate","sFirst","sLast","sNext","sPrevious","sScrollXInner","sScrollY","aoRowCallback","aoHeaderCallback","aoFooterCallback","aoRowCreatedCallback","aoPreDrawCallback","aoInitComplete","aoStateSaveParams","aoStateLoadParams","aoStateLoaded","aoOpenRows","aoStateSave","aoStateLoad","aoServerParams","aoDestroyCallback","paginate","min","oPlugins","builder","pageButton","sVersion","afnFiltering","aTypes","ofnSearch","oSort","afnSortData","oStdClasses","oPagination","sPageButton","sPageButtonActive","sPageButtonDisabled","sSortAsc","sSortDesc","sSortJUIAsc","sSortJUIDesc","extPagination","_numbers","numbers","numbers_length","half","DT_el","full","simple_numbers","full_numbers","first_last_numbers","btnDisplay","btnClass","activeEl","aria","counter","attach","container","button","clickHandler","tabindex","empty","focus","parsed","string","__numericReplace","decimalPlace","re1","re2","jqueryui","__htmlEscapeEntities","render","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","text","_fnNodeToDataIndex","_fnNodeToColumnIndex","_fnCalculateEnd","dataTableSettings","dataTableExt","define","amd","exports","module","root","require","jQuery"],"mappings":"AAyBC,IAAUA,gBA8BT,SAAUC,EAAGC,OAAQC,UAkCnB,IAgmCIC,KACAC,KACAC,cACAC,oBAnmCAC,UAAY,SAAWC,SAsCvBC,KAAKT,EAAI,SAAWU,UAAWC,OAE3B,OAAOF,KAAKG,KAAI,GAAMZ,EAAGU,UAAWC,QAkDxCF,KAAKI,EAAI,SAAWH,UAAWC,OAE3B,OAAOF,KAAKG,KAAI,GAAME,KAAMJ,UAAWC,OAAQI,QAWnDN,KAAKG,IAAM,SAAWI,aAElB,OACI,IAAIZ,KADDY,YAECC,oBAAqBR,KAAKN,KAAKe,YAEzBT,OAwClBA,KAAKU,UAAY,SAAUJ,KAAMK,QAE7B,IAAIR,IAAMH,KAAKG,KAAK,GAEhBE,KAAOd,EAAEqB,QAAQN,QAAWf,EAAEqB,QAAQN,KAAK,KAAOf,EAAEsB,cAAcP,KAAK,KACvEH,IAAIE,KAAKS,IAAKR,MACdH,IAAIY,IAAID,IAAKR,MAIjB,YAHgBU,IAAXL,QAAwBA,SACzBR,IAAIc,OAEDZ,KAAKa,UAAUC,WAuB1BnB,KAAKoB,qBAAuB,SAAWC,SAEnC,IAAIlB,IAAMH,KAAKG,KAAK,GAAOmB,QAAQC,SAC/BC,SAAWrB,IAAIqB,WAAW,GAC1BC,OAASD,SAASE,aACLV,IAAZK,SAAyBA,QAC1BlB,IAAIc,MAAM,GAEU,KAAdQ,OAAOE,IAA2B,KAAdF,OAAOG,IAEjCC,cAAeL,WAiBvBxB,KAAK8B,aAAe,SAAUT,SAE1B,IAAIlB,IAAMH,KAAKG,KAAK,GAAO4B,cACVf,IAAZK,SAAyBA,UAC1BlB,IAAIc,QA2BZjB,KAAKgC,QAAU,SAAUC,KAErBjC,KAAKG,KAAK,GAAOY,IAAKkB,KAAMC,MAAMC,QAoBtCnC,KAAKoC,YAAc,SAAUC,OAAQC,SAAU3B,QAE3C,IAAIR,IAAMH,KAAKG,KAAK,GAChBE,KAAOF,IAAIE,KAAMgC,QACjBb,SAAWnB,KAAKmB,WAAW,GAC3BlB,KAAOkB,SAASe,OAAOlC,KAAK,GAAG,IAQnC,OAPAA,KAAKmC,SACAF,UACDA,SAASG,KAAMzC,KAAMwB,SAAUlB,YAEnBU,IAAXL,QAAwBA,SACzBR,IAAIc,OAEDX,MAgBXN,KAAK0C,UAAY,SAAWF,QAExBxC,KAAKG,KAAK,GAAOwC,QAASH,SAgB9BxC,KAAK4C,OAAS,SAAUC,UAIpB7C,KAAKG,KAAK,GAAOc,KAAM4B,WAqB3B7C,KAAK8C,SAAW,SAAUC,OAAQC,QAASC,OAAQC,OAAQC,YAAaC,kBAEpE,IAAIjD,IAAMH,KAAKG,KAAK,GACf6C,cACD7C,IAAIkD,OAAQN,OAAQE,OAAQC,OAAQE,kBAGpCjD,IAAImD,OAAQN,SAAUK,OAAQN,OAAQE,OAAQC,OAAQE,kBAE1DjD,IAAIc,QAuCRjB,KAAKuD,UAAY,SAAUC,IAAKC,KAE5B,IAAItD,IAAMH,KAAKG,KAAK,GACpB,QAAaa,IAARwC,IAAoB,CACrB,IAAIE,KAAOF,IAAIG,SAAWH,IAAIG,SAASC,cAAgB,GACvD,YAAe5C,IAARyC,KAA6B,MAARC,MAAwB,MAARA,KACxCvD,IAAI0D,KAAML,IAAKC,KAAMnD,OACrBH,IAAIY,IAAKyC,KAAMlD,QAAU,KAEjC,OAAOH,IAAIG,OAAOa,WAoBtBnB,KAAK8D,WAAa,SAAUC,MAExB,IAAI5D,IAAMH,KAAKG,KAAK,GACpB,YAAgBa,IAAT+C,KACH5D,IAAIY,IAAKgD,MAAOC,OAChB7D,IAAIE,OAAO4D,QAAQ/C,UAAUC,WA8BrCnB,KAAKkE,cAAgB,SAAUF,MAE3B,IAAI7D,IAAMH,KAAKG,KAAK,GAChBwD,SAAWK,KAAKL,SAASQ,cAC7B,GAAiB,MAAZR,SACD,OAAOxD,IAAIY,IAAKiD,MAAOI,QAEtB,GAAiB,MAAZT,UAAgC,MAAZA,SAAmB,CAC7C,IAAIE,KAAO1D,IAAI0D,KAAMG,MAAOI,QAC5B,MAAO,CACHP,KAAK9C,IACL8C,KAAKQ,cACLR,KAAKP,QAGb,OAAO,MAyBXtD,KAAKsE,SAAW,SAAUrC,KAEtB,OAAOjC,KAAKG,KAAK,GAAOY,IAAKkB,KAAMC,MAAMqC,WAgC7CvE,KAAKwE,OAAS,SAAUvC,IAAKwC,MAAOC,QAEhC,OAAO1E,KAAKG,KAAK,GACZY,IAAKkB,KACLC,MAAOuC,MAAOC,QACdC,OACAzC,QAAQ,IAkBjBlC,KAAK4E,aAAe,SAAWC,QAASxD,SAEpC,IAAIlB,IAAMH,KAAKG,KAAK,GAAO2E,KAAMD,eAChB7D,IAAZK,SAAyBA,UAC1BlB,IAAIc,MAAK,IAmBjBjB,KAAK+E,eAAiB,SAAWC,KAAMC,MAAO5D,SAE1C,IAAIlB,IAAMH,KAAKG,KAAK,GAAOmD,OAAQ0B,MAAOE,QAASD,aAClCjE,IAAZK,SAAyBA,UAC1BlB,IAAImB,QAAQC,SAASN,QAmB7BjB,KAAKmF,WAAa,WAEd,OAAO3E,oBAAqBR,KAAKN,KAAKe,aAiB1CT,KAAKoF,OAAS,SAAUC,QAEpBrF,KAAKG,KAAK,GAAOmF,MAAOD,QAASpE,QAkBrCjB,KAAKuF,eAAiB,SAAUC,MAAOxC,QAASyC,YAE5CzF,KAAKG,KAAK,GAAOmF,MAAMI,SAAUF,MAAOxC,QAASyC,aAwBrDzF,KAAK2F,SAAW,SAAUC,MAAOC,KAAM7C,QAAS3B,QAASyE,SAErD,IAAI3F,IAAMH,KAAKG,KAAK,GAapB,OAZK6C,cACD7C,IAAIY,IAAK8E,MAAOvF,KAAMsF,OAGtBzF,IAAI0D,KAAMgC,KAAM7C,SAAU1C,KAAMsF,aAEnB5E,IAAZ8E,SAAyBA,UAC1B3F,IAAImB,QAAQC,eAECP,IAAZK,SAAyBA,UAC1BlB,IAAIc,OAED,GAmBXjB,KAAK+F,eAAiBrG,KAAKqG,eAC3B,IAAIC,MAAQhG,KACRiG,eAAwBjF,IAAZjB,QACZmG,IAAMlG,KAAKmG,OAMf,IAAM,IAAIC,MALLH,YACDlG,QAAU,IAEdC,KAAKqG,KAAOrG,KAAKsG,SAAW5G,KAAK4G,SAEjBxG,UAAUyG,IAAID,SACrBF,KACDpG,KAAKoG,IAAMI,iBAAiBJ,KAqZpC,OAlZApG,KAAKyG,MAAK,WAGN,IAISC,KAHLC,MAAQT,IAAM,EACdU,UAFI,GAEU7G,SAAS,GACvBA,QACA8G,EAAE,EACFC,IAAM9G,KAAK+G,aAAc,MACzBC,gBAAiB,EACjBC,SAAWnH,UAAUmH,SACrBC,MAAQ3H,EAAES,MAEd,GAAoC,SAA/BA,KAAK2D,SAASC,cAAnB,CAMAuD,cAAeF,UACfG,cAAeH,SAAS3D,QAExB+D,oBAAqBJ,SAAUA,UAAU,GACzCI,oBAAqBJ,SAAS3D,OAAQ2D,SAAS3D,QAAQ,GAEvD+D,oBAAqBJ,SAAU1H,EAAE+H,OAAQX,MAAOO,MAAM5G,SAEtD,IAAIiH,YAAczH,UAAU0B,SAC5B,IAAMqF,EAAE,EAAGH,KAAKa,YAAYpB,OAASU,EAAEH,KAAOG,IAC9C,CACI,IAAIW,EAAID,YAAYV,GAEpB,GAAKW,EAAEC,QAAUzH,MAAQwH,EAAEE,OAAOC,YAAc3H,MAASwH,EAAEI,QAAUJ,EAAEI,OAAOD,YAAc3H,KAC5F,CACI,IAAI6H,eAAgC7G,IAApB2F,MAAMkB,UAA0BlB,MAAMkB,UAAYZ,SAASY,UACvEC,cAA8B9G,IAAnB2F,MAAMmB,SAAyBnB,MAAMmB,SAAWb,SAASa,SACxE,GAAK7B,WAAa4B,UAEd,OAAOL,EAAEO,UAER,GAAKD,SACV,CACIN,EAAEO,UAAUrF,YACZ,MAKA,YADAsF,OAAQR,EAAG,EAAG,gCAAiC,GASvD,GAAKA,EAAES,UAAYjI,KAAKkI,GACxB,CACIX,YAAYY,OAAQtB,EAAG,GACvB,OAIK,OAARC,KAAwB,KAARA,MAEjBA,IAAM,oBAAqBhH,UAAUyG,IAAI6B,UACzCpI,KAAKkI,GAAKpB,KAGd,IAAIuB,UAAY9I,EAAE+H,QAAQ,EAAM,GAAIxH,UAAUwI,OAAOD,UAAW,CAC5DE,cAAiBrB,MAAM,GAAGsB,MAAMC,MAChCC,UAAiB5B,IACjBmB,SAAiBnB,MAErBuB,UAAUZ,OAASzH,KACnBqI,UAAUhC,KAASL,MAAMM,SACzB+B,UAAU1B,MAASA,MACnBY,YAAYoB,KAAMN,WAGlBA,UAAUN,UAA4B,IAAf/B,MAAMG,OAAcH,MAAQkB,MAAM0B,YAEzDzB,cAAeR,OACVA,MAAMkC,WAEPC,kBAAmBnC,MAAMkC,WAGxBlC,MAAMoC,cAAiBpC,MAAMqC,iBAE9BrC,MAAMqC,eAAiBzJ,EAAEqB,QAAS+F,MAAMoC,YAAY,IAChDpC,MAAMoC,YAAY,GAAG,GAAKpC,MAAMoC,YAAY,IAIpDpC,MAAQC,UAAWrH,EAAE+H,QAAQ,EAAM,GAAIL,UAAYN,OAEnDsC,OAAQZ,UAAUa,UAAWvC,MAAO,CAChC,YACA,gBACA,UACA,QACA,aACA,QACA,cACA,aACA,eACA,cACA,iBAEJsC,OAAQZ,UAAW1B,MAAO,CACtB,kBACA,OACA,eACA,iBACA,gBACA,YACA,iBACA,cACA,kBACA,cACA,gBACA,iBACA,OACA,gBACA,YACA,sBACA,sBACA,WACA,cACA,QACA,CAAE,kBAAmB,kBACrB,CAAE,UAAW,mBACb,CAAE,eAAgB,mBAClB,CAAE,iBAAkB,mBACpB,CAAE,YAAa,UAEnBsC,OAAQZ,UAAU3G,QAASiF,MAAO,CAC9B,CAAE,WAAY,MACd,CAAE,gBAAiB,WACnB,CAAE,WAAY,MACd,CAAE,kBAAmB,eAEzBsC,OAAQZ,UAAUQ,UAAWlC,MAAO,kBAEpCwC,eAAgBd,UAAW,iBAAwB1B,MAAMyC,eAAqB,QAC9ED,eAAgBd,UAAW,iBAAwB1B,MAAM0C,eAAqB,QAC9EF,eAAgBd,UAAW,oBAAwB1B,MAAM2C,kBAAqB,QAC9EH,eAAgBd,UAAW,oBAAwB1B,MAAM4C,kBAAqB,QAC9EJ,eAAgBd,UAAW,gBAAwB1B,MAAM6C,cAAqB,QAC9EL,eAAgBd,UAAW,gBAAwB1B,MAAM8C,cAAqB,QAC9EN,eAAgBd,UAAW,uBAAwB1B,MAAM+C,aAAqB,QAC9EP,eAAgBd,UAAW,mBAAwB1B,MAAMgD,iBAAqB,QAC9ER,eAAgBd,UAAW,mBAAwB1B,MAAMiD,iBAAqB,QAC9ET,eAAgBd,UAAW,iBAAwB1B,MAAMkD,eAAqB,QAC9EV,eAAgBd,UAAW,oBAAwB1B,MAAMmD,kBAAqB,QAC9EzB,UAAU0B,QAAUC,mBAAoBrD,MAAMsD,OAE9CC,iBAAkB7B,WAClB,IAAI8B,SAAW9B,UAAU8B,SA+BzB,GA7BKxD,MAAMyD,WAKP7K,EAAE+H,OAAQ6C,SAAUrK,UAAUyG,IAAI8D,YAAa1D,MAAMwD,UAChDxD,MAAM2D,OAASrD,SAASqD,MAA0B,WAAlBrD,SAASqD,OAG1CjC,UAAUiC,KAAO,oBAEdjC,UAAUkC,SAGPhL,EAAEsB,cAAewH,UAAUkC,YAAgBlC,UAAUkC,SAASC,SACpEnC,UAAUkC,SAASC,OAAS,YAH5BnC,UAAUkC,SAAW,YAQzBhL,EAAE+H,OAAQ6C,SAAUrK,UAAUyG,IAAIkE,QAAS9D,MAAMwD,UAErDjD,MAAMwD,SAAUP,SAASQ,aACY3J,IAAhCqH,UAAUuC,oBAGXvC,UAAUuC,kBAAoBjE,MAAMkE,cACpCxC,UAAUyC,eAAiBnE,MAAMkE,eAER,OAAxBlE,MAAMoE,cACX,CACI1C,UAAU2C,eAAgB,EAC1B,IAAIC,IAAM1L,EAAEqB,QAAS+F,MAAMoE,eAC3B1C,UAAU6C,iBAAmBD,IAAMtE,MAAMoE,cAAc,GAAKpE,MAAMoE,cAClE1C,UAAU8C,eAAiBF,IAAMtE,MAAMoE,cAAc,GAAKpE,MAAMoE,cAGpE,IAAIlC,UAAYR,UAAUQ,UAC1BtJ,EAAE+H,QAAQ,EAAMuB,UAAWlC,MAAMkC,WAC5BA,UAAUuC,OAMX7L,EAAE8L,KAAM,CACJC,SAAU,OACVC,IAAK1C,UAAUuC,KACfI,QAAS,SAAWC,MAChB3C,kBAAmB2C,MACnBpE,oBAAqBJ,SAAS4B,UAAW4C,MACzClM,EAAE+H,QAAQ,EAAMuB,UAAW4C,MAC3BC,cAAerD,YAEnBsD,MAAO,WAEHD,cAAerD,cAGvBrB,gBAAiB,GAKU,OAA1BL,MAAMiF,kBAEPvD,UAAUuD,gBAAiB,CACvBzB,SAAS0B,WACT1B,SAAS2B,cAIjB,IAAIC,cAAgB1D,UAAUuD,gBAC1BI,OAAS9E,MAAM+E,SAAS,SAASC,KAAK,MAAMC,GAAG,IAGxC,IAFN5M,EAAE6M,SAAS,EAAM7M,EAAE8M,IAAKN,eAAe,SAASO,IACjD,OAAON,OAAOO,SAASD,UAEvB/M,EAAE,WAAYS,MAAMwM,YAAaT,cAAcU,KAAK,MACpDpE,UAAUqE,iBAAmBX,cAAcY,SAM/C,IACIC,cADAC,MAAQ,GAERC,OAAS9M,KAAK+M,qBAAqB,SAOvC,GANuB,IAAlBD,OAAO3G,SAER6G,gBAAiB3E,UAAU4E,SAAUH,OAAO,IAC5CD,MAAQK,gBAAiB7E,YAGJ,OAApB1B,MAAMwG,UAGP,IADAP,cAAgB,GACV/F,EAAE,EAAGH,KAAKmG,MAAM1G,OAASU,EAAEH,KAAOG,IAEpC+F,cAAcjE,KAAM,WAKxBiE,cAAgBjG,MAAMwG,UAG1B,IAAMtG,EAAE,EAAGH,KAAKkG,cAAczG,OAASU,EAAEH,KAAOG,IAE5CuG,aAAc/E,UAAWwE,MAAQA,MAAMhG,GAAK,MAShD,GANAwG,mBAAoBhF,UAAW1B,MAAM2G,aAAcV,eAAe,SAAU5H,KAAMuI,MAC9EC,iBAAkBnF,UAAWrD,KAAMuI,SAKlCvB,OAAO7F,OAAS,CACjB,IAAIsH,EAAI,SAAW5J,KAAM6J,MACrB,OAA6C,OAAtC7J,KAAKkD,aAAc,QAAQ2G,MAAkBA,KAAO,MAE/DnO,EAAGyM,OAAO,IAAKC,SAAS,UAAUxF,MAAM,SAAUI,EAAGhD,MACjD,IAAIJ,IAAM4E,UAAU8E,UAAUtG,GAC9B,GAAKpD,IAAImC,QAAUiB,EAAI,CACnB,IAAI8G,KAAOF,EAAG5J,KAAM,SAAY4J,EAAG5J,KAAM,SACrC+J,OAASH,EAAG5J,KAAM,WAAc4J,EAAG5J,KAAM,UAC/B,OAAT8J,MAA4B,OAAXC,SAClBnK,IAAImC,MAAQ,CACRxF,EAAQyG,EAAE,WACV8G,KAAiB,OAATA,KAAkB9G,EAAE,UAAU8G,UAAS3M,EAC/C0C,KAAiB,OAATiK,KAAkB9G,EAAE,UAAU8G,UAAS3M,EAC/C4M,OAAmB,OAAXA,OAAkB/G,EAAE,UAAU+G,YAAS5M,GAEnDwM,iBAAkBnF,UAAWxB,QAK7C,IAAIgH,SAAWxF,UAAUa,UACrB4E,WAAa,WAOb,QAAyB9M,IAApB2F,MAAMoH,UAA0B,CACjC,IAAIC,QAAU3F,UAAU0F,UACxB,IAAMlH,EAAE,EAAGH,KAAKsH,QAAQ7H,OAASU,EAAEH,KAAOG,IACtCmH,QAAQnH,GAAG,GAAKwB,UAAU8E,UAAUtG,GAAGoH,UAAU,GAMzDC,kBAAmB7F,WACdwF,SAASM,OACVhF,eAAgBd,UAAW,kBAAkB,WACzC,GAAKA,UAAU+F,QAAU,CACrB,IAAIC,MAAQC,eAAgBjG,WACxBkG,cAAgB,GACpBhP,EAAEkH,KAAM4H,OAAO,SAAUxH,EAAG2H,KACxBD,cAAcC,IAAIhL,KAAOgL,IAAIC,OAEjCC,gBAAiBrG,UAAW,KAAM,QAAS,CAACA,UAAWgG,MAAOE,gBAC9DI,YAAatG,eAIzBc,eAAgBd,UAAW,kBAAkB,YACpCA,UAAU+F,SAA0C,QAA/BQ,cAAevG,YAAyBwF,SAASgB,eACvEX,kBAAmB7F,aAExB,MAMH,IAAIyG,SAAW5H,MAAM+E,SAAS,WAAWxF,MAAM,WAC3CzG,KAAK+O,aAAexP,EAAES,MAAMgP,IAAI,mBAEhCC,MAAQ/H,MAAM+E,SAAS,SACL,IAAjBgD,MAAM9I,SACP8I,MAAQ1P,EAAE,YAAY2P,SAAShI,QAEnCmB,UAAUX,OAASuH,MAAM,GACzB,IAAIE,MAAQjI,MAAM+E,SAAS,SACL,IAAjBkD,MAAMhJ,SACPgJ,MAAQ5P,EAAE,YAAY2P,SAAShI,QAEnCmB,UAAU+G,OAASD,MAAM,GACzB,IAAIE,MAAQnI,MAAM+E,SAAS,SAc3B,GAbsB,IAAjBoD,MAAMlJ,QAAgB2I,SAAS3I,OAAS,IAA+B,KAAzBkC,UAAU3G,QAAQC,IAAsC,KAAzB0G,UAAU3G,QAAQE,MAGhGyN,MAAQ9P,EAAE,YAAY2P,SAAShI,QAEb,IAAjBmI,MAAMlJ,QAA4C,IAA5BkJ,MAAMpD,WAAW9F,OACxCe,MAAMwD,SAAUP,SAASmF,WAEnBD,MAAMlJ,OAAS,IACrBkC,UAAUT,OAASyH,MAAM,GACzBrC,gBAAiB3E,UAAUkH,SAAUlH,UAAUT,SAG9CjB,MAAM6I,OACP,IAAM3I,EAAE,EAAIA,EAAEF,MAAM6I,OAAOrJ,OAASU,IAChC4I,WAAYpH,UAAW1B,MAAM6I,OAAO3I,SAGlCwB,UAAU2C,eAA+C,OAA9B4D,cAAevG,aAKhDqH,SAAUrH,UAAW9I,EAAE8I,UAAU+G,QAAQnD,SAAS,OAGtD5D,UAAUsH,UAAYtH,UAAUuH,gBAAgBjD,QAEhDtE,UAAUwH,cAAe,GAID,IAAnB7I,gBACD0E,cAAerD,YAIlB1B,MAAMmJ,YAEPjC,SAASiC,YAAa,EACtB3G,eAAgBd,UAAW,iBAAkB0H,aAAc,cAC3DC,aAAc3H,UAAW1B,EAAOmH,aAGhCA,kBA/XA9F,OAAQ,KAAM,EAAG,kCAAkChI,KAAK2D,SAAS,IAAK,MAkY9EqC,MAAQ,KACDhG,MAmBPiQ,QAAU,GACVC,cAAgB,UAChBC,SAAW,SAGXC,SAAW,kFAEXC,iBAAmB,IAAIC,OAAQ,MAAQ,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAC/G,IAAK,KAAM7D,KAAK,OAAS,IAAK,KAW1B8D,sBAAwB,+CACxBC,OAAS,SAAWC,GACpB,OAAQA,IAAW,IAANA,GAAoB,MAANA,GAE3BC,QAAU,SAAWlJ,GACrB,IAAImJ,QAAUC,SAAUpJ,EAAG,IAC3B,OAAQqJ,MAAMF,UAAYG,SAAStJ,GAAKmJ,QAAU,MAIlDI,cAAgB,SAAWC,IAAKC,cAKhC,OAHOhB,QAAQgB,gBACXhB,QAAQgB,cAAgB,IAAIX,OAAQY,eAAgBD,cAAgB,MAElD,iBAARD,KAAqC,MAAjBC,aAC9BD,IAAIG,QAAS,MAAO,IAAKA,QAASlB,QAAQgB,cAAe,KACzDD,KAEJI,UAAY,SAAWX,EAAGQ,aAAcI,WACxC,IAAIC,QAAuB,iBAANb,EAIrB,QAAKD,OAAQC,KAGRQ,cAAgBK,UACjBb,EAAIM,cAAeN,EAAGQ,eAErBI,WAAaC,UACdb,EAAIA,EAAEU,QAASZ,sBAAuB,MAElCM,MAAOU,WAAWd,KAAQK,SAAUL,KAM5Ce,aAAe,SAAWf,EAAGQ,aAAcI,WAC3C,GAAKb,OAAQC,GACT,OAAO,EAEX,IAAIgB,KAPM,SAAWhB,GACrB,OAAOD,OAAQC,IAAoB,iBAANA,EAMlBiB,CAASjB,GACpB,OAASgB,QAELL,UAAWO,WAAYlB,GAAKQ,aAAcI,YAD1C,MAKJO,OAAS,SAAWnE,EAAGoE,KAAMC,OAC7B,IAAIC,IAAM,GACNlL,EAAE,EAAGmL,IAAIvE,EAAEtH,OAGf,QAAenF,IAAV8Q,MACD,KAAQjL,EAAEmL,IAAMnL,IACP4G,EAAE5G,IAAM4G,EAAE5G,GAAGgL,OACdE,IAAIpJ,KAAM8E,EAAE5G,GAAGgL,MAAMC,aAK7B,KAAQjL,EAAEmL,IAAMnL,IACP4G,EAAE5G,IACHkL,IAAIpJ,KAAM8E,EAAE5G,GAAGgL,OAI3B,OAAOE,KAIPE,aAAe,SAAWxE,EAAGnI,MAAOuM,KAAMC,OAE1C,IAAIC,IAAM,GACNlL,EAAE,EAAGmL,IAAI1M,MAAMa,OAGnB,QAAenF,IAAV8Q,MACD,KAAQjL,EAAEmL,IAAMnL,IACP4G,EAAEnI,MAAMuB,IAAIgL,OACbE,IAAIpJ,KAAM8E,EAAEnI,MAAMuB,IAAIgL,MAAMC,aAKpC,KAAQjL,EAAEmL,IAAMnL,IACZkL,IAAIpJ,KAAM8E,EAAEnI,MAAMuB,IAAIgL,OAG9B,OAAOE,KAEPG,OAAS,SAAWhM,IAAKiM,OAEzB,IACIC,IADAL,IAAM,QAEK/Q,IAAVmR,OACDA,MAAQ,EACRC,IAAMlM,MAGNkM,IAAMD,MACNA,MAAQjM,KAEZ,IAAM,IAAIW,EAAEsL,MAAQtL,EAAEuL,IAAMvL,IACxBkL,IAAIpJ,KAAM9B,GAEd,OAAOkL,KAEPM,aAAe,SAAW5E,GAG1B,IADA,IAAIsE,IAAM,GACAlL,EAAE,EAAGmL,IAAIvE,EAAEtH,OAASU,EAAEmL,IAAMnL,IAC7B4G,EAAE5G,IACHkL,IAAIpJ,KAAM8E,EAAE5G,IAGpB,OAAOkL,KAEPJ,WAAa,SAAWlB,GACxB,OAAOA,EAAEU,QAAShB,SAAU,KAgC5B/H,QAAU,SAAW5E,KAErB,GAvBgB,SAAWA,KAC3B,GAAKA,IAAI2C,OAAS,EACd,OAAO,EAIX,IAFA,IAAImM,OAAS9O,IAAImJ,QAAQgB,OACrB4E,KAAOD,OAAO,GACRzL,EAAE,EAAGmL,IAAIM,OAAOnM,OAASU,EAAEmL,IAAMnL,IAAM,CAC7C,GAAKyL,OAAOzL,KAAO0L,KACf,OAAO,EAEXA,KAAOD,OAAOzL,GAElB,OAAO,EAWF2L,CAAehP,KAChB,OAAOA,IAAImJ,QAMf,IAEI6B,IACA3H,EACA4L,EAHAV,IAAM,GAEHC,IAAIxO,IAAI2C,OACRuM,EAAE,EACL,IAAM7L,EAAE,EAAIA,EAAEmL,IAAMnL,IAAM,CAE1B,IADA2H,IAAMhL,IAAIqD,GACJ4L,EAAE,EAAIA,EAAEC,EAAID,IACTV,IAAIU,GAIbV,IAAIpJ,KAAM6F,KACVkE,IAEJ,OAAOX,KA4DX,SAASY,gBAAkBC,GAEvB,IAEIC,MACAC,OACAzG,IAAM,GACV9M,EAAEkH,KAAMmM,GAAG,SAAUG,MACjBF,MAAQE,IAAIF,MAAM,yBACiC,IANvC,8BAMYG,QAAQH,MAAM,GAAG,OAErCC,OAASC,IAAI5B,QAAS0B,MAAM,GAAIA,MAAM,GAAGjP,eACzCyI,IAAIyG,QAAUC,IACI,MAAbF,MAAM,IAEPF,gBAAiBC,EAAEG,UAI/BH,EAAEK,cAAgB5G,IAatB,SAAShF,oBAAsB7D,IAAK0P,KAAMC,OAKtC,IAAIC,aAHG5P,IAAIyP,eACPN,gBAAiBnP,KAGrBjE,EAAEkH,KAAMyM,MAAM,SAAUH,UAEE/R,KADtBoS,aAAe5P,IAAIyP,cAAcF,QACGI,YAAgCnS,IAAvBkS,KAAKE,gBAGd,MAA3BA,aAAaC,OAAO,IAGdH,KAAKE,gBACRF,KAAKE,cAAgB,IAEzB7T,EAAE+H,QAAQ,EAAM4L,KAAKE,cAAeF,KAAKH,MACzC1L,oBAAqB7D,IAAI4P,cAAeF,KAAKE,cAAeD,QAG5DD,KAAKE,cAAgBF,KAAKH,SAY1C,SAASjK,kBAAmBwK,MAExB,IAAIrM,SAAWnH,UAAUmH,SAAS4B,UAC9B0K,YAAcD,KAAKE,cAIhBF,KAAKG,aAAeF,aACE,mCAAzBtM,SAASwM,aAETxK,OAAQqK,KAAMA,KAAM,eAAgB,gBAGjCA,KAAKI,iBAAmBH,aACE,eAA7BtM,SAASyM,iBAETzK,OAAQqK,KAAMA,KAAM,eAAgB,mBAGnCA,KAAKK,iBACNL,KAAKM,WAAaN,KAAKK,gBAE3B,IAAIE,QAAUP,KAAKQ,SACdD,SACDE,gBAAiBF,SA1IzB/T,UAAUkU,KAAO,CASbC,SAAU,SAAW7N,GAAI8N,MACrB,IAEI3B,KACA4B,MAFAC,eAAqBpT,IAATkT,KAAqBA,KAAO,IAG5C,OAAO,WACH,IACIG,KAAOrU,KACPsU,KAAQ,IAAIC,KACZC,KAAOC,UACNlC,MAAQ+B,IAAM/B,KAAO6B,WACtBM,aAAcP,OACdA,MAAQQ,YAAY,WAChBpC,UAAOvR,EACPoF,GAAGwO,MAAOP,KAAMG,QACjBJ,aAGH7B,KAAO+B,IACPlO,GAAGwO,MAAOP,KAAMG,SAU5BK,YAAa,SAAWrG,KACpB,OAAOA,IAAI2C,QAASd,iBAAkB,UA4G9C,IAAIyE,aAAe,SAAWlC,EAAGmC,KAAMC,UAClBhU,IAAZ4R,EAAEmC,QACHnC,EAAEoC,KAAOpC,EAAEmC,QASnB,SAAS5N,cAAgB8N,MAErBH,aAAcG,KAAM,WAAiB,SACrCH,aAAcG,KAAM,aAAiB,cACrCH,aAAcG,KAAM,eAAiB,gBACrCH,aAAcG,KAAM,gBAAiB,iBACrCH,aAAcG,KAAM,QAAiB,aACrCH,aAAcG,KAAM,aAAiB,kBACrCH,aAAcG,KAAM,SAAiB,aACrCH,aAAcG,KAAM,aAAiB,mBACrCH,aAAcG,KAAM,aAAiB,kBACrCH,aAAcG,KAAM,YAAiB,WAEP,kBAAlBA,KAAKC,WACbD,KAAKC,SAAWD,KAAKC,SAAW,OAAS,IAEhB,kBAAjBD,KAAKE,UACbF,KAAKE,QAAUF,KAAKE,QAAU,OAAS,IAI3C,IAAIC,WAAaH,KAAKI,aACtB,GAAKD,WACD,IAAM,IAAIvO,EAAE,EAAGmL,IAAIoD,WAAWjP,OAASU,EAAEmL,IAAMnL,IACtCuO,WAAWvO,IACZQ,oBAAqBvH,UAAUwI,OAAOgN,QAASF,WAAWvO,IAW1E,SAASO,cAAgB6N,MAErBH,aAAcG,KAAM,YAAiB,aACrCH,aAAcG,KAAM,YAAiB,aACrCH,aAAcG,KAAM,gBAAiB,aACrCH,aAAcG,KAAM,gBAAiB,gBAErC,IAAIM,SAAWN,KAAKO,UACK,iBAAbD,UAA2BhW,EAAEqB,QAAS2U,YAC9CN,KAAKO,UAAY,CAAED,WAQ3B,SAASrL,iBAAkB1I,UAKvB,IAAO1B,UAAU2V,UAAY,CACzB,IAAIC,QAAU,GACd5V,UAAU2V,UAAYC,QAEtB,IAAIC,EAAIpW,EAAE,UACLyP,IAAK,CACF4G,SAAU,QACVC,IAAK,EACLC,MAA8B,EAAxBvW,EAAEC,QAAQuW,aAChBC,OAAQ,EACRvN,MAAO,EACPwN,SAAU,WAEbC,OACG3W,EAAE,UACGyP,IAAK,CACF4G,SAAU,WACVC,IAAK,EACLC,KAAM,EACNrN,MAAO,IACPwN,SAAU,WAEbC,OACG3W,EAAE,UACGyP,IAAK,CACFvG,MAAO,OACPuN,OAAQ,OAI3B9G,SAAU,QACXiH,MAAQR,EAAE1J,WACVmK,MAAQD,MAAMlK,WAWlByJ,QAAQW,SAAWF,MAAM,GAAGG,YAAcH,MAAM,GAAGI,YAInDb,QAAQc,gBAA2C,MAAzBJ,MAAM,GAAGE,aAAgD,MAAzBH,MAAM,GAAGI,YAGnEb,QAAQe,eAAuD,IAAtCC,KAAKC,MAAOP,MAAMQ,SAASd,MAEpDJ,QAAQmB,YAAYlB,EAAE,GAAGmB,wBAAwBrO,MACjDkN,EAAEnT,SAENjD,EAAE+H,OAAQ9F,SAASuV,SAAUjX,UAAU2V,WACvCjU,SAASE,QAAQsV,UAAYlX,UAAU2V,UAAUY,SAarD,SAASY,UAAY5C,KAAMjO,GAAI6O,KAAM9C,MAAOC,IAAK8E,KAE7C,IAEIC,MADAtQ,EAAIsL,MAEJiF,OAAQ,EAKZ,SAJcpW,IAATiU,OACDkC,MAAQlC,KACRmC,OAAQ,GAEJvQ,IAAMuL,KACHiC,KAAKgD,eAAexQ,KAG3BsQ,MAAQC,MACJhR,GAAI+Q,MAAO9C,KAAKxN,GAAIA,EAAGwN,MACvBA,KAAKxN,GACTuQ,OAAQ,EACRvQ,GAAKqQ,KAET,OAAOC,MAQX,SAAS/J,aAAc/E,UAAWiP,KAG9B,IAAIC,UAAYzX,UAAUmH,SAAS3D,OAC/B0B,KAAOqD,UAAU8E,UAAUhH,OAC3BqR,KAAOjY,EAAE+H,OAAQ,GAAIxH,UAAUwI,OAAOmP,QAASF,UAAW,CAC1DD,IAAOA,KAAY7X,SAASiY,cAAc,MAC1CC,OAAaJ,UAAUI,OAAYJ,UAAUI,OAAYL,IAAMA,IAAIM,UAAY,GAC/EpC,UAAa+B,UAAU/B,UAAY+B,UAAU/B,UAAY,CAACxQ,MAC1DY,MAAS2R,UAAU3R,MAAQ2R,UAAU3R,MAAQZ,KAC7C6S,IAAK7S,OAETqD,UAAU8E,UAAUxE,KAAM6O,MAI1B,IAAIpC,WAAa/M,UAAUyP,gBAC3B1C,WAAWpQ,MAAQzF,EAAE+H,OAAQ,GAAIxH,UAAUwI,OAAOgN,QAASF,WAAWpQ,OAEtEwI,iBAAkBnF,UAAWrD,KAAMzF,EAAE+X,KAAKhX,QAS9C,SAASkN,iBAAkBnF,UAAWrD,KAAM+S,UAExC,IAAIP,KAAOnP,UAAU8E,UAAUnI,MAC3BmF,SAAW9B,UAAU8B,SACrB6N,GAAKzY,EAAEiY,KAAKF,KAGhB,IAAOE,KAAKS,WAAa,CAErBT,KAAKS,WAAaD,GAAGE,KAAK,UAAY,KAEtC,IAAIC,GAAKH,GAAGE,KAAK,UAAY,IAAIrF,MAAM,0BAClCsF,IACDX,KAAKS,WAAaE,EAAE,IAIvBJ,iBAGD3Q,cAAe2Q,UAEf1Q,oBAAqBvH,UAAUmH,SAAS3D,OAAQyU,eAEpB/W,IAAvB+W,SAASK,WAA4BL,SAASnS,QAE/CmS,SAASnS,MAAQmS,SAASK,WAEzBL,SAASM,QAEVb,KAAKc,aAAeP,SAASM,OAI5BN,SAASQ,YAAeR,SAASrT,SAElCqT,SAASrT,OAASqT,SAASQ,WAE/BhZ,EAAE+H,OAAQkQ,KAAMO,UAChB9O,OAAQuO,KAAMO,SAAU,SAAU,mBAIN/W,IAAvB+W,SAASS,YAEVhB,KAAKhC,UAAY,CAAEuC,SAASS,YAEhCvP,OAAQuO,KAAMO,SAAU,cAG5B,IAAIU,SAAWjB,KAAK5R,MAChBA,MAAQoE,mBAAoByO,UAC5BC,QAAUlB,KAAKkB,QAAU1O,mBAAoBwN,KAAKkB,SAAY,KAC9DC,SAAW,SAAUnV,KACrB,MAAsB,iBAARA,MAA0C,IAAtBA,IAAIwP,QAAQ,MAElDwE,KAAKoB,UAAYrZ,EAAEsB,cAAe4X,YAC9BE,SAASF,SAAS9K,OAASgL,SAASF,SAAS/U,OAASiV,SAASF,SAAS7K,SAE5E4J,KAAKqB,QAAU,KACfrB,KAAKjU,UAAY,SAAUuV,QAASpV,KAAMqV,MACtC,IAAIC,UAAYpT,MAAOkT,QAASpV,UAAM1C,EAAW+X,MACjD,OAAOL,SAAWhV,KACdgV,QAASM,UAAWtV,KAAMoV,QAASC,MACnCC,WAERxB,KAAKyB,UAAY,SAAWH,QAAStK,IAAKuK,MACtC,OAAOG,mBAAoBT,SAApBS,CAAgCJ,QAAStK,IAAKuK,OAIhC,iBAAbN,WACRpQ,UAAU8Q,gBAAiB,GAGzB9Q,UAAUa,UAAUiF,QAEtBqJ,KAAK4B,WAAY,EACjBpB,GAAGtN,SAAUP,SAASkP,gBAG1B,IAAIC,MAA6C,IAAtC/Z,EAAE6M,QAAQ,MAAOoL,KAAKvJ,WAC7BsL,OAA+C,IAAvCha,EAAE6M,QAAQ,OAAQoL,KAAKvJ,WAC7BuJ,KAAK4B,YAAeE,MAASC,OAKzBD,OAASC,OAEf/B,KAAKgC,cAAgBrP,SAASsP,aAC9BjC,KAAKkC,iBAAmBvP,SAASwP,qBAE1BL,MAAQC,OAEf/B,KAAKgC,cAAgBrP,SAASyP,cAC9BpC,KAAKkC,iBAAmBvP,SAAS0P,sBAIjCrC,KAAKgC,cAAgBrP,SAAS2P,UAC9BtC,KAAKkC,iBAAmBvP,SAAS4P,WAhBjCvC,KAAKgC,cAAgBrP,SAASkP,cAC9B7B,KAAKkC,iBAAmB,IAwBhC,SAASM,sBAAwBxY,UAG7B,IAAuC,IAAlCA,SAAS0H,UAAU+Q,WACxB,CACI,IAAI3Y,QAAUE,SAAS2L,UACvB+M,yBAA0B1Y,UAC1B,IAAM,IAAIqF,EAAE,EAAIH,KAAKpF,QAAQ6E,OAASU,EAAEH,KAAOG,IAE3CvF,QAAQuF,GAAGyQ,IAAI9O,MAAMC,MAAQnH,QAAQuF,GAAGsT,OAGhD,IAAI1Y,OAASD,SAASE,QACH,KAAdD,OAAOG,IAA2B,KAAdH,OAAOE,IAE5BE,cAAeL,UAEnBkN,gBAAiBlN,SAAU,KAAM,gBAAiB,CAACA,WAUvD,SAAS4Y,wBAAyB/R,UAAWgS,QAEzC,IAAIC,MAAQC,cAAelS,UAAW,YACtC,MAAgC,iBAAlBiS,MAAMD,QAChBC,MAAMD,QACN,KAUR,SAASG,wBAAyBnS,UAAWgS,QAEzC,IAAIC,MAAQC,cAAelS,UAAW,YAClCoS,KAAOlb,EAAE6M,QAASiO,OAAQC,OAC9B,OAAiB,IAAVG,KAAcA,KAAO,KAQhC,SAASC,iBAAkBrS,WAEvB,IAAIsS,IAAM,EAOV,OALApb,EAAEkH,KAAM4B,UAAU8E,WAAW,SAAWtG,EAAGpD,KAClCA,IAAImX,UAA0C,SAA9Brb,EAAEkE,IAAI6T,KAAKtI,IAAI,YAChC2L,SAGDA,IAUX,SAASJ,cAAelS,UAAWwS,QAE/B,IAAIpN,EAAI,GAMR,OALAlO,EAAE8M,IAAKhE,UAAU8E,WAAW,SAASqB,IAAK3H,GACjC2H,IAAIqM,SACLpN,EAAE9E,KAAM9B,MAGT4G,EAOX,SAASqN,eAAiBtZ,UAEtB,IAGIqF,EAAGmL,IAAKS,EAAGsI,IAAKrI,EAAGsI,IACnBvX,IAAKwX,aAAcC,MAJnB5Z,QAAUE,SAAS2L,UACnB7M,KAAOkB,SAASe,OAChB4Y,MAAQrb,UAAUyG,IAAI7C,KAAK0X,OAI/B,IAAMvU,EAAE,EAAGmL,IAAI1Q,QAAQ6E,OAASU,EAAEmL,IAAMnL,IAGpC,GADAqU,MAAQ,KADRzX,IAAMnC,QAAQuF,IAEHwR,OAAS5U,IAAI6U,aACpB7U,IAAI4U,MAAQ5U,IAAI6U,kBAEf,IAAO7U,IAAI4U,MAAQ,CACpB,IAAM5F,EAAE,EAAGsI,IAAII,MAAMhV,OAASsM,EAAEsI,IAAMtI,IAAM,CACxC,IAAMC,EAAE,EAAGsI,IAAI1a,KAAK6F,OAASuM,EAAEsI,WAGTha,IAAbka,MAAMxI,KACPwI,MAAMxI,GAAK2I,eAAgB7Z,SAAUkR,EAAG7L,EAAG,UAE/CoU,aAAeE,MAAM1I,GAAIyI,MAAMxI,GAAIlR,YAMZiR,IAAM0I,MAAMhV,OAAO,IAKpB,SAAjB8U,aAjB4BvI,KAuBrC,GAAKuI,aAAe,CAChBxX,IAAI4U,MAAQ4C,aACZ,OAIDxX,IAAI4U,QACP5U,IAAI4U,MAAQ,WAgB5B,SAAShL,mBAAoBhF,UAAWiT,UAAWC,OAAQnV,IAEvD,IAAIS,EAAGH,KAAM+L,EAAG+I,KAAM9I,EAAG+I,KAAMC,IAC3Bpa,QAAU+G,UAAU8E,UAExB,GAAKmO,UAGD,IAAMzU,EAAEyU,UAAUnV,OAAO,EAAIU,GAAG,EAAIA,IACpC,CAGI,IAAI8U,cAA2B3a,KAF/B0a,IAAMJ,UAAUzU,IAEG+U,QACfF,IAAIE,QACJF,IAAIC,SAKR,IAJOpc,EAAEqB,QAAS+a,YAEdA,SAAW,CAAEA,WAEXlJ,EAAE,EAAG+I,KAAKG,SAASxV,OAASsM,EAAE+I,KAAO/I,IAEvC,GAA4B,iBAAhBkJ,SAASlJ,IAAmBkJ,SAASlJ,IAAM,EACvD,CAEI,KAAOnR,QAAQ6E,QAAUwV,SAASlJ,IAE9BrF,aAAc/E,WAGlBjC,GAAIuV,SAASlJ,GAAIiJ,UAEhB,GAA4B,iBAAhBC,SAASlJ,IAAmBkJ,SAASlJ,GAAK,EAGvDrM,GAAI9E,QAAQ6E,OAAOwV,SAASlJ,GAAIiJ,UAE/B,GAA4B,iBAAhBC,SAASlJ,GAGtB,IAAMC,EAAE,EAAG+I,KAAKna,QAAQ6E,OAASuM,EAAE+I,KAAO/I,KAElB,QAAfiJ,SAASlJ,IACTlT,EAAE+B,QAAQoR,GAAG4E,KAAK/K,SAAUoP,SAASlJ,MAEtCrM,GAAIsM,EAAGgJ,KAQ/B,GAAKH,OAED,IAAM1U,EAAE,EAAGH,KAAK6U,OAAOpV,OAASU,EAAEH,KAAOG,IAErCT,GAAIS,EAAG0U,OAAO1U,IAiB1B,SAAS4I,WAAapH,UAAWwT,QAAS5Z,IAAK6Z,OAG3C,IAAI/X,KAAOsE,UAAU9F,OAAO4D,OACxB4V,MAAQxc,EAAE+H,QAAQ,EAAM,GAAIxH,UAAUwI,OAAO0T,KAAM,CACnDxY,IAAKvB,IAAM,MAAQ,OACnB4V,IAAK9T,OAETgY,MAAME,OAASJ,QACfxT,UAAU9F,OAAOoG,KAAMoT,OAIvB,IAFA,IAAIza,QAAU+G,UAAU8E,UAEdtG,EAAE,EAAGH,KAAKpF,QAAQ6E,OAASU,EAAEH,KAAOG,IAE1CvF,QAAQuF,GAAGwR,MAAQ,KAGvBhQ,UAAUuH,gBAAgBjH,KAAM5E,MAChC,IAAImE,GAAKG,UAAU0B,QAAS8R,SAS5B,YARY7a,IAAPkH,KACDG,UAAU6T,KAAKhU,IAAM6T,QAGpB9Z,KAASoG,UAAUa,UAAU2F,cAE9BsN,YAAa9T,UAAWtE,KAAM9B,IAAK6Z,OAEhC/X,KAYX,SAAS2L,SAAUlO,SAAU4a,KAEzB,IAAIrb,IAKJ,OAHQqb,eAAe7c,IACnB6c,IAAM7c,EAAE6c,MAELA,IAAI/P,KAAK,SAAUxF,EAAGyF,IAEzB,OADAvL,IAAMsb,kBAAmB7a,SAAU8K,IAC5BmD,WAAYjO,SAAUT,IAAIT,KAAMgM,GAAIvL,IAAIub,UAmCvD,SAASjB,eAAgB7Z,SAAU+a,OAAQC,OAAQ9Y,MAE/C,IAAIzC,KAAiBO,SAASib,MAC1BhZ,IAAiBjC,SAAS2L,UAAUqP,QACpC1D,QAAiBtX,SAASe,OAAOga,QAAQN,OACzCS,eAAiBjZ,IAAIkZ,gBACrBC,SAAiBnZ,IAAIF,UAAWuV,QAASpV,KAAM,CAC/ClC,SAAUA,SACVT,IAAUwb,OACV9Y,IAAU+Y,SAEd,QAAkBxb,IAAb4b,SAOD,OANKpb,SAASqb,YAAc5b,MAA2B,OAAnByb,iBAChC1U,OAAQxG,SAAU,EAAG,gCACE,mBAAXiC,IAAImC,MAAoB,aAAe,IAAInC,IAAImC,MAAM,KAC7D,YAAY2W,OAAO,YAAYC,OAAQ,GAC3Chb,SAASqb,WAAa5b,MAEnByb,eAIX,GAAME,WAAa9D,SAAwB,OAAb8D,UAAyC,OAAnBF,qBAAoC1b,IAAT0C,MAG1E,GAAyB,mBAAbkZ,SAGb,OAAOA,SAASna,KAAMqW,cALtB8D,SAAWF,eAOf,OAAkB,OAAbE,UAA6B,WAARlZ,KACf,GAEJkZ,SAUX,SAASE,eAAgBtb,SAAU+a,OAAQC,OAAQhO,KAE/C,IAAI/K,IAAUjC,SAAS2L,UAAUqP,QAC7B1D,QAAUtX,SAASe,OAAOga,QAAQN,OACtCxY,IAAIwV,UAAWH,QAAStK,IAAK,CACzBhN,SAAUA,SACVT,IAAUwb,OACV9Y,IAAU+Y,SAIlB,IAAIO,UAAY,WACZC,OAAS,QAMb,SAASC,oBAAqBC,KAE1B,OAAO3d,EAAE8M,IAAK6Q,IAAIrK,MAAM,kBAAoB,CAAC,KAAK,SAAWrL,GACzD,OAAOA,EAAE2J,QAAQ,QAAS,QAUlC,SAASnH,mBAAoBmT,SAEzB,GAAK5d,EAAEsB,cAAesc,SACtB,CAEI,IAAIvK,EAAI,GAMR,OALArT,EAAEkH,KAAM0W,SAAS,SAAUpK,IAAKvE,KACvBA,MACDoE,EAAEG,KAAO/I,mBAAoBwE,SAG9B,SAAUlO,KAAMoD,KAAM3C,IAAKgY,MAC9B,IAAIZ,EAAIvF,EAAElP,OAASkP,EAAExS,EACrB,YAAaY,IAANmX,EACHA,EAAE7X,KAAMoD,KAAM3C,IAAKgY,MACnBzY,MAGP,GAAiB,OAAZ6c,QAGN,OAAO,SAAU7c,MACb,OAAOA,MAGV,GAAwB,mBAAZ6c,QAEb,OAAO,SAAU7c,KAAMoD,KAAM3C,IAAKgY,MAC9B,OAAOoE,QAAS7c,KAAMoD,KAAM3C,IAAKgY,OAGpC,GAAwB,iBAAZoE,UAAmD,IAA1BA,QAAQnK,QAAQ,OACtB,IAA1BmK,QAAQnK,QAAQ,OAAyC,IAA1BmK,QAAQnK,QAAQ,KAmErD,OAAO,SAAU1S,MACb,OAAOA,KAAK6c,UA5DhB,IAAIC,UAAY,SAAU9c,KAAMoD,KAAMF,KAClC,IAAI6Z,cAAeC,aAAcvL,IAAKwL,SACtC,GAAa,KAAR/Z,IAGD,IADA,IAAIiK,EAAIwP,oBAAqBzZ,KACnBqD,EAAE,EAAGH,KAAK+G,EAAEtH,OAASU,EAAEH,KAAOG,IACxC,CAII,GAFAwW,cAAgB5P,EAAE5G,GAAGgM,MAAMkK,WAC3BO,aAAe7P,EAAE5G,GAAGgM,MAAMmK,QACrBK,cACL,CAYI,GAVA5P,EAAE5G,GAAK4G,EAAE5G,GAAGsK,QAAQ4L,UAAW,IAEjB,KAATtP,EAAE5G,KACHvG,KAAOA,KAAKmN,EAAE5G,KAElBkL,IAAM,GAENtE,EAAEtF,OAAQ,EAAGtB,EAAE,GACf0W,SAAW9P,EAAEhB,KAAK,KAEblN,EAAEqB,QAASN,MACZ,IAAM,IAAImS,EAAE,EAAG+I,KAAKlb,KAAK6F,OAASsM,EAAE+I,KAAO/I,IACvCV,IAAIpJ,KAAMyU,UAAW9c,KAAKmS,GAAI/O,KAAM6Z,WAK5C,IAAI9Q,KAAO4Q,cAAc,GAAGG,UAAU,EAAGH,cAAc,GAAGlX,OAAO,GACjE7F,KAAe,KAAPmM,KAAasF,IAAMA,IAAItF,KAAKA,MAGpC,MAEC,GAAK6Q,aAGN7P,EAAE5G,GAAK4G,EAAE5G,GAAGsK,QAAQ6L,OAAQ,IAC5B1c,KAAOA,KAAKmN,EAAE5G,UAJb,CAOL,GAAc,OAATvG,WAAgCU,IAAfV,KAAKmN,EAAE5G,IAEzB,OAEJvG,KAAOA,KAAKmN,EAAE5G,KAGtB,OAAOvG,MAEX,OAAO,SAAUA,KAAMoD,MACnB,OAAO0Z,UAAW9c,KAAMoD,KAAMyZ,UAkB1C,SAASjE,mBAAoBiE,SAEzB,GAAK5d,EAAEsB,cAAesc,SAOlB,OAAOjE,mBAAoBiE,QAAQ/c,GAElC,GAAiB,OAAZ+c,QAGN,OAAO,aAEN,GAAwB,mBAAZA,QAEb,OAAO,SAAU7c,KAAMkO,IAAKuK,MACxBoE,QAAS7c,KAAM,MAAOkO,IAAKuK,OAG9B,GAAwB,iBAAZoE,UAAmD,IAA1BA,QAAQnK,QAAQ,OACtB,IAA1BmK,QAAQnK,QAAQ,OAAyC,IAA1BmK,QAAQnK,QAAQ,KA2ErD,OAAO,SAAU1S,KAAMkO,KACnBlO,KAAK6c,SAAW3O,KAzEpB,IAAIiP,QAAU,SAAUnd,KAAMkO,IAAKhL,KAI/B,IAHA,IAAoCka,EAEhCL,cAAeC,aAAc1K,EAAG2K,SAFhC9P,EAAIwP,oBAAqBzZ,KACzBma,MAAQlQ,EAAEA,EAAEtH,OAAO,GAEbU,EAAE,EAAGH,KAAK+G,EAAEtH,OAAO,EAAIU,EAAEH,KAAOG,IAC1C,CAII,GAFAwW,cAAgB5P,EAAE5G,GAAGgM,MAAMkK,WAC3BO,aAAe7P,EAAE5G,GAAGgM,MAAMmK,QACrBK,cACL,CAQI,GAPA5P,EAAE5G,GAAK4G,EAAE5G,GAAGsK,QAAQ4L,UAAW,IAC/Bzc,KAAKmN,EAAE5G,IAAM,IAEb6W,EAAIjQ,EAAEd,SACJxE,OAAQ,EAAGtB,EAAE,GACf0W,SAAWG,EAAEjR,KAAK,KAEblN,EAAEqB,QAAS4N,KAEZ,IAAM,IAAIiE,EAAE,EAAG+I,KAAKhN,IAAIrI,OAASsM,EAAE+I,KAAO/I,IAGtCgL,QADA7K,EAAI,GACQpE,IAAIiE,GAAI8K,UACpBjd,KAAKmN,EAAE5G,IAAI8B,KAAMiK,QAQrBtS,KAAKmN,EAAE5G,IAAM2H,IAIjB,OAEM8O,eAGN7P,EAAE5G,GAAK4G,EAAE5G,GAAGsK,QAAQ6L,OAAQ,IAC5B1c,KAAOA,KAAKmN,EAAE5G,IAAK2H,MAIH,OAAflO,KAAKmN,EAAE5G,UAA+B7F,IAAfV,KAAKmN,EAAE5G,MAE/BvG,KAAKmN,EAAE5G,IAAM,IAEjBvG,KAAOA,KAAKmN,EAAE5G,IAGb8W,MAAM9K,MAAMmK,QAGb1c,KAAOA,KAAKqd,MAAMxM,QAAQ6L,OAAQ,KAAMxO,KAMxClO,KAAKqd,MAAMxM,QAAQ4L,UAAW,KAAOvO,KAG7C,OAAO,SAAUlO,KAAMkO,KACnB,OAAOiP,QAASnd,KAAMkO,IAAK2O,UAiBvC,SAASS,iBAAmBpc,UAExB,OAAOoQ,OAAQpQ,SAASe,OAAQ,UAOpC,SAASsb,cAAerc,UAEpBA,SAASe,OAAO4D,OAAS,EACzB3E,SAASoO,gBAAgBzJ,OAAS,EAClC3E,SAASmO,UAAUxJ,OAAS,EAC5B3E,SAAS0a,KAAO,GAUpB,SAAS4B,eAAgBrQ,EAAGsQ,QAAS5V,QAGjC,IADA,IAAI6V,cAAgB,EACVnX,EAAE,EAAGH,KAAK+G,EAAEtH,OAASU,EAAEH,KAAOG,IAE/B4G,EAAE5G,IAAMkX,QAETC,aAAenX,EAET4G,EAAE5G,GAAKkX,SAEbtQ,EAAE5G,MAGY,GAAjBmX,mBAAiChd,IAAXmH,QAEvBsF,EAAEtF,OAAQ6V,aAAc,GAmBhC,SAASC,cAAezc,SAAU+a,OAAQ/Y,IAAKgZ,QAE3C,IACI3V,EAAGmL,IADHjR,IAAMS,SAASe,OAAOga,QAEtB2B,UAAY,SAAWra,KAAMJ,KAI7B,KAAQI,KAAKsa,WAAWhY,QACpBtC,KAAKua,YAAava,KAAKwa,YAE3Bxa,KAAK+T,UAAYyD,eAAgB7Z,SAAU+a,OAAQ9Y,IAAK,YAG5D,GAAa,QAARD,MAAqBA,KAAe,SAARA,KAA+B,QAAZzC,IAAIyC,KAOnD,CAED,IAAI8Y,MAAQvb,IAAIud,QAChB,GAAKhC,MACD,QAAgBtb,IAAXwb,OACD0B,UAAW5B,MAAME,QAASA,aAG1B,IAAM3V,EAAE,EAAGmL,IAAIsK,MAAMnW,OAASU,EAAEmL,IAAMnL,IAClCqX,UAAW5B,MAAMzV,GAAIA,QAdjC9F,IAAIkb,OAASI,kBACL7a,SAAUT,IAAKyb,YAAmBxb,IAAXwb,YAAuBxb,EAAYD,IAAIkb,QAEjE3b,KAkBTS,IAAIwd,WAAa,KACjBxd,IAAIyd,aAAe,KAGnB,IAAIC,KAAOjd,SAAS2L,UACpB,QAAgBnM,IAAXwb,OACDiC,KAAKjC,QAAQnE,MAAQ,SAEpB,CACD,IAAMxR,EAAE,EAAGmL,IAAIyM,KAAKtY,OAASU,EAAEmL,IAAMnL,IACjC4X,KAAK5X,GAAGwR,MAAQ,KAGpBqG,iBAAkBld,SAAUT,MAoBpC,SAASsb,kBAAmB7a,SAAUT,IAAKyb,OAAQ/L,GAE/C,IAGI/C,KAAMjK,IAAUkb,SAFhBC,IAAM,GACNC,GAAK9d,IAAIsd,WACExX,EAAE,EACbvF,QAAUE,SAAS2L,UACnB2R,WAAatd,SAAS2X,eAE1B1I,OAAUzP,IAANyP,EACAA,EACAqO,WACI,GACA,GACR,IAAI5G,KAAO,SAAWgF,IAAK2B,IACvB,GAAoB,iBAAR3B,IAAmB,CAC3B,IAAIrF,IAAMqF,IAAIlK,QAAQ,KACtB,IAAc,IAAT6E,IAAa,CACd,IAAIK,KAAOgF,IAAIM,UAAW3F,IAAI,GACjBqB,mBAAoBgE,IACjC6B,CAAQtO,EAAGoO,GAAG9X,aAAcmR,UAKpC8G,YAAc,SAAWnb,WACT7C,IAAXwb,QAAwBA,SAAW3V,IACpCpD,IAAMnC,QAAQuF,GACd8X,SAAWpf,EAAE0f,KAAKpb,KAAK+T,WAClBnU,KAAOA,IAAImV,WACCM,mBAAoBzV,IAAImC,MAAMxF,EAC3C2e,CAAQtO,EAAGkO,UACXzG,KAAMzU,IAAImC,MAAM+H,KAAM9J,MACtBqU,KAAMzU,IAAImC,MAAMlC,KAAMG,MACtBqU,KAAMzU,IAAImC,MAAMgI,OAAQ/J,OAKnBib,YACMrb,IAAIoV,UAEPpV,IAAIoV,QAAUK,mBAAoBzV,IAAImC,QAE1CnC,IAAIoV,QAASpI,EAAGkO,WAGhBlO,EAAE5J,GAAK8X,UAInB9X,KAEJ,GAAKgY,GAED,KAAQA,IAES,OADbnR,KAAOmR,GAAGlb,SAASQ,gBACU,MAARuJ,OACjBsR,YAAaH,IACbD,IAAIjW,KAAMkW,KAEdA,GAAKA,GAAGK,iBAMZ,IAAM,IAAIzM,EAAE,EAAGsI,KADf6D,IAAM7d,IAAIud,SACanY,OAASsM,EAAEsI,IAAMtI,IACpCuM,YAAaJ,IAAInM,IAIzB,IAAI0M,QAAUpe,IAAIsd,WAAatd,IAAMA,IAAIkB,IACzC,GAAKkd,QAAU,CACX,IAAIjX,GAAKiX,QAAQpY,aAAc,MAC1BmB,IACDgR,mBAAoB1X,SAASyI,MAA7BiP,CAAsCzI,EAAGvI,IAGjD,MAAO,CACH5H,KAAMmQ,EACN6L,MAAOsC,KAaf,SAASzC,YAAc9T,UAAWtE,KAAMqb,MAAOtD,OAE3C,IAII7Z,IAAKod,IAAK7H,KACV3Q,EAAGH,KAJH3F,IAAMsH,UAAU9F,OAAOwB,MACvB+U,QAAU/X,IAAIkb,OACdK,MAAQ,GAGZ,GAAiB,OAAZvb,IAAIkB,IACT,CAWI,IAVAA,IAAMmd,OAAS3f,SAASiY,cAAc,MACtC3W,IAAIkB,IAAMA,IACVlB,IAAIud,QAAUhC,MAIdra,IAAIqd,aAAevb,KAEnB2a,iBAAkBrW,UAAWtH,KAEvB8F,EAAE,EAAGH,KAAK2B,UAAU8E,UAAUhH,OAASU,EAAEH,KAAOG,IAElD2Q,KAAOnP,UAAU8E,UAAUtG,IAC3BwY,IAAMD,MAAQtD,MAAMjV,GAAKpH,SAASiY,cAAeF,KAAK+H,YAClDC,cAAgB,CAChBze,IAAKgD,KACLT,OAAQuD,GAEZyV,MAAM3T,KAAM0W,KAELD,QAAS5H,KAAKkB,SAAWlB,KAAK5R,QAAUiB,GACxCtH,EAAEsB,cAAc2W,KAAK5R,QAAU4R,KAAK5R,MAAMxF,IAAMyG,EAAE,aAErDwY,IAAIzH,UAAYyD,eAAgBhT,UAAWtE,KAAM8C,EAAG,YAGnD2Q,KAAK9S,SAEN2a,IAAI9G,WAAa,IAAIf,KAAK9S,QAGzB8S,KAAKoD,WAAcwE,MAEpBnd,IAAIwd,YAAaJ,MAET7H,KAAKoD,UAAYwE,OAEzBC,IAAI1X,WAAWyW,YAAaiB,KAE3B7H,KAAKkI,eAENlI,KAAKkI,cAAcjd,KAAM4F,UAAUN,UAC/BsX,IAAKhE,eAAgBhT,UAAWtE,KAAM8C,GAAKiS,QAAS/U,KAAM8C,GAItE6H,gBAAiBrG,UAAW,uBAAwB,KAAM,CAACpG,IAAK6W,QAAS/U,OAI7EhD,IAAIkB,IAAI0d,aAAc,OAAQ,OASlC,SAASjB,iBAAkBld,SAAUT,KAEjC,IAAI6e,GAAK7e,IAAIkB,IACT3B,KAAOS,IAAIkb,OACf,GAAK2D,GAAK,CACN,IAAI1X,GAAK1G,SAASuI,QAASzJ,MAI3B,GAHK4H,KACD0X,GAAG1X,GAAKA,IAEP5H,KAAKuf,YAAc,CAEpB,IAAIpS,EAAInN,KAAKuf,YAAYC,MAAM,KAC/B/e,IAAIgf,OAAShf,IAAIgf,OACb3X,QAASrH,IAAIgf,OAAOC,OAAQvS,IAC5BA,EACJlO,EAAEqgB,IACGpT,YAAazL,IAAIgf,OAAOtT,KAAK,MAC7B/B,SAAUpK,KAAKuf,aAEnBvf,KAAK2f,YACN1gB,EAAEqgB,IAAI1H,KAAM5X,KAAK2f,YAEhB3f,KAAK4f,YACN3gB,EAAEqgB,IAAItf,KAAMA,KAAK4f,aAS7B,SAASC,aAAc9X,WAEnB,IAAIxB,EAAGmL,IAAKnO,KAAM9C,IAAKuC,OACnB2L,MAAQ5G,UAAUX,OAClB2H,MAAQhH,UAAUT,OAClBwY,aAA6C,IAA9B7gB,EAAE,SAAU0P,OAAO9I,OAClCsE,QAAUpC,UAAU8B,SACpB7I,QAAU+G,UAAU8E,UAIxB,IAHKiT,eACDrf,IAAMxB,EAAE,SAAS2P,SAAUD,QAEzBpI,EAAE,EAAGmL,IAAI1Q,QAAQ6E,OAASU,EAAEmL,IAAMnL,IACpCvD,OAAShC,QAAQuF,GACjBhD,KAAOtE,EAAG+D,OAAOgU,KAAM5M,SAAUpH,OAAOoB,QACnC0b,cACDvc,KAAKqL,SAAUnO,KAGdsH,UAAUa,UAAUiF,QACrBtK,KAAK6G,SAAUpH,OAAOkW,gBACI,IAArBlW,OAAO8V,YACRvV,KACKqU,KAAM,WAAY7P,UAAUgY,WAC5BnI,KAAM,gBAAiB7P,UAAUJ,UACtCqY,sBAAuBjY,UAAW/E,OAAOgU,IAAKzQ,KAGjDvD,OAAOqU,QAAU9T,KAAK,GAAG+T,WAC1B/T,KAAK4N,KAAMnO,OAAOqU,QAEtB4I,YAAalY,UAAW,SAAxBkY,CACIlY,UAAWxE,KAAMP,OAAQmH,SAejC,GAZK2V,cACDpT,gBAAiB3E,UAAU4E,SAAUgC,OAGzC1P,EAAE0P,OAAO/C,KAAK,OAAOgM,KAAK,OAAQ,OAElC3Y,EAAE0P,OAAO/C,KAAK,kBAAkBxB,SAAUD,QAAQ+V,WAClDjhB,EAAE8P,OAAOnD,KAAK,kBAAkBxB,SAAUD,QAAQgW,WAKnC,OAAVpR,MAAiB,CAClB,IAAIiN,MAAQjU,UAAUkH,SAAS,GAC/B,IAAM1I,EAAE,EAAGmL,IAAIsK,MAAMnW,OAASU,EAAEmL,IAAMnL,KAClCvD,OAAShC,QAAQuF,IACV6Z,IAAMpE,MAAMzV,GAAGhD,KACjBP,OAAOoB,QACRnF,EAAE+D,OAAOod,KAAKhW,SAAUpH,OAAOoB,SAkB/C,SAASic,YAAatY,UAAWuY,SAAUC,gBAEvC,IAAIha,EAAGH,KAAM+L,EAAG+I,KAAM9I,EAAGiD,EAAGmL,SAIxBC,SAAUC,SAHVC,QAAU,GACVC,SAAW,GACXC,SAAW9Y,UAAU8E,UAAUhH,OAEnC,GAAOya,SAAP,CASA,SALyB5f,IAAnB6f,iBAEFA,gBAAiB,GAGfha,EAAE,EAAGH,KAAKka,SAASza,OAASU,EAAEH,KAAOG,IAC3C,CAII,IAHAoa,QAAQpa,GAAK+Z,SAAS/Z,GAAG8F,QACzBsU,QAAQpa,GAAG5E,IAAM2e,SAAS/Z,GAAG5E,IAEvBwQ,EAAE0O,SAAS,EAAI1O,GAAG,EAAIA,IAElBpK,UAAU8E,UAAUsF,GAAGmI,UAAaiG,gBAEtCI,QAAQpa,GAAGsB,OAAQsK,EAAG,GAI9ByO,SAASvY,KAAM,IAEnB,IAAM9B,EAAE,EAAGH,KAAKua,QAAQ9a,OAASU,EAAEH,KAAOG,IAC1C,CAGI,GAFAia,SAAWG,QAAQpa,GAAG5E,IAIlB,KAAQ0T,EAAImL,SAASzC,YAEjByC,SAAS1C,YAAazI,GAG9B,IAAMlD,EAAE,EAAG+I,KAAKyF,QAAQpa,GAAGV,OAASsM,EAAE+I,KAAO/I,IAOzC,GALAsO,SAAW,EACXC,SAAW,OAIahgB,IAAnBkgB,SAASra,GAAG4L,GACjB,CAII,IAHAqO,SAASrB,YAAawB,QAAQpa,GAAG4L,GAAG5O,MACpCqd,SAASra,GAAG4L,GAAK,OAEezR,IAAxBigB,QAAQpa,EAAEka,WACVE,QAAQpa,GAAG4L,GAAG5O,MAAQod,QAAQpa,EAAEka,UAAUtO,GAAG5O,MAEjDqd,SAASra,EAAEka,UAAUtO,GAAK,EAC1BsO,WAGJ,UAAmC/f,IAA3BigB,QAAQpa,GAAG4L,EAAEuO,WACbC,QAAQpa,GAAG4L,GAAG5O,MAAQod,QAAQpa,GAAG4L,EAAEuO,UAAUnd,MACrD,CAEI,IAAM6O,EAAE,EAAIA,EAAEqO,SAAWrO,IAErBwO,SAASra,EAAE6L,GAAGD,EAAEuO,UAAY,EAEhCA,WAGJzhB,EAAE0hB,QAAQpa,GAAG4L,GAAG5O,MACXqU,KAAK,UAAW6I,UAChB7I,KAAK,UAAW8I,aAUrC,SAASI,QAAS/Y,WAGd,IAAIgZ,SAAW3S,gBAAiBrG,UAAW,oBAAqB,UAAW,CAACA,YAC5E,IAAuC,IAAlC9I,EAAE6M,SAAS,EAAOiV,UAAvB,CAKA,IAAIC,OAAS,GACTC,UAAY,EACZ3V,gBAAkBvD,UAAUuD,gBAC5B4V,SAAW5V,gBAAgBzF,OAC3Bsb,MAAQpZ,UAAUQ,UAClB+B,kBAAoBvC,UAAUuC,kBAC9B8W,YAA4C,OAA9B9S,cAAevG,WAC7BsH,UAAYtH,UAAUsH,UAC1BtH,UAAUsZ,UAAW,OAEM3gB,IAAtB4J,oBAA0D,IAAvBA,oBAEpCvC,UAAUyC,eAAiB4W,YACvB9W,kBACAA,mBAAqBvC,UAAUuZ,mBAC3B,EACAhX,kBACRvC,UAAUuC,mBAAqB,GAEnC,IAAIC,cAAgBxC,UAAUyC,eAC1B+W,YAAcxZ,UAAUyZ,eAE5B,GAAKzZ,UAAU2C,cAEX3C,UAAU2C,eAAgB,EAC1B3C,UAAUoU,QACVsF,qBAAsB1Z,WAAW,QAEhC,GAAMqZ,aAIN,IAAMrZ,UAAU2Z,cAAgBC,cAAe5Z,WAEhD,YAJAA,UAAUoU,QAMd,GAA0B,IAArB9M,UAAUxJ,OAIX,IAFA,IAAI+b,OAASR,YAAc,EAAI7W,cAC3BsX,KAAOT,YAAcrZ,UAAU9F,OAAO4D,OAAS0b,YACzCpP,EAAEyP,OAASzP,EAAE0P,KAAO1P,IAC9B,CACI,IAAI2P,WAAazS,UAAU8C,GACvBlQ,OAAS8F,UAAU9F,OAAO6f,YACV,OAAf7f,OAAON,KAERka,YAAa9T,UAAW+Z,YAE5B,IAAIC,KAAO9f,OAAON,IAElB,GAAkB,IAAbuf,SACL,CACI,IAAIc,QAAU1W,gBAAgB2V,UAAYC,UACrCjf,OAAOggB,aAAeD,UAEvB/iB,EAAE8iB,MAAM7V,YAAajK,OAAOggB,aAAc7X,SAAU4X,SACpD/f,OAAOggB,YAAcD,SAM7B5T,gBAAiBrG,UAAW,gBAAiB,KACzC,CAACga,KAAM9f,OAAO0Z,OAAQsF,UAAW9O,IACrC6O,OAAO3Y,KAAM0Z,MACbd,gBAIR,CAEI,IAAIiB,MAAQf,MAAMjO,aACM,GAAnBnL,UAAUoU,OAA6C,QAA9B7N,cAAevG,WAEzCma,MAAQf,MAAM/N,gBAER+N,MAAMhO,aAA8C,IAA/BpL,UAAUoa,mBAErCD,MAAQf,MAAMhO,aAElB6N,OAAO,GAAK/hB,EAAG,QAAS,CAAEmjB,MAASlB,SAAW5V,gBAAgB,GAAK,KAC9DsK,OAAQ3W,EAAE,SAAU,CACjBojB,OAAW,MACXC,QAAWlI,iBAAkBrS,WAC7Bqa,MAAWra,UAAU8B,SAAS0Y,YAC9BpR,KAAM+Q,QAAU,GAG5B9T,gBAAiBrG,UAAW,mBAAoB,SAAU,CAAE9I,EAAE8I,UAAUX,QAAQuE,SAAS,MAAM,GAC3F2R,iBAAkBvV,WAAawC,cAAegX,YAAalS,YAC/DjB,gBAAiBrG,UAAW,mBAAoB,SAAU,CAAE9I,EAAE8I,UAAUT,QAAQqE,SAAS,MAAM,GAC3F2R,iBAAkBvV,WAAawC,cAAegX,YAAalS,YAC/D,IAAImT,KAAOvjB,EAAE8I,UAAU+G,QACvB0T,KAAK7W,WAAW8W,SAChBD,KAAK5M,OAAQ3W,EAAE+hB,SAEf5S,gBAAiBrG,UAAW,iBAAkB,OAAQ,CAACA,YAEvDA,UAAU+F,SAAU,EACpB/F,UAAU2a,WAAY,EACtB3a,UAAUsZ,UAAW,OAvGjBI,qBAAsB1Z,WAAW,GAgHzC,SAAS4a,UAAWzhB,SAAU0hB,cAE1B,IACIrV,SAAWrM,SAAS0H,UACpByE,KAAWE,SAASM,MACpBP,OAAWC,SAASsV,QACnBxV,MACDyV,QAAS5hB,UAERoM,OACDyV,kBAAmB7hB,SAAUA,SAAS8hB,iBAItC9hB,SAASmO,UAAYnO,SAASoO,gBAAgBjD,SAE5B,IAAjBuW,eACD1hB,SAASsJ,eAAiB,GAI9BtJ,SAAS+hB,UAAYL,aACrB9B,QAAS5f,UACTA,SAAS+hB,WAAY,EAOzB,SAASC,kBAAoBnb,WAEzB,IAAIoC,QAAUpC,UAAU8B,SACpBsZ,MAAQlkB,EAAE8I,UAAUZ,QACpBic,QAAUnkB,EAAE,UAAUokB,aAAcF,OACpC5V,SAAWxF,UAAUa,UAErB0a,OAASrkB,EAAE,SAAU,CACrB2I,GAASG,UAAUJ,SAAS,WAC5Bya,MAASjY,QAAQoZ,UAAYxb,UAAUT,OAAS,GAAK,IAAI6C,QAAQ6E,aAErEjH,UAAUyb,SAAWJ,QAAQ,GAC7Brb,UAAU0b,cAAgBH,OAAO,GACjCvb,UAAU2b,qBAAuB3b,UAAUZ,OAAOyX,YAIlD,IAFA,IACI+E,YAAaC,QAASC,SAAUC,MAAOC,MAAO5R,EAD9C6R,KAAOjc,UAAUiC,KAAKwV,MAAM,IAEtBjZ,EAAE,EAAIA,EAAEyd,KAAKne,OAASU,IAChC,CAGI,GAFAod,YAAc,KAEE,MADhBC,QAAUI,KAAKzd,IAEf,CAKI,GAHAsd,SAAW5kB,EAAE,UAAU,GAGT,MADd6kB,MAAQE,KAAKzd,EAAE,KACe,KAATud,MACrB,CAGI,IAFAC,MAAQ,GACR5R,EAAI,EACI6R,KAAKzd,EAAE4L,IAAM2R,OAEjBC,OAASC,KAAKzd,EAAE4L,GAChBA,IAcJ,GAXc,KAAT4R,MAEDA,MAAQ5Z,QAAQ8Z,WAED,KAATF,QAENA,MAAQ5Z,QAAQ+Z,aAKQ,GAAvBH,MAAMrR,QAAQ,KACnB,CACI,IAAIyR,OAASJ,MAAMvE,MAAM,KACzBqE,SAASjc,GAAKuc,OAAO,GAAGC,OAAO,EAAGD,OAAO,GAAGte,OAAO,GACnDge,SAAS5L,UAAYkM,OAAO,OAEH,KAAnBJ,MAAMhR,OAAO,GAEnB8Q,SAASjc,GAAKmc,MAAMK,OAAO,EAAGL,MAAMle,OAAO,GAI3Cge,SAAS5L,UAAY8L,MAEzBxd,GAAK4L,EAETmR,OAAO1N,OAAQiO,UACfP,OAASrkB,EAAE4kB,eAEV,GAAgB,KAAXD,QAGNN,OAASA,OAAOe,cAGf,GAAgB,KAAXT,SAAkBrW,SAAS+W,WAAa/W,SAASgX,cAGvDZ,YAAca,qBAAsBzc,gBAEnC,GAAgB,KAAX6b,SAAkBrW,SAASsV,QAGjCc,YAAcc,qBAAsB1c,gBAEnC,GAAgB,KAAX6b,SAAkBrW,SAASmX,YAGjCf,YAAcgB,yBAA0B5c,gBAEvC,GAAgB,KAAX6b,QAGND,YAAciB,oBAAqB7c,gBAElC,GAAiB,KAAZ6b,SAAmBrW,SAASsX,MAGlClB,YAAcmB,mBAAoB/c,gBAEjC,GAAgB,KAAX6b,SAAkBrW,SAAS+W,UAGjCX,YAAcoB,uBAAwBhd,gBAErC,GAAsC,IAAjCvI,UAAUyG,IAAI+e,QAAQnf,OAI5B,IADA,IAAIof,WAAazlB,UAAUyG,IAAI+e,QACrB5S,EAAE,EAAG+I,KAAK8J,WAAWpf,OAASuM,EAAE+I,KAAO/I,IAE7C,GAAKwR,SAAWqB,WAAW7S,GAAG8S,SAC9B,CACIvB,YAAcsB,WAAW7S,GAAG+S,OAAQpd,WACpC,MAKZ,GAAK4b,YACL,CACI,IAAIyB,YAAcrd,UAAUqd,YACrBA,YAAYxB,WAEfwB,YAAYxB,SAAW,IAE3BwB,YAAYxB,SAASvb,KAAMsb,aAC3BL,OAAO1N,OAAQ+N,cAIvBP,QAAQiC,YAAa/B,QACrBvb,UAAUyb,SAAW,KAWzB,SAAS9W,gBAAkB4Y,QAAS9Y,QAEhC,IACI7K,IAAK4jB,MACLhf,EAAG6L,EAAGoT,EAAGpf,KAAMqf,YAAsB/E,SAAUD,SAC/CiF,QAHAC,KAAO1mB,EAAEuN,QAAQb,SAAS,MAI1Bia,WAAa,SAAWzY,EAAG5G,EAAG4L,GAEtB,IADR,IAAIC,EAAIjF,EAAE5G,GACM6L,EAAED,IACdA,IAEJ,OAAOA,GAIX,IAFAmT,QAAQzd,OAAQ,EAAGyd,QAAQzf,QAErBU,EAAE,EAAGH,KAAKuf,KAAK9f,OAASU,EAAEH,KAAOG,IAEnC+e,QAAQjd,KAAM,IAGlB,IAAM9B,EAAE,EAAGH,KAAKuf,KAAK9f,OAASU,EAAEH,KAAOG,IAMnC,IADAgf,OAHA5jB,IAAMgkB,KAAKpf,IAGCwX,WACJwH,OAAQ,CACZ,GAAqC,MAAhCA,MAAMliB,SAASQ,eACiB,MAAhC0hB,MAAMliB,SAASQ,cAchB,IATA6c,UAFAA,SAA2C,EAAhC6E,MAAM9e,aAAa,aAEM,IAAXia,UAA2B,IAAXA,SAAoBA,SAAJ,EACzDD,UAFAA,SAA2C,EAAhC8E,MAAM9e,aAAa,aAEM,IAAXga,UAA2B,IAAXA,SAAoBA,SAAJ,EAIzDgF,YAAcG,WAAYN,QAAS/e,EAfjC,GAiBFmf,QAAuB,IAAbhF,SAEJ8E,EAAE,EAAIA,EAAE9E,SAAW8E,IAErB,IAAMpT,EAAE,EAAIA,EAAEqO,SAAWrO,IAErBkT,QAAQ/e,EAAE6L,GAAGqT,YAAYD,GAAK,CAC1BjiB,KAAQgiB,MACRM,OAAUH,SAEdJ,QAAQ/e,EAAE6L,GAAGzQ,IAAMA,IAI/B4jB,MAAQA,MAAM3G,aAY1B,SAAShS,gBAAkB7E,UAAW+d,QAASR,SAE3C,IAAIS,QAAU,GACRT,UAEFA,QAAUvd,UAAU4E,SACfmZ,SAGDpZ,gBADA4Y,QAAU,GACgBQ,UAGlC,IAAM,IAAIvf,EAAE,EAAGH,KAAKkf,QAAQzf,OAASU,EAAEH,KAAOG,IAE1C,IAAM,IAAI4L,EAAE,EAAG+I,KAAKoK,QAAQ/e,GAAGV,OAASsM,EAAE+I,KAAO/I,KAExCmT,QAAQ/e,GAAG4L,GAAG0T,QACZE,QAAQ5T,IAAOpK,UAAUie,gBAE5BD,QAAQ5T,GAAKmT,QAAQ/e,GAAG4L,GAAG5O,MAIvC,OAAOwiB,QAWX,SAASE,aAAcle,UAAW/H,KAAM8F,IAMpC,GAHAsI,gBAAiBrG,UAAW,iBAAkB,eAAgB,CAAC/H,OAG1DA,MAAQf,EAAEqB,QAAQN,MAAQ,CAC3B,IAAI2K,IAAM,GACNub,SAAW,aACfjnB,EAAEkH,KAAMnG,MAAM,SAAUyS,IAAKvE,KACzB,IAAIqE,MAAQrE,IAAId,KAAKmF,MAAM2T,UAC3B,GAAK3T,MAAQ,CAET,IAAInF,KAAOmF,MAAM,GACV5H,IAAIyC,QACPzC,IAAIyC,MAAQ,IAEhBzC,IAAIyC,MAAM/E,KAAM6F,IAAI2I,YAGpBlM,IAAIuD,IAAId,MAAQc,IAAI2I,SAG5B7W,KAAO2K,IAEX,IAAIwb,SACApb,KAAOhD,UAAUgD,KACjBqb,SAAWre,UAAUN,UACrBzF,SAAW,SAAWmJ,MACtBiD,gBAAiBrG,UAAW,KAAM,MAAO,CAACA,UAAWoD,KAAMpD,UAAUse,QACrEvgB,GAAIqF,OAER,GAAKlM,EAAEsB,cAAewK,OAAUA,KAAK/K,KACrC,CACImmB,SAAWpb,KAAK/K,KAChB,IAAIsmB,QAAUrnB,EAAEsnB,WAAYJ,UACxBA,SAAUnmB,KAAM+H,WAChBoe,SAEJnmB,KAAOf,EAAEsnB,WAAYJ,WAAcG,QAC/BA,QACArnB,EAAE+H,QAAQ,EAAMhH,KAAMsmB,gBAGnBvb,KAAK/K,KAEhB,IAAIwmB,SAAW,CACXxmB,KAAQA,KACRkL,QAAW,SAAUC,MACjB,IAAIE,MAAQF,KAAKE,OAASF,KAAKsb,OAC1Bpb,OACD3D,OAAQK,UAAW,EAAGsD,OAE1BtD,UAAUoD,KAAOA,KACjBnJ,SAAUmJ,OAEdH,SAAY,OACZ4P,OAAS,EACTxX,KAAQ2E,UAAU2e,cAClBrb,MAAS,SAAUsb,IAAKtb,OACpB,IAAIub,IAAMxY,gBAAiBrG,UAAW,KAAM,MAAO,CAACA,UAAW,KAAMA,UAAUse,SAC9C,IAA5BpnB,EAAE6M,SAAS,EAAM8a,OACJ,eAATvb,MACD3D,OAAQK,UAAW,EAAG,wBAAyB,GAEtB,IAAnB4e,IAAIE,YACVnf,OAAQK,UAAW,EAAG,aAAc,IAG5C0Z,qBAAsB1Z,WAAW,KAIzCA,UAAU+e,UAAY9mB,KAEtBoO,gBAAiBrG,UAAW,KAAM,SAAU,CAACA,UAAW/H,OACnD+H,UAAUgf,aAGXhf,UAAUgf,aAAa5kB,KAAMikB,SACzBre,UAAUif,YACV/nB,EAAE8M,IAAK/L,MAAM,SAAUkO,IAAKuE,KACxB,MAAO,CAAErF,KAAMqF,IAAKoE,MAAO3I,QAE/BlM,SACA+F,WAGEA,UAAUif,aAA+B,iBAATjc,KAGtChD,UAAUse,MAAQpnB,EAAE8L,KAAM9L,EAAE+H,OAAQwf,SAAU,CAC1Cvb,IAAKF,MAAQhD,UAAUif,eAGrB/nB,EAAEsnB,WAAYxb,MAGpBhD,UAAUse,MAAQtb,KAAK5I,KAAMikB,SAAUpmB,KAAMgC,SAAU+F,YAKvDA,UAAUse,MAAQpnB,EAAE8L,KAAM9L,EAAE+H,OAAQwf,SAAUzb,OAE9CA,KAAK/K,KAAOmmB,UASpB,SAASxE,cAAezgB,UAEpB,OAAKA,SAAS+lB,eACV/lB,SAASib,QACTsF,qBAAsBvgB,UAAU,GAChC+kB,aACI/kB,SACAgmB,kBAAmBhmB,WACnB,SAASiK,MACLgc,kBAAmBjmB,SAAUiK,UAG9B,GAef,SAAS+b,kBAAmBhmB,UAExB,IAMIqF,EAAc6gB,SAAUpkB,OAAQqkB,aALhCrmB,QAAUE,SAAS2L,UACnBya,YAActmB,QAAQ6E,OACtB0H,SAAWrM,SAAS0H,UACpB2e,UAAYrmB,SAAS8hB,gBACrBwE,aAAetmB,SAASsW,gBACrBxX,KAAO,GACVqN,KAAOW,eAAgB9M,UACvBumB,aAAevmB,SAASsJ,eACxBkd,eAAuC,IAAvBna,SAAS+W,UACrBpjB,SAASymB,iBACR,EACLC,MAAQ,SAAWxa,KAAMyJ,OACzB7W,KAAKqI,KAAM,CAAE+E,KAAQA,KAAMyJ,MAASA,SAGxC+Q,MAAO,QAAkB1mB,SAASib,OAClCyL,MAAO,WAAkBN,aACzBM,MAAO,WAAkBtW,OAAQtQ,QAAS,SAAUmL,KAAK,MACzDyb,MAAO,gBAAkBH,cACzBG,MAAO,iBAAkBF,eAEzB,IAAIvX,EAAI,CACJxP,KAASO,SAASib,MAClBnb,QAAS,GACTgE,MAAS,GACT6M,MAAS4V,aACT5hB,OAAS6hB,cACT3kB,OAAS,CACL8T,MAAO0Q,UAAUM,QACjBC,MAAOP,UAAU5kB,SAGzB,IAAM4D,EAAE,EAAIA,EAAE+gB,YAAc/gB,IACxBvD,OAAShC,QAAQuF,GACjB8gB,aAAeG,aAAajhB,GAC5B6gB,SAAgC,mBAAdpkB,OAAOsC,MAAoB,WAAatC,OAAOsC,MACjE6K,EAAEnP,QAAQqH,KAAM,CACZrI,KAAYonB,SACZha,KAAYpK,OAAO+kB,MACnBC,WAAYhlB,OAAOilB,YACnBC,UAAYllB,OAAO8V,UACnB/V,OAAY,CACR8T,MAAOwQ,aAAaQ,QACpBC,MAAOT,aAAa1kB,UAG5BilB,MAAO,aAAarhB,EAAG6gB,UAClB7Z,SAASsV,UACV+E,MAAO,WAAWrhB,EAAO8gB,aAAaQ,SACtCD,MAAO,UAAUrhB,EAAQ8gB,aAAa1kB,QACtCilB,MAAO,eAAerhB,EAAGvD,OAAOilB,cAE/B1a,SAASM,OACV+Z,MAAO,aAAarhB,EAAGvD,OAAO8V,WAGjCvL,SAASsV,UACV+E,MAAO,UAAWL,UAAUM,SAC5BD,MAAO,SAAUL,UAAU5kB,SAE1B4K,SAASM,QACV5O,EAAEkH,KAAMkH,MAAM,SAAW9G,EAAG2H,KACxBiC,EAAEnL,MAAMqD,KAAM,CAAErF,OAAQkL,IAAI/K,IAAKgL,IAAKD,IAAIC,MAC1CyZ,MAAO,YAAYrhB,EAAG2H,IAAI/K,KAC1BykB,MAAO,YAAYrhB,EAAG2H,IAAIC,QAE9ByZ,MAAO,eAAgBva,KAAKxH,SAIhC,IAAIsiB,OAAS3oB,UAAUyG,IAAIkiB,OAAOpd,KAClC,OAAgB,OAAXod,OACMjnB,SAAS8lB,YAAchnB,KAAOmQ,EAIlCgY,OAASnoB,KAAOmQ,EAO3B,SAASgX,kBAAoBjmB,SAAUiK,MAInC,IAAIid,OAAS,SAAW1T,IAAK2T,QACzB,YAAqB3nB,IAAdyK,KAAKuJ,KAAqBvJ,KAAKuJ,KAAOvJ,KAAKkd,SAElDroB,KAAOsoB,eAAgBpnB,SAAUiK,MACjCxK,KAAkBynB,OAAQ,QAAwB,QAClDG,aAAkBH,OAAQ,gBAAwB,gBAClDI,gBAAkBJ,OAAQ,uBAAwB,mBACtD,GAAKznB,KAAO,CAER,GAAU,EAALA,KAASO,SAASib,MACnB,OAEJjb,SAASib,MAAe,EAAPxb,KAErB4c,cAAerc,UACfA,SAAS2J,eAAmByF,SAASiY,aAAc,IACnDrnB,SAAS0J,iBAAmB0F,SAASkY,gBAAiB,IACtD,IAAM,IAAIjiB,EAAE,EAAGmL,IAAI1R,KAAK6F,OAASU,EAAEmL,IAAMnL,IACrC4I,WAAYjO,SAAUlB,KAAKuG,IAE/BrF,SAASmO,UAAYnO,SAASoO,gBAAgBjD,QAC9CnL,SAAS+lB,cAAe,EACxBnG,QAAS5f,UACFA,SAASunB,gBACZC,gBAAiBxnB,SAAUiK,MAE/BjK,SAAS+lB,cAAe,EACxBxF,qBAAsBvgB,UAAU,GAUpC,SAASonB,eAAiBvgB,UAAWoD,MAEjC,IAAIwd,QAAU1pB,EAAEsB,cAAewH,UAAUgD,YAAqCrK,IAA3BqH,UAAUgD,KAAK4d,QAC9D5gB,UAAUgD,KAAK4d,QACf5gB,UAAU6gB,cAGd,MAAiB,SAAZD,QACMxd,KAAK+D,QAAU/D,KAAKwd,SAEZ,KAAZA,QACHjf,mBAAoBif,QAApBjf,CAA+ByB,MAC/BA,KAQR,SAASsZ,qBAAuBvjB,UAE5B,IAAIiJ,QAAUjJ,SAAS2I,SACnBgf,QAAU3nB,SAASyG,SACnBmhB,SAAW5nB,SAASqH,UACpBwgB,eAAiB7nB,SAAS8hB,gBAC1BzV,SAAWrM,SAASkkB,YACpB4D,MAAQ,+BAA+B7e,QAAQ8e,aAAa,MAC5DrM,IAAMkM,SAASjB,QACnBjL,IAAMA,IAAIrK,MAAM,WACZqK,IAAI/L,QAAQ,UAAWmY,OACvBpM,IAAIoM,MACR,IAAI1b,OAASrO,EAAE,SAAU,CACjB2I,GAAQ2F,SAAS2b,EAAwB,KAApBL,QAAQ,UAC7BzG,MAASjY,QAAQgf,UAEpBvT,OAAQ3W,EAAE,YAAa2W,OAAQgH,MAChCwM,SAAW,WAEX,IAAIlb,IAAOxO,KAAKmX,MAAanX,KAAKmX,MAAV,GAEnB3I,KAAO6a,eAAelB,UACvB9E,kBAAmB7hB,SAAU,CACzB2mB,QAAW3Z,IACXvL,OAAUomB,eAAepmB,OACzBC,OAAUmmB,eAAenmB,OACzBE,iBAAoBimB,eAAejmB,mBAGvC5B,SAASsJ,eAAiB,EAC1BsW,QAAS5f,YAGbmoB,YAAuC,OAAzBnoB,SAASmoB,YACvBnoB,SAASmoB,YACqB,QAA9B/a,cAAepN,UACX,IACA,EACJooB,SAAWrqB,EAAE,QAASqO,QACrBY,IAAK6a,eAAelB,SACpBjQ,KAAM,cAAekR,SAASS,oBAC9BC,GACG,8CACAH,YACII,YAAaL,SAAUC,aACvBD,UAEPI,GAAI,eAAe,SAASE,GAEzB,GAAkB,IAAbA,EAAEC,QACH,OAAO,KAGd/R,KAAK,gBAAiBiR,SAc3B,OAZA5pB,EAAEiC,SAASiG,QAAQqiB,GAAI,gBAAgB,SAAWI,GAAI1iB,GAClD,GAAKhG,WAAagG,EAGd,IACSoiB,SAAS,KAAOnqB,SAAS0qB,eAC1BP,SAASpb,IAAK6a,eAAelB,SAGrC,MAAQ6B,QAGTpc,OAAO,GASlB,SAASyV,kBAAoBhb,UAAW+hB,OAAQC,QAE5C,IAAIC,YAAcjiB,UAAUib,gBACxBiH,aAAeliB,UAAUyP,gBACzB0S,aAAe,SAAWC,SAE1BH,YAAYnC,QAAUsC,QAAQtC,QAC9BmC,YAAYrnB,OAASwnB,QAAQxnB,OAC7BqnB,YAAYpnB,OAASunB,QAAQvnB,OAC7BonB,YAAYlnB,iBAAmBqnB,QAAQrnB,kBAEvCsnB,QAAU,SAAW9X,GAErB,YAA0B5R,IAAnB4R,EAAE+X,cAA8B/X,EAAE+X,aAAe/X,EAAE3P,QAM9D,GAFA6X,eAAgBzS,WAEmB,OAA9BuG,cAAevG,WACpB,CAEIuiB,UAAWviB,UAAW+hB,OAAOjC,QAASkC,OAAQK,QAAQN,QAASA,OAAOlnB,OAAQknB,OAAOhnB,kBACrFonB,aAAcJ,QAEd,IAAM,IAAIvjB,EAAE,EAAIA,EAAE0jB,aAAapkB,OAASU,IAEpCgkB,gBAAiBxiB,UAAWkiB,aAAa1jB,GAAGshB,QAASthB,EAAG6jB,QAAQH,aAAa1jB,IACzE0jB,aAAa1jB,GAAG3D,OAAQqnB,aAAa1jB,GAAGzD,kBAGhD0nB,gBAAiBziB,gBAIjBmiB,aAAcJ,QAGlB/hB,UAAU2a,WAAY,EACtBtU,gBAAiBrG,UAAW,KAAM,SAAU,CAACA,YAOjD,SAASyiB,gBAAiBtpB,UAKtB,IAHA,IAEIT,IAAKwb,OAFLwO,QAAUjrB,UAAUyG,IAAIlD,OACxB2nB,YAAcxpB,SAASmO,UAEjB9I,EAAE,EAAGmL,IAAI+Y,QAAQ5kB,OAASU,EAAEmL,IAAMnL,IAAM,CAG9C,IAFA,IAAIxG,KAAO,GAEDoS,EAAE,EAAGsI,IAAIiQ,YAAY7kB,OAASsM,EAAEsI,IAAMtI,IAC5C8J,OAASyO,YAAYvY,GACrB1R,IAAMS,SAASe,OAAOga,QACjBwO,QAAQlkB,GAAIrF,SAAUT,IAAIyd,aAAcjC,OAAQxb,IAAIkb,OAAQxJ,IAC7DpS,KAAKsI,KAAM4T,QAKnByO,YAAY7kB,OAAS,EACrB5G,EAAE0rB,MAAOD,YAAa3qB,OAa9B,SAASwqB,gBAAkBrpB,SAAU0pB,UAAW1O,OAAQ4L,MAAO+C,MAAOC,iBAElE,GAAmB,KAAdF,UAAL,CAOA,IAJA,IAAI5qB,KACAyR,IAAM,GACNsZ,QAAU7pB,SAASmO,UACnB2b,SAAWC,sBAAuBL,UAAW9C,MAAO+C,MAAOC,iBACrDvkB,EAAE,EAAIA,EAAEwkB,QAAQllB,OAASU,IAC/BvG,KAAOkB,SAASe,OAAO8oB,QAAQxkB,IAAI2X,aAAahC,QAC3C8O,SAASE,KAAMlrB,OAChByR,IAAIpJ,KAAM0iB,QAAQxkB,IAG1BrF,SAASmO,UAAYoC,KAYzB,SAAS6Y,UAAWppB,SAAU8nB,MAAOnW,MAAOiV,MAAO+C,MAAOC,iBAEtD,IAGIC,QAASI,YAAa5kB,EAHtBykB,SAAWC,sBAAuBjC,MAAOlB,MAAO+C,MAAOC,iBACvDM,WAAalqB,SAAS8hB,gBAAgB6E,QACtCwD,cAAgBnqB,SAASoO,gBAEzBgc,SAAW,GAQf,GANqC,IAAhC9rB,UAAUyG,IAAIlD,OAAO8C,SACtBgN,OAAQ,GAGZsY,YAAcI,cAAerqB,UAExB8nB,MAAMnjB,QAAU,EACjB3E,SAASmO,UAAYgc,cAAchf,YAElC,CAaD,KAXK8e,aACAtY,OACAuY,WAAWvlB,OAASmjB,MAAMnjB,QACI,IAA9BmjB,MAAMtW,QAAQ0Y,aACdlqB,SAAS4M,WAGV5M,SAASmO,UAAYgc,cAAchf,SAGvC0e,QAAU7pB,SAASmO,UACb9I,EAAE,EAAIA,EAAEwkB,QAAQllB,OAASU,IACtBykB,SAASE,KAAMhqB,SAASe,OAAO8oB,QAAQxkB,IAAIilB,cAC5CF,SAASjjB,KAAM0iB,QAAQxkB,IAG/BrF,SAASmO,UAAYic,UAY7B,SAASL,sBAAuBloB,OAAQ+kB,MAAO+C,MAAOC,iBAKlD,GAHA/nB,OAAS+kB,MACL/kB,OACA6N,eAAgB7N,QACf8nB,MAAQ,CAOT,IAAI1d,EAAIlO,EAAE8M,IAAKhJ,OAAOwP,MAAO,mBAAsB,CAAC,KAAK,SAAWkZ,MAChE,GAAwB,MAAnBA,KAAK1Y,OAAO,GAAa,CAC1B,IAAI2Y,EAAID,KAAKlZ,MAAO,YACpBkZ,KAAOC,EAAIA,EAAE,GAAKD,KAEtB,OAAOA,KAAK5a,QAAQ,IAAK,OAE7B9N,OAAS,UAAUoK,EAAEhB,KAAM,WAAY,OAE3C,OAAO,IAAI6D,OAAQjN,OAAQ+nB,gBAAkB,IAAM,IAQvD,IAAIla,eAAiBpR,UAAUkU,KAAKa,YAChCoX,aAAe1sB,EAAE,SAAS,GAC1B2sB,8BAAwDlrB,IAA7BirB,aAAaE,YAK5C,SAASN,cAAgBrqB,UAErB,IACI8B,OACAuD,EAAG4L,EAAGT,IAAK+I,IAAKqR,WAAYxP,SAAU7b,IAFtCO,QAAUE,SAAS2L,UAGnBkf,UAAYvsB,UAAUyG,IAAI7C,KAAKL,OAC/BipB,gBAAiB,EACrB,IAAMzlB,EAAE,EAAGmL,IAAIxQ,SAASe,OAAO4D,OAASU,EAAEmL,IAAMnL,IAE5C,KADA9F,IAAMS,SAASe,OAAOsE,IACX2X,aAAe,CAEtB,IADA4N,WAAa,GACP3Z,EAAE,EAAGsI,IAAIzZ,QAAQ6E,OAASsM,EAAEsI,IAAMtI,KACpCnP,OAAShC,QAAQmR,IACL8V,aACR3L,SAAWvB,eAAgB7Z,SAAUqF,EAAG4L,EAAG,UACtC4Z,UAAU/oB,OAAO+U,SAClBuE,SAAWyP,UAAU/oB,OAAO+U,OAAQuE,WAItB,OAAbA,WACDA,SAAW,IAEU,iBAAbA,UAAyBA,SAAS2P,WAC1C3P,SAAWA,SAAS2P,aAIxB3P,SAAW,GAMVA,SAAS5J,UAAsC,IAA3B4J,SAAS5J,QAAQ,OACtCiZ,aAAarU,UAAYgF,SACzBA,SAAWsP,yBACPD,aAAaE,YACbF,aAAaO,WAEhB5P,SAASzL,UACVyL,SAAWA,SAASzL,QAAQ,UAAW,KAE3Cib,WAAWzjB,KAAMiU,UAErB7b,IAAIyd,aAAe4N,WACnBrrB,IAAI+qB,YAAcM,WAAW3f,KAAK,MAClC6f,gBAAiB,EAGzB,OAAOA,eASX,SAASG,iBAAmBC,KAExB,MAAO,CACHrpB,OAAiBqpB,IAAIvE,QACrBgD,MAAiBuB,IAAIxpB,OACrBklB,MAAiBsE,IAAIzpB,OACrBmoB,gBAAiBsB,IAAItpB,kBAU7B,SAASupB,gBAAkBD,KAEvB,MAAO,CACHvE,QAAkBuE,IAAIrpB,OACtBH,OAAkBwpB,IAAIvB,MACtBloB,OAAkBypB,IAAItE,MACtBhlB,iBAAkBspB,IAAItB,iBAS9B,SAAShG,mBAAqB5jB,UAE1B,IACIorB,IAAMprB,SAASyG,SACfhE,MAAQzC,SAASkkB,YAAY7e,EAC7B8O,EAAIpW,EAAE,SAAU,CACZmjB,MAASlhB,SAAS2I,SAAS0iB,MAC3B3kB,GAAQjE,MAAsB,KAAd2oB,IAAI,UAc5B,OAZO3oB,QAEHzC,SAASsrB,eAAenkB,KAAM,CAC1BvC,GAAM2mB,cACN1E,MAAS,gBAEb1S,EACKuC,KAAM,OAAQ,UACdA,KAAM,YAAa,UAExB3Y,EAAEiC,SAASiG,QAAQyQ,KAAM,mBAAoB0U,IAAI,UAE9CjX,EAAE,GAOb,SAASoX,cAAgBvrB,UAGrB,IAAIyC,MAAQzC,SAASkkB,YAAY7e,EACjC,GAAsB,IAAjB5C,MAAMkC,OAAX,CAGA,IACImN,KAAQ9R,SAASqH,UACjBsJ,MAAQ3Q,SAASsJ,eAAe,EAChCsH,IAAQ5Q,SAASsgB,eACjBkL,IAAQxrB,SAASihB,iBACjBwK,MAAQzrB,SAASogB,mBACjB7P,IAAQkb,MACJ3Z,KAAKuZ,MACLvZ,KAAK4Z,WACRD,QAAUD,MAEXjb,KAAO,IAAMuB,KAAK6Z,eAItBpb,IAAMqb,cAAe5rB,SADrBuQ,KAAOuB,KAAK+Z,cAEZ,IAAI/qB,SAAWgR,KAAKga,eACF,OAAbhrB,WACDyP,IAAMzP,SAASG,KAAMjB,SAASuG,UAC1BvG,SAAU2Q,MAAOC,IAAK4a,IAAKC,MAAOlb,MAG1CxS,EAAE0E,OAAOwN,KAAMM,MAMnB,SAASqb,cAAgB5rB,SAAU0b,KAI/B,IACIqQ,UAAa/rB,SAASgsB,eACtBrb,MAAa3Q,SAASsJ,eAAe,EACrC5E,IAAa1E,SAASymB,gBACtBtN,IAAanZ,SAASogB,mBACtB6L,KAAsB,IAATvnB,IACjB,OAAOgX,IACH/L,QAAQ,WAAYoc,UAAU9qB,KAAMjB,SAAU2Q,QAC9ChB,QAAQ,SAAYoc,UAAU9qB,KAAMjB,SAAUA,SAASsgB,iBACvD3Q,QAAQ,SAAYoc,UAAU9qB,KAAMjB,SAAUA,SAASihB,mBACvDtR,QAAQ,WAAYoc,UAAU9qB,KAAMjB,SAAUmZ,MAC9CxJ,QAAQ,UAAYoc,UAAU9qB,KAAMjB,SAAUisB,IAAM,EAAI/W,KAAKgX,KAAMvb,MAAQjM,OAC3EiL,QAAQ,WAAYoc,UAAU9qB,KAAMjB,SAAUisB,IAAM,EAAI/W,KAAKgX,KAAM/S,IAAMzU,OAOjF,SAASwF,cAAgBlK,UAErB,IAAIqF,EAAGH,KAC2BpD,OADrBqqB,WAAWnsB,SAASoJ,kBAC7BtJ,QAAUE,SAAS2L,UACnBU,SAAWrM,SAAS0H,UACpB0kB,aAAepsB,SAASwJ,cAE5B,GAAOxJ,SAASqO,aAAhB,CAgBA,IAXA2T,kBAAmBhiB,UAEnB2e,aAAc3e,UACdmf,YAAanf,SAAUA,SAASyL,UAChC0T,YAAanf,SAAUA,SAAS+N,UAEhCwS,qBAAsBvgB,UAAU,GAE3BqM,SAASoM,YACVC,yBAA0B1Y,UAExBqF,EAAE,EAAGH,KAAKpF,QAAQ6E,OAASU,EAAEH,KAAOG,KACtCvD,OAAShC,QAAQuF,IACLsT,SACR7W,OAAOgU,IAAI9O,MAAMC,MAAQolB,eAAgBvqB,OAAO6W,SAGxDzL,gBAAiBlN,SAAU,KAAM,UAAW,CAACA,WAK7CyhB,UAAWzhB,UAEX,IAAIynB,QAAUra,cAAepN,WACb,OAAXynB,SAAoB2E,gBAEL,QAAX3E,QACD1C,aAAc/kB,SAAU,IAAI,SAASiK,MACjC,IAAIqiB,MAAQlF,eAAgBpnB,SAAUiK,MAEtC,IAAM5E,EAAE,EAAIA,EAAEinB,MAAM3nB,OAASU,IACzB4I,WAAYjO,SAAUssB,MAAMjnB,IAKhCrF,SAASoJ,kBAAoB+iB,WAC7B1K,UAAWzhB,UACXugB,qBAAsBvgB,UAAU,GAChCwnB,gBAAiBxnB,SAAUiK,UAI/BsW,qBAAsBvgB,UAAU,GAChCwnB,gBAAiBxnB,iBAjDrBmT,YAAY,WAAYjJ,cAAelK,YAAe,KA4D9D,SAASwnB,gBAAkBxnB,SAAUiK,MAEjCjK,SAASunB,gBAAiB,GAGrBtd,MAAQjK,SAASmF,MAAM6I,SACxBwK,sBAAuBxY,UAE3BkN,gBAAiBlN,SAAU,iBAAkB,OAAQ,CAACA,SAAUiK,OAQpE,SAASsiB,gBAAkBvsB,SAAUgN,KAEjC,IAAItI,IAAM0K,SAAUpC,IAAK,IACzBhN,SAASymB,gBAAkB/hB,IAC3B8nB,kBAAmBxsB,UAEnBkN,gBAAiBlN,SAAU,KAAM,SAAU,CAACA,SAAU0E,MAQ1D,SAAS4e,qBAAuBtjB,UAc5B,IAZA,IACIiJ,QAAWjJ,SAAS2I,SACpBgf,QAAW3nB,SAASyG,SACpBgmB,KAAWzsB,SAASuH,YACpBmlB,GAAW3uB,EAAEqB,QAASqtB,KAAK,IAC3BE,QAAWD,GAAKD,KAAK,GAAKA,KAC1B7E,SAAW8E,GAAKD,KAAK,GAAKA,KAC1BG,OAAS7uB,EAAE,YAAa,CACxBmO,KAAiByb,QAAQ,UACzB,gBAAiBA,QACjBzG,MAAiBjY,QAAQ4jB,gBAEnBxnB,EAAE,EAAGmL,IAAImc,QAAQhoB,OAASU,EAAEmL,IAAMnL,IACxCunB,OAAO,GAAGvnB,GAAK,IAAIynB,OAAQlF,SAASviB,GAAIsnB,QAAQtnB,IAEpD,IAAI0nB,IAAMhvB,EAAE,uBAAuBmL,SAAUD,QAAQ+jB,SAqBrD,OApBOhtB,SAASkkB,YAAYI,IACxByI,IAAI,GAAGrmB,GAAKihB,QAAQ,WAExBoF,IAAItiB,WAAWiK,OACX1U,SAASqH,UAAU4lB,YAAYtd,QAAS,SAAUid,OAAO,GAAGM,YAIhEnvB,EAAE,SAAUgvB,KACP/f,IAAKhN,SAASymB,iBACd6B,GAAI,aAAa,WACdiE,gBAAiBvsB,SAAUjC,EAAES,MAAMwO,OACnC4S,QAAS5f,aAGjBjC,EAAEiC,SAASiG,QAAQqiB,GAAI,gBAAgB,SAAUE,EAAGxiB,EAAGtB,KAC9C1E,WAAagG,GACdjI,EAAE,SAAUgvB,KAAK/f,IAAKtI,QAGvBqoB,IAAI,GAYf,SAASlJ,uBAAyB7jB,UAE9B,IACIkC,KAASlC,SAASmtB,gBAClBC,OAAS9uB,UAAUyG,IAAIsoB,MAAMnrB,MAC7BilB,OAA2B,mBAAXiG,OAChBjuB,OAAS,SAAUa,UACf4f,QAAS5f,WAEbwC,KAAOzE,EAAE,UAAUmL,SAAUlJ,SAAS2I,SAAS2kB,QAAUprB,MAAO,GAChEmK,SAAWrM,SAASkkB,YAiCxB,OAhCOiD,QACHiG,OAAOnJ,OAAQjkB,SAAUwC,KAAMrD,QAG5BkN,SAASkhB,IAEZ/qB,KAAKkE,GAAK1G,SAASyG,SAAS,YAC5BzG,SAASsrB,eAAenkB,KAAM,CAC1BvC,GAAM,SAAU5E,UACZ,GAAKmnB,OAAS,CACV,IAQI9hB,EAAGmL,IAPHG,MAAa3Q,SAASsJ,eACtB5E,IAAa1E,SAASymB,gBACtB+G,WAAaxtB,SAASogB,mBACtB6L,KAAsB,IAATvnB,IACbpB,KAAO2oB,IAAM,EAAI/W,KAAKgX,KAAMvb,MAAQjM,KACpC+oB,MAAQxB,IAAM,EAAI/W,KAAKgX,KAAMsB,WAAa9oB,KAC1CgpB,QAAUN,OAAO9pB,KAAMmqB,OAE3B,IAAMpoB,EAAE,EAAGmL,IAAInE,SAASkhB,EAAE5oB,OAASU,EAAEmL,IAAMnL,IACvC0Z,YAAa/e,SAAU,aAAvB+e,CACI/e,SAAUqM,SAASkhB,EAAEloB,GAAIA,EAAGqoB,QAASpqB,KAAMmqB,YAKnDL,OAAOjpB,SAAUnE,SAAUb,SAGnC0nB,MAAS,gBAGVrkB,KASX,SAASmrB,cAAgB3tB,SAAU4tB,OAAQzuB,QAEvC,IACIwR,MAAY3Q,SAASsJ,eACrB5E,IAAY1E,SAASymB,gBACrBoH,QAAY7tB,SAASogB,mBACR,IAAZyN,UAA0B,IAATnpB,IAElBiM,MAAQ,EAEgB,iBAAXid,QAEbjd,MAAQid,OAASlpB,KACJmpB,UAETld,MAAQ,GAGI,SAAVid,OAENjd,MAAQ,EAEQ,YAAVid,QAENjd,MAAQjM,KAAO,EACXiM,MAAQjM,IACR,GACS,IAEXiM,MAAQ,GAGM,QAAVid,OAEDjd,MAAQjM,IAAMmpB,UAEfld,OAASjM,KAGG,QAAVkpB,OAENjd,MAAQuE,KAAK4Y,OAAQD,QAAQ,GAAKnpB,KAAOA,IAIzC8B,OAAQxG,SAAU,EAAG,0BAA0B4tB,OAAQ,GAE3D,IAAIG,QAAU/tB,SAASsJ,iBAAmBqH,MAQ1C,OAPA3Q,SAASsJ,eAAiBqH,MACrBod,UACD7gB,gBAAiBlN,SAAU,KAAM,OAAQ,CAACA,WACrCb,QACDygB,QAAS5f,WAGV+tB,QAQX,SAAStK,yBAA2BzjB,UAEhC,OAAOjC,EAAE,SAAU,CACX2I,GAAQ1G,SAASkkB,YAAY8J,EAAsC,KAAlChuB,SAASyG,SAAS,cACnDya,MAASlhB,SAAS2I,SAASslB,cAE9Bhe,KAAMjQ,SAASqH,UAAU4mB,aACzB9L,aAAcniB,SAASiG,QAAS,GAQzC,SAASsa,qBAAuBvgB,SAAUmD,MAEjCnD,SAAS0H,UAAU8b,aACpBzlB,EAAEiC,SAASkkB,YAAY8J,GAAGxgB,IAAK,UAAWrK,KAAO,QAAU,QAE/D+J,gBAAiBlN,SAAU,KAAM,aAAc,CAACA,SAAUmD,OAQ9D,SAASugB,oBAAsB1jB,UAE3B,IAAIiiB,MAAQlkB,EAAEiC,SAASiG,QAEvBgc,MAAMvL,KAAM,OAAQ,QAEpB,IAAIzW,OAASD,SAASE,QACtB,GAAmB,KAAdD,OAAOE,IAA2B,KAAdF,OAAOG,GAC5B,OAAOJ,SAASiG,OAEpB,IAAI0N,QAAU1T,OAAOE,GACjB+tB,QAAUjuB,OAAOG,GACjB6I,QAAUjJ,SAAS2I,SACnBwlB,QAAUlM,MAAMxX,SAAS,WACzB2jB,YAAcD,QAAQxpB,OAASwpB,QAAQ,GAAG5gB,aAAe,KACzD8gB,YAActwB,EAAGkkB,MAAM,GAAGqM,WAAU,IACpCC,YAAcxwB,EAAGkkB,MAAM,GAAGqM,WAAU,IACpCE,OAASvM,MAAMxX,SAAS,SACxBgkB,KAAO,SACPC,KAAO,SAAW1oB,GAClB,OAAQA,EAAWqmB,eAAgBrmB,GAAvB,MAETwoB,OAAO7pB,SACV6pB,OAAS,MAkBb,IAAIG,SAAW5wB,EAAG0wB,KAAM,CAAEvN,MAASjY,QAAQ2lB,iBACtCla,OACG3W,EAAE0wB,KAAM,CAAEvN,MAASjY,QAAQ4lB,cACtBrhB,IAAK,CACFiH,SAAU,SACVL,SAAU,WACV0a,OAAQ,EACR7nB,MAAO0M,QAAU+a,KAAK/a,SAAW,SAEpCe,OACG3W,EAAE0wB,KAAM,CAAEvN,MAASjY,QAAQ8lB,mBACtBvhB,IAAK,CACF,aAAc,cACdvG,MAAOhH,OAAO+uB,SAAW,SAE5Bta,OACG2Z,YACKY,WAAW,MACXzhB,IAAK,cAAe,GACpBkH,OAAwB,QAAhB0Z,YAAwBD,QAAU,MAC1CzZ,OACGuN,MAAMxX,SAAS,aAK1CiK,OACG3W,EAAE0wB,KAAM,CAAEvN,MAASjY,QAAQimB,cACtB1hB,IAAK,CACF4G,SAAU,WACVK,SAAU,OACVxN,MAAOynB,KAAM/a,WAEhBe,OAAQuN,QAEhBuM,QACDG,SAASja,OACL3W,EAAE0wB,KAAM,CAAEvN,MAASjY,QAAQkmB,cACtB3hB,IAAK,CACFiH,SAAU,SACVqa,OAAQ,EACR7nB,MAAO0M,QAAU+a,KAAK/a,SAAW,SAEpCe,OACG3W,EAAE0wB,KAAM,CAAEvN,MAASjY,QAAQmmB,mBACtB1a,OACG6Z,YACKU,WAAW,MACXzhB,IAAK,cAAe,GACpBkH,OAAwB,WAAhB0Z,YAA2BD,QAAU,MAC7CzZ,OACGuN,MAAMxX,SAAS,aAM/C,IAAIA,SAAWkkB,SAASlkB,WACpB4kB,WAAa5kB,SAAS,GACtB6kB,WAAa7kB,SAAS,GACtB8kB,WAAaf,OAAS/jB,SAAS,GAAK,KAuBxC,OArBKkJ,SACD5V,EAAEuxB,YAAYhH,GAAI,aAAa,WAC3B,IAAI/T,WAAa/V,KAAK+V,WACtB8a,WAAW9a,WAAaA,WACnBia,SACDe,WAAWhb,WAAaA,eAIpCxW,EAAEuxB,YAAY9hB,IACV0gB,SAAWjuB,OAAOuvB,UAAY,aAAe,SAC7CtB,SAEJluB,SAASyvB,YAAcJ,WACvBrvB,SAAS0vB,YAAcJ,WACvBtvB,SAAS2vB,YAAcJ,WAEvBvvB,SAASsrB,eAAenkB,KAAM,CAC1BvC,GAAMvE,cACNwmB,MAAS,cAEN8H,SAAS,GAgBpB,SAAStuB,cAAgBL,UAIrB,IAyBI4vB,aAAcC,aACdC,aAAcC,aACdC,WAAYC,WAGZ5Z,IAAK6Z,WAAYC,YA7BjBlwB,OAAiBD,SAASE,QAC1ByT,QAAiB1T,OAAOE,GACxBiwB,aAAiBnwB,OAAO+uB,QACxBd,QAAiBjuB,OAAOG,GACxByU,SAAiB5U,OAAOuV,UACxB6a,UAAiBtyB,EAAEiC,SAASyvB,aAC5Ba,eAAiBD,UAAU,GAAGrpB,MAC9BupB,eAAiBF,UAAU5lB,SAAS,OACpC+lB,oBAAsBD,eAAe,GAAGvpB,MACxCypB,eAAiBF,eAAe9lB,SAAS,SACzCimB,UAAiB1wB,SAAS0vB,YAC1BiB,QAAiB5yB,EAAE2yB,WACnBE,aAAiBF,UAAU1pB,MAE3B6pB,eADiB9yB,EAAEiC,SAAS2vB,aACDllB,SAAS,OACpCqmB,eAAiBD,eAAepmB,SAAS,SACzCzB,OAAiBjL,EAAEiC,SAASkG,QAC5B+b,MAAiBlkB,EAAEiC,SAASiG,QAC5B8qB,QAAiB9O,MAAM,GACvB+O,WAAiBD,QAAQ/pB,MACzBwnB,OAAiBxuB,SAASoG,OAASrI,EAAEiC,SAASoG,QAAU,KACxD8N,QAAiBlU,SAASuV,SAC1B0b,KAAiB/c,QAAQc,gBACzBkc,cAAiB9gB,OAAQpQ,SAAS2L,UAAW,OAI7CwlB,aAAa,GAAIC,aAAa,GAC9BC,cAAc,GAAIC,cAAc,GAEhCC,QAAU,SAASC,QACf,IAAIxqB,MAAQwqB,OAAOxqB,MACnBA,MAAMyqB,WAAa,IACnBzqB,MAAM0qB,cAAgB,IACtB1qB,MAAM2qB,eAAiB,IACvB3qB,MAAM4qB,kBAAoB,IAC1B5qB,MAAMwN,OAAS,GAKnBqd,aAAenB,UAAUoB,aAAepB,UAAUqB,aACtD,GAAK/xB,SAAS6xB,eAAiBA,mBAA0CryB,IAA1BQ,SAAS6xB,aAGpD,OAFA7xB,SAAS6xB,aAAeA,kBACxBrZ,sBAAuBxY,UAIvBA,SAAS6xB,aAAeA,aAM5B5P,MAAMxX,SAAS,gBAAgBzJ,SAC1BwtB,SACDyB,WAAazB,OAAOwD,QAAQC,UAAWhQ,OACvC4N,aAAerB,OAAO9jB,KAAK,MAC3BqlB,aAAeE,WAAWvlB,KAAK,OAGnCslB,WAAahnB,OAAOgpB,QAAQC,UAAWhQ,OACvC2N,aAAe5mB,OAAO0B,KAAK,MAC3BolB,aAAeE,WAAWtlB,KAAK,MAC/BslB,WAAWtlB,KAAK,UAAUukB,WAAW,YAO9Btb,UAEHid,aAAa3pB,MAAQ,OACrBopB,UAAU,GAAGrpB,MAAMC,MAAQ,QAE/BlJ,EAAEkH,KAAMyG,gBAAiB1L,SAAUgwB,aAAc,SAAW3qB,EAAGyF,IAC3DuL,IAAMuC,wBAAyB5Y,SAAUqF,GACzCyF,GAAG9D,MAAMC,MAAQjH,SAAS2L,UAAU0K,KAAKsC,UAExC6V,QACD0D,oBAAoB,SAAS/d,GACzBA,EAAEnN,MAAMC,MAAQ,KACjB8oB,cAGPI,YAAclO,MAAMkQ,aACH,KAAZxe,SAEDqd,WAAW/pB,MAAQ,OAIdgqB,OAAShP,MAAMvX,KAAK,SAAS8J,SAAWkc,UAAU0B,cACtB,UAA7BzB,QAAQnjB,IAAI,iBAEZwjB,WAAW/pB,MAAQolB,eAAgBpK,MAAMkQ,aAAetd,WAG5Dsb,YAAclO,MAAMkQ,cAEG,KAAjB/B,eAENY,WAAW/pB,MAAQolB,eAAe+D,cAElCD,YAAclO,MAAMkQ,cAKxBD,mBAAoBX,QAASzB,cAE7BoC,oBAAoB,SAASV,QACzBH,cAAclqB,KAAMqqB,OAAOpb,WAC3B+a,aAAahqB,KAAMklB,eAAgBtuB,EAAEyzB,QAAQhkB,IAAI,aAClDsiB,cAEHoC,oBAAoB,SAASG,QAAShtB,IAGY,IAAzCtH,EAAE6M,QAASynB,QAASnB,iBACrBmB,QAAQrrB,MAAMC,MAAQkqB,aAAa9rB,MAExCuqB,cACH7xB,EAAE+xB,cAActb,OAAO,GAElBga,SAED0D,mBAAoBX,QAASxB,cAC7BmC,oBAAoB,SAASV,QACzBF,cAAcnqB,KAAMqqB,OAAOpb,WAC3Bgb,aAAajqB,KAAMklB,eAAgBtuB,EAAEyzB,QAAQhkB,IAAI,aAClDuiB,cACHmC,oBAAoB,SAASG,QAAShtB,GAClCgtB,QAAQrrB,MAAMC,MAAQmqB,aAAa/rB,KACpCwqB,cACH9xB,EAAEgyB,cAAcvb,OAAO,IAS3B0d,oBAAoB,SAASV,OAAQnsB,GACjCmsB,OAAOpb,UAAY,oEAAoEib,cAAchsB,GAAG,SACxGmsB,OAAOxqB,MAAMC,MAAQkqB,aAAa9rB,KACnCyqB,cACEtB,QAED0D,oBAAoB,SAASV,OAAQnsB,GACjCmsB,OAAOpb,UAAY,oEAAoEkb,cAAcjsB,GAAG,SACxGmsB,OAAOxqB,MAAMC,MAAQmqB,aAAa/rB,KACnC0qB,cAIF9N,MAAMkQ,aAAehC,aAGtBD,WAAeQ,UAAUoB,aAAepB,UAAU0B,cACjB,UAA7BzB,QAAQnjB,IAAI,cACR2iB,YAAYtb,SACZsb,YAEHc,OAASP,UAAUoB,aACpBpB,UAAU0B,cAA6C,UAA7BzB,QAAQnjB,IAAI,iBAEtCwjB,WAAW/pB,MAAQolB,eAAgB6D,WAAWrb,WAGjC,KAAZlB,SAAmC,KAAjByc,cACnB5pB,OAAQxG,SAAU,EAAG,+BAAgC,IAKzDkwB,WAAa,OAGjBU,aAAa3pB,MAAQolB,eAAgB6D,YACrCI,eAAerpB,MAAQolB,eAAgB6D,YAClC1B,SACDxuB,SAAS2vB,YAAY3oB,MAAMC,MAAQolB,eAAgB6D,aAKhDhC,SAKE+C,OACDL,aAAapc,OAAS6X,eAAgB0E,QAAQqB,aAAavd,WAInE,IAAIyd,YAAcrQ,MAAMkQ,aACxB1B,eAAe,GAAGzpB,MAAMC,MAAQolB,eAAgBiG,aAChD9B,oBAAoBvpB,MAAQolB,eAAgBiG,aAG5C,IAAIC,WAAatQ,MAAMzN,SAAWkc,UAAUqB,cAA6C,UAA7BpB,QAAQnjB,IAAI,cACpEglB,QAAU,WAAate,QAAQe,eAAiB,OAAS,SAC7Dub,oBAAoBgC,SAAWD,WAAa1d,SAAS,KAAO,MACvD2Z,SACDsC,eAAe,GAAG9pB,MAAMC,MAAQolB,eAAgBiG,aAChDzB,eAAe,GAAG7pB,MAAMC,MAAQolB,eAAgBiG,aAChDzB,eAAe,GAAG7pB,MAAMwrB,SAAWD,WAAa1d,SAAS,KAAO,OAGpEoN,MAAMxX,SAAS,YAAY0X,aAAcF,MAAMxX,SAAS,UAExDkmB,QAAQ1wB,UAGFD,SAAS4M,UAAW5M,SAASwhB,WAAgBxhB,SAAS+hB,YACxD2O,UAAU+B,UAAY,GAW9B,SAASP,mBAAoBttB,GAAI8tB,IAAKC,KAIlC,IAFA,IACIC,OAAQC,OADRjwB,MAAM,EAAGyC,EAAE,EAAGH,KAAKwtB,IAAI/tB,OAEnBU,EAAIH,MAAO,CAGf,IAFA0tB,OAASF,IAAIrtB,GAAGwX,WAChBgW,OAASF,IAAMA,IAAIttB,GAAGwX,WAAa,KAC3B+V,QACqB,IAApBA,OAAOE,WACHH,IACD/tB,GAAIguB,OAAQC,OAAQjwB,OAGpBgC,GAAIguB,OAAQhwB,OAEhBA,SAEJgwB,OAASA,OAAOlV,YAChBmV,OAASF,IAAME,OAAOnV,YAAc,KAExCrY,KAGR,IAAI0tB,iBAAmB,SAMvB,SAASra,yBAA2B7R,WAEhC,IAaIxB,EAAGvD,OAAQkxB,UAZX/Q,MAAQpb,UAAUZ,OAClBnG,QAAU+G,UAAU8E,UACpB1L,OAAS4G,UAAU3G,QACnBguB,QAAUjuB,OAAOG,GACjBuT,QAAU1T,OAAOE,GACjBiwB,aAAenwB,OAAO+uB,QACtB5I,YAActmB,QAAQ6E,OACtBsuB,eAAiBla,cAAelS,UAAW,YAC3CqsB,YAAcn1B,EAAE,KAAM8I,UAAUX,QAChCitB,eAAiBlR,MAAM1c,aAAa,SACpC6tB,eAAiBnR,MAAM9b,WACvBktB,YAAa,EAEbnf,QAAUrN,UAAU0O,SACpB0b,KAAO/c,QAAQc,gBACfse,WAAarR,MAAMjb,MAAMC,MAK7B,IAJKqsB,aAA2C,IAA7BA,WAAW9hB,QAAQ,OAClC2hB,eAAiBG,YAGfjuB,EAAE,EAAIA,EAAE4tB,eAAetuB,OAASU,IAEX,QADvBvD,OAAShC,QAAQmzB,eAAe5tB,KACpBsT,SACR7W,OAAO6W,OAAS4a,kBAAmBzxB,OAAO2U,WAAY2c,gBACtDC,YAAa,GAQrB,GAAKpC,OAAUoC,aAAgB1f,UAAaua,SACvC9H,aAAelN,iBAAkBrS,YACjCuf,aAAe8M,YAAYvuB,OAE5B,IAAMU,EAAE,EAAIA,EAAE+gB,YAAc/gB,IAAM,CAC9B,IAAI2V,OAASpC,wBAAyB/R,UAAWxB,GACjC,OAAX2V,SACDlb,QAAQkb,QAAQrC,OAAS0T,eAAgB6G,YAAYvoB,GAAGtF,GAAG4B,cAKvE,CAKI,IAAIusB,SAAWz1B,EAAEkkB,OAAO+P,QACnBxkB,IAAK,aAAc,UACnByhB,WAAY,MAEjBuE,SAAS9oB,KAAK,YAAY1J,SAC1B,IAAIod,GAAKrgB,EAAE,SAAS2P,SAAU8lB,SAAS9oB,KAAK,UAY5C,IARA8oB,SAAS9oB,KAAK,gBAAgB1J,SAC9BwyB,SACK9e,OAAQ3W,EAAE8I,UAAUX,QAAQ8rB,SAC5Btd,OAAQ3W,EAAE8I,UAAUT,QAAQ4rB,SAEjCwB,SAAS9oB,KAAK,sBAAsB8C,IAAI,QAAS,IAEjD0lB,YAAcxnB,gBAAiB7E,UAAW2sB,SAAS9oB,KAAK,SAAS,IAC3DrF,EAAE,EAAIA,EAAE4tB,eAAetuB,OAASU,IAClCvD,OAAShC,QAAQmzB,eAAe5tB,IAChC6tB,YAAY7tB,GAAG2B,MAAMC,MAA8B,OAAtBnF,OAAO2U,YAA6C,KAAtB3U,OAAO2U,WAC9D4V,eAAgBvqB,OAAO2U,YACvB,GAIC3U,OAAO2U,YAAc9C,SACtB5V,EAAGm1B,YAAY7tB,IAAKqP,OAAQ3W,EAAE,UAAUyP,IAAK,CACzCvG,MAAOnF,OAAO2U,WACdgd,OAAQ,EACRjB,QAAS,EACT1D,OAAQ,EACRta,OAAQ,KAKpB,GAAK3N,UAAU9F,OAAO4D,OAClB,IAAMU,EAAE,EAAIA,EAAE4tB,eAAetuB,OAASU,IAElCvD,OAAShC,QADTkzB,UAAYC,eAAe5tB,IAE3BtH,EAAG21B,iBAAkB7sB,UAAWmsB,YAC3BhB,OAAO,GACPtd,OAAQ5S,OAAO6xB,iBACfjmB,SAAU0Q,IAKvBrgB,EAAE,SAAUy1B,UAAUvE,WAAW,QAMjC,IAAI2E,OAAS71B,EAAE,UAAUyP,IAAKmG,SAAWua,QACjC,CACI9Z,SAAU,WACVC,IAAK,EACLC,KAAM,EACNE,OAAQ,EACRqf,MAAO,EACPpf,SAAU,UAEd,IAEHC,OAAQ8e,UACR9lB,SAAU0lB,gBAIVzf,SAAWyc,aACZoD,SAASvsB,MAAOmpB,cAEVzc,SACN6f,SAAShmB,IAAK,QAAS,QACvBgmB,SAASvE,WAAW,SAGfuE,SAASvsB,QAAUmsB,eAAere,aAAeoe,gBAClDK,SAASvsB,MAAOmsB,eAAere,cAG7BmZ,QACNsF,SAASvsB,MAAOmsB,eAAere,aAEzBoe,gBACNK,SAASvsB,MAAOksB,gBAQpB,IAAI1H,MAAQ,EACZ,IAAMpmB,EAAE,EAAIA,EAAE4tB,eAAetuB,OAASU,IAAM,CACxC,IAAIhD,KAAOtE,EAAEm1B,YAAY7tB,IACrBypB,OAASzsB,KAAK8vB,aAAe9vB,KAAK4E,QAGlC6sB,SAAW5f,QAAQmB,UACnBH,KAAKgX,KAAMgH,YAAY7tB,GAAGiQ,wBAAwBrO,OAClD5E,KAAK8vB,aAGT1G,OAASqI,SAETh0B,QAAQmzB,eAAe5tB,IAAIsT,OAAS0T,eAAgByH,SAAWhF,QAEnE7M,MAAMjb,MAAMC,MAAQolB,eAAgBZ,OAEpCmI,OAAO5yB,SASX,GAHKmyB,iBACDlR,MAAMjb,MAAMC,MAAQolB,eAAgB8G,kBAElCA,gBAAkBxf,WAAc9M,UAAUktB,SAAW,CACvD,IAAIC,WAAa,WACbj2B,EAAEC,QAAQsqB,GAAG,aAAazhB,UAAUK,UAAWqhB,aAAa,WACxD/P,sBAAuB3R,gBAK1BoqB,KACD9d,WAAY6gB,WAAY,KAGxBA,aAEJntB,UAAUktB,UAAW,GAW7B,IAAIxL,YAAcjqB,UAAUkU,KAAKC,SAQjC,SAAS8gB,kBAAoBtsB,MAAOkc,QAEhC,IAAOlc,MACH,OAAO,EAEX,IAAIkN,EAAIpW,EAAE,UACLyP,IAAK,QAAS6e,eAAgBplB,QAC9ByG,SAAUyV,QAAUllB,SAASqjB,MAC9BtU,IAAMmH,EAAE,GAAGW,YAEf,OADAX,EAAEnT,SACKgM,IASX,SAAS0mB,iBAAkB1zB,SAAUgb,QAEjC,IAAI3E,IAAM4d,mBAAoBj0B,SAAUgb,QACxC,GAAK3E,IAAM,EACP,OAAO,KAEX,IAAIvX,KAAOkB,SAASe,OAAOsV,KAC3B,OAASvX,KAAK2B,IAEV3B,KAAKge,QAAQ9B,QADbjd,EAAE,SAASkS,KAAM4J,eAAgB7Z,SAAUqW,IAAK2E,OAAQ,YAAc,GAU9E,SAASiZ,mBAAoBj0B,SAAUgb,QAGnC,IADA,IAAIhV,EAAGwlB,KAAK,EAAG0I,QAAU,EACf7uB,EAAE,EAAGmL,IAAIxQ,SAASe,OAAO4D,OAASU,EAAEmL,IAAMnL,KAGhDW,GADAA,GADAA,EAAI6T,eAAgB7Z,SAAUqF,EAAG2V,OAAQ,WAAY,IAC/CrL,QAASojB,iBAAkB,KAC3BpjB,QAAS,UAAW,MACnBhL,OAAS6mB,MACZA,IAAMxlB,EAAErB,OACRuvB,OAAS7uB,GAGjB,OAAO6uB,OAQX,SAAS7H,eAAgBrmB,GAErB,OAAW,OAANA,EACM,MAEM,iBAALA,EACDA,EAAI,EACP,MACAA,EAAE,KAGHA,EAAEqL,MAAM,OACXrL,EAAE,KACFA,EAMR,SAAS8G,eAAiB9M,UAEtB,IACIqF,EAAG6L,EAAG+I,KAGNjG,UAAWxQ,KAAMqT,MAAOsd,OAFxBtnB,MAAQ,GACRlB,UAAY3L,SAAS2L,UAErByoB,MAAQp0B,SAASq0B,eACjBC,SAAWv2B,EAAEsB,cAAe+0B,OAC5BG,WAAa,GACbj1B,IAAM,SAAW2M,GACRA,EAAEtH,SAAY5G,EAAEqB,QAAS6M,EAAE,IAE5BsoB,WAAWptB,KAAM8E,GAIjBlO,EAAE0rB,MAAO8K,WAAYtoB,IAejC,IAVKlO,EAAEqB,QAASg1B,QACZ90B,IAAK80B,OAEJE,UAAYF,MAAMI,KACnBl1B,IAAK80B,MAAMI,KAEfl1B,IAAKU,SAASuM,WACV+nB,UAAYF,MAAMK,MAClBn1B,IAAK80B,MAAMK,MAETpvB,EAAE,EAAIA,EAAEkvB,WAAW5vB,OAASU,IAI9B,IAAM6L,EAAE,EAAG+I,MADXjG,UAAYrI,UADZwoB,OAASI,WAAWlvB,GAAG,IACO2O,WACJrP,OAASuM,EAAE+I,KAAO/I,IAGxC2F,MAAQlL,UADRnI,KAAOwQ,UAAU9C,IACO2F,OAAS,cACLrX,IAAvB+0B,WAAWlvB,GAAGqvB,OACfH,WAAWlvB,GAAGqvB,KAAO32B,EAAE6M,QAAS2pB,WAAWlvB,GAAG,GAAIsG,UAAUnI,MAAMiJ,YAEtEI,MAAM1F,KAAM,CACRnF,IAAWmyB,OACXlyB,IAAWuB,KACXyJ,IAAWsnB,WAAWlvB,GAAG,GACzBzC,MAAW2xB,WAAWlvB,GAAGqvB,KACzBxyB,KAAW2U,MACXkV,UAAWztB,UAAUyG,IAAI7C,KAAK4B,MAAM+S,MAAM,UAItD,OAAOhK,MAQX,SAAS+U,QAAU/a,WAEf,IACIxB,EAAGmL,IAAKtL,KAKRyvB,QAEA9nB,MANA+nB,OAAS,GACTC,SAAWv2B,UAAUyG,IAAI7C,KAAK4B,MAC9B/C,OAAS8F,UAAU9F,OACnB+zB,WAAa,EAEb3K,cAAgBtjB,UAAUuH,gBAO9B,IAFAkL,eAAgBzS,WAEVxB,EAAE,EAAGmL,KADX3D,MAAQC,eAAgBjG,YACHlC,OAASU,EAAEmL,IAAMnL,KAClCsvB,QAAU9nB,MAAMxH,IAEH0mB,WACT+I,aAGJC,YAAaluB,UAAW8tB,QAAQ1yB,KAGpC,GAAmC,OAA9BmL,cAAevG,YAAyC,IAAjBgG,MAAMlI,OAClD,CAGI,IAAMU,EAAE,EAAGH,KAAKilB,cAAcxlB,OAASU,EAAEH,KAAOG,IAC5CuvB,OAAOzK,cAAc9kB,IAAMA,EAuB1ByvB,aAAejoB,MAAMlI,OAEtBwlB,cAAche,MAAM,SAAWF,EAAGiQ,GAC9B,IACI8Y,EAAGC,EAAG/jB,EAAG8Y,KAAM7d,KACfzH,IAAImI,MAAMlI,OACVuwB,MAAQn0B,OAAOkL,GAAG8Q,WAClBoY,MAAQp0B,OAAOmb,GAAGa,WACtB,IAAM7L,EAAE,EAAIA,EAAExM,IAAMwM,IAKhB,GAAc,IADd8Y,MAFAgL,EAAIE,OADJ/oB,KAAOU,MAAMqE,IACEjP,OACfgzB,EAAIE,MAAMhpB,KAAKlK,OACD,EAAI+yB,EAAEC,EAAI,EAAI,GAExB,MAAoB,QAAb9oB,KAAKc,IAAgB+c,MAAQA,KAK5C,OAFAgL,EAAIJ,OAAO3oB,KACXgpB,EAAIL,OAAO1Y,KACG,EAAI8Y,EAAEC,EAAI,EAAI,KAOhC9K,cAAche,MAAM,SAAWF,EAAGiQ,GAC9B,IACI8Y,EAAGC,EAAG/jB,EAAG8Y,KAAM7d,KACfzH,IAAImI,MAAMlI,OACVuwB,MAAQn0B,OAAOkL,GAAG8Q,WAClBoY,MAAQp0B,OAAOmb,GAAGa,WACtB,IAAM7L,EAAE,EAAIA,EAAExM,IAAMwM,IAMhB,GAJA8jB,EAAIE,OADJ/oB,KAAOU,MAAMqE,IACEjP,KACfgzB,EAAIE,MAAMhpB,KAAKlK,KAGD,KADd+nB,MADK6K,SAAS1oB,KAAKjK,KAAK,IAAIiK,KAAKc,MAAQ4nB,SAAS,UAAU1oB,KAAKc,MACtD+nB,EAAGC,IAEV,OAAOjL,KAKf,OAFAgL,EAAIJ,OAAO3oB,KACXgpB,EAAIL,OAAO1Y,KACG,EAAI8Y,EAAEC,EAAI,EAAI,KAKxCpuB,UAAU+F,SAAU,EAOxB,SAASO,YAAcnN,UASnB,IAPA,IAAIo1B,MACAC,SACAv1B,QAAUE,SAAS2L,UACnBkB,MAAQC,eAAgB9M,UACxBs1B,MAAQt1B,SAASqH,UAAUiuB,MAGrBjwB,EAAE,EAAGH,KAAKpF,QAAQ6E,OAASU,EAAEH,KAAOG,IAC9C,CACI,IAAIpD,IAAMnC,QAAQuF,GACdoH,UAAYxK,IAAIwK,UAChB0J,OAASlU,IAAIkU,OAAOxG,QAAS,SAAU,IACvC6G,GAAKvU,IAAI6T,IAGbU,GAAG+e,gBAAgB,aAEdtzB,IAAI2V,WACA/K,MAAMlI,OAAS,GAAKkI,MAAM,GAAG5K,KAAOoD,GACrCmR,GAAG2H,aAAa,YAA2B,OAAdtR,MAAM,GAAGI,IAAa,YAAc,cACjEooB,SAAW5oB,UAAUI,MAAM,GAAGjK,MAAM,IAAM6J,UAAU,IAGpD4oB,SAAW5oB,UAAU,GAEzB2oB,MAAQjf,QAAwB,QAAbkf,SACfC,MAAME,eACNF,MAAMG,kBAIVL,MAAQjf,OAEZK,GAAG2H,aAAa,aAAciX,QAYtC,SAASM,gBAAkB11B,SAAUgb,OAAQtG,OAAQ5T,UAEjD,IAGI60B,YAHA1zB,IAAMjC,SAAS2L,UAAUqP,QACzBxO,QAAUxM,SAASuM,UACnBE,UAAYxK,IAAIwK,UAEhBmpB,KAAO,SAAW3pB,EAAGwI,UACrB,IAAI4B,IAAMpK,EAAEyoB,KAIZ,YAHal1B,IAAR6W,MACDA,IAAMtY,EAAE6M,QAASqB,EAAE,GAAIQ,YAEpB4J,IAAI,EAAI5J,UAAU9H,OACrB0R,IAAI,EACJ5B,SACI,KACA,GAOZ,GAJ2B,iBAAfjI,QAAQ,KAChBA,QAAUxM,SAASuM,UAAY,CAAEC,UAGhCkI,QAAU1U,SAAS0H,UAAUmuB,WAAa,CAE3C,IAAIC,QAAU/3B,EAAE6M,QAASoQ,OAAQ5K,OAAO5D,QAAS,OAC/B,IAAbspB,SAGoB,QADrBH,YAAcC,KAAMppB,QAAQspB,UAAU,KACU,IAAnBtpB,QAAQ7H,SACjCgxB,YAAc,GAEG,OAAhBA,YACDnpB,QAAQ7F,OAAQmvB,QAAS,IAGzBtpB,QAAQspB,SAAS,GAAKrpB,UAAUkpB,aAChCnpB,QAAQspB,SAASpB,KAAOiB,eAK5BnpB,QAAQrF,KAAM,CAAE6T,OAAQvO,UAAU,GAAI,IACtCD,QAAQA,QAAQ7H,OAAO,GAAG+vB,KAAO,QAG/BloB,QAAQ7H,QAAU6H,QAAQ,GAAG,IAAMwO,QAEzC2a,YAAcC,KAAMppB,QAAQ,IAC5BA,QAAQ7H,OAAS,EACjB6H,QAAQ,GAAG,GAAKC,UAAUkpB,aAC1BnpB,QAAQ,GAAGkoB,KAAOiB,cAIlBnpB,QAAQ7H,OAAS,EACjB6H,QAAQrF,KAAM,CAAE6T,OAAQvO,UAAU,KAClCD,QAAQ,GAAGkoB,KAAO,GAGtBjT,UAAWzhB,UAEa,mBAAZc,UACRA,SAAUd,UAWlB,SAAS8e,sBAAwB9e,SAAU+1B,SAAU/a,OAAQla,UAEzD,IAAImB,IAAMjC,SAAS2L,UAAUqP,QAC7Bgb,cAAeD,SAAU,IAAI,SAAUvN,IAEZ,IAAlBvmB,IAAI2V,YAKJ5X,SAAS0H,UAAU8b,aACpBjD,qBAAsBvgB,UAAU,GAChCmT,YAAY,WACRuiB,gBAAiB11B,SAAUgb,OAAQwN,EAAEyN,SAAUn1B,UAGZ,QAA9BsM,cAAepN,WAChBugB,qBAAsBvgB,UAAU,KAErC,IAGH01B,gBAAiB11B,SAAUgb,OAAQwN,EAAEyN,SAAUn1B,cAS3D,SAAS4L,kBAAmB1M,UAExB,IAIIqF,EAAGmL,IAAKwK,OAJRkb,QAAUl2B,SAASm2B,UACnBC,UAAYp2B,SAAS2I,SAAS0tB,YAC9BlqB,KAAOW,eAAgB9M,UACvBqM,SAAWrM,SAAS0H,UAExB,GAAK2E,SAASM,OAASN,SAASiqB,aAAe,CAE3C,IAAMjxB,EAAE,EAAGmL,IAAI0lB,QAAQvxB,OAASU,EAAEmL,IAAMnL,IACpC2V,OAASkb,QAAQ7wB,GAAGrD,IAEpBjE,EAAGqS,OAAQpQ,SAASe,OAAQ,UAAWia,SAClChQ,YAAaorB,WAAa/wB,EAAE,EAAIA,EAAE,EAAI,IAG/C,IAAMA,EAAE,EAAGmL,IAAIrE,KAAKxH,OAASU,EAAEmL,IAAMnL,IACjC2V,OAAS7O,KAAK9G,GAAGrD,IACjBjE,EAAGqS,OAAQpQ,SAASe,OAAQ,UAAWia,SAClC9R,SAAUktB,WAAa/wB,EAAE,EAAIA,EAAE,EAAI,IAGhDrF,SAASm2B,UAAYhqB,KAWzB,SAAS4oB,YAAa/0B,SAAUqW,KAG5B,IAEIkgB,WAOAh3B,IAAK6b,SATLtZ,OAAS9B,SAAS2L,UAAU0K,KAC5BmgB,WAAal4B,UAAUyG,IAAIjB,MAAMhC,OAAO20B,eAEvCD,aACDD,WAAaC,WAAWv1B,KAAMjB,SAASuG,UAAWvG,SAAUqW,IACxD2C,wBAAyBhZ,SAAUqW,OAM3C,IADA,IAAI0V,UAAYztB,UAAUyG,IAAI7C,KAAK4B,MAAMhC,OAAO+U,MAAM,QAC5CxR,EAAE,EAAGmL,IAAIxQ,SAASe,OAAO4D,OAASU,EAAEmL,IAAMnL,KAChD9F,IAAMS,SAASe,OAAOsE,IACX0X,aACPxd,IAAIwd,WAAa,IAEdxd,IAAIwd,WAAW1G,OAAQmgB,aAC1Bpb,SAAWob,WACPD,WAAWlxB,GACXwU,eAAgB7Z,SAAUqF,EAAGgR,IAAK,QACtC9W,IAAIwd,WAAW1G,KAAO0V,UAClBA,UAAW3Q,UACXA,UAShB,SAAS7M,aAAevO,UAEpB,GAAMA,SAAS0H,UAAU4G,aAActO,SAASwgB,YAAhD,CAKA,IAAIkW,MAAQ,CACRC,MAAU,IAAI5jB,KACdpC,MAAS3Q,SAASsJ,eAClB3E,OAAS3E,SAASymB,gBAClB3iB,MAAS/F,EAAE+H,QAAQ,EAAM,GAAI9F,SAASuM,WACtC1K,OAASopB,iBAAkBjrB,SAAS8hB,iBACpChiB,QAAS/B,EAAE8M,IAAK7K,SAAS2L,WAAW,SAAW1J,IAAKoD,GAChD,MAAO,CACH3B,QAASzB,IAAImX,SACbvX,OAAQopB,iBAAkBjrB,SAASsW,gBAAgBjR,SAI/D6H,gBAAiBlN,SAAU,oBAAqB,kBAAmB,CAACA,SAAU02B,QAC9E12B,SAAS42B,YAAcF,MACvB12B,SAAS62B,oBAAoB51B,KAAMjB,SAASuG,UAAWvG,SAAU02B,QASrE,SAASloB,aAAexO,SAAUmF,MAAOrE,UAErC,IAAIuE,EAAGmL,IACH1Q,QAAUE,SAAS2L,UACnBmrB,OAAS,SAAW9wB,GACpB,GAAOA,GAAOA,EAAE2wB,KAAhB,CAMA,IAAII,YAAc7pB,gBAAiBlN,SAAU,oBAAqB,kBAAmB,CAACA,SAAUgG,IAChG,IAA0C,IAArCjI,EAAE6M,SAAS,EAAOmsB,aAAvB,CAKA,IAAIC,SAAWh3B,SAASi3B,eACxB,GAAKD,SAAW,GAAKhxB,EAAE2wB,MAAQ,IAAI5jB,KAAmB,IAATikB,SACzCl2B,gBAIJ,GAAKkF,EAAElG,SAAWA,QAAQ6E,SAAWqB,EAAElG,QAAQ6E,OAC3C7D,eADJ,CA+BA,GA1BAd,SAASk3B,aAAen5B,EAAE+H,QAAQ,EAAM,GAAIE,QAG3BxG,IAAZwG,EAAE2K,QACH3Q,SAASsJ,eAAoBtD,EAAE2K,MAC/B3Q,SAASoJ,kBAAoBpD,EAAE2K,YAEjBnR,IAAbwG,EAAErB,SACH3E,SAASymB,gBAAoBzgB,EAAErB,aAGlBnF,IAAZwG,EAAElC,QACH9D,SAASuM,UAAY,GACrBxO,EAAEkH,KAAMe,EAAElC,OAAO,SAAWuB,EAAGpD,KAC3BjC,SAASuM,UAAUpF,KAAMlF,IAAI,IAAMnC,QAAQ6E,OACvC,CAAE,EAAG1C,IAAI,IACTA,cAKMzC,IAAbwG,EAAEnE,QACH9D,EAAE+H,OAAQ9F,SAAS8hB,gBAAiBqJ,gBAAiBnlB,EAAEnE,SAItDmE,EAAElG,QACH,IAAMuF,EAAE,EAAGmL,IAAIxK,EAAElG,QAAQ6E,OAASU,EAAEmL,IAAMnL,IAAM,CAC5C,IAAIpD,IAAM+D,EAAElG,QAAQuF,QAEC7F,IAAhByC,IAAIyB,UACL5D,QAAQuF,GAAG+T,SAAWnX,IAAIyB,cAGVlE,IAAfyC,IAAIJ,QACL9D,EAAE+H,OAAQ9F,SAASsW,gBAAgBjR,GAAI8lB,gBAAiBlpB,IAAIJ,SAIxEqL,gBAAiBlN,SAAU,gBAAiB,cAAe,CAACA,SAAUgG,IACtElF,iBAvDIA,gBAPAA,YAgER,GAAOd,SAAS0H,UAAU4G,WAA1B,CAIA,IAAIooB,MAAQ12B,SAASm3B,oBAAoBl2B,KAAMjB,SAASuG,UAAWvG,SAAU82B,aAC9Dt3B,IAAVk3B,OACDI,OAAQJ,YALR51B,WAeR,SAAS9B,oBAAsBijB,OAE3B,IAAIjiB,SAAW1B,UAAU0B,SACrBqW,IAAMtY,EAAE6M,QAASqX,MAAO7R,OAAQpQ,SAAU,WAC9C,OAAgB,IAATqW,IACHrW,SAASqW,KACT,KAUR,SAAS7P,OAAQxG,SAAUo3B,MAAOC,IAAKC,IAQnC,GANAD,IAAM,wBACDr3B,SAAW,YAAYA,SAASyG,SAAS,MAAQ,IAAI4wB,IACrDC,KACDD,KAAO,gFACqBC,KAEzBF,MAAS,CAEZ,IAAIryB,IAAMzG,UAAUyG,IAChB7C,KAAO6C,IAAIwyB,UAAYxyB,IAAIyyB,QAI/B,GAHKx3B,UACDkN,gBAAiBlN,SAAU,KAAM,QAAS,CAAEA,SAAUs3B,GAAID,MAEjD,SAARn1B,KACDu1B,MAAOJ,SAEN,IAAa,SAARn1B,KACN,MAAM,IAAIw1B,MAAML,KAEK,mBAARn1B,MACbA,KAAMlC,SAAUs3B,GAAID,OAYhC,SAAS5vB,OAAQie,IAAK1jB,IAAKkK,KAAMyrB,YAExB55B,EAAEqB,QAAS8M,MACZnO,EAAEkH,KAAMiH,MAAM,SAAU7G,EAAG2H,KAClBjP,EAAEqB,QAAS4N,KACZvF,OAAQie,IAAK1jB,IAAKgL,IAAI,GAAIA,IAAI,IAG9BvF,OAAQie,IAAK1jB,IAAKgL,cAKVxN,IAAfm4B,aACDA,WAAazrB,WAEE1M,IAAdwC,IAAIkK,QACLwZ,IAAIiS,YAAc31B,IAAIkK,QAoB9B,SAAS9G,UAAWmL,IAAKqnB,SAAUC,WAE/B,IAAI7qB,IACJ,IAAM,IAAIqD,QAAQunB,SACTA,SAAS/hB,eAAexF,QACzBrD,IAAM4qB,SAASvnB,MACVtS,EAAEsB,cAAe2N,MACXjP,EAAEsB,cAAekR,IAAIF,SACxBE,IAAIF,MAAQ,IAEhBtS,EAAE+H,QAAQ,EAAMyK,IAAIF,MAAOrD,MAErB6qB,WAAsB,SAATxnB,MAA4B,WAATA,MAAqBtS,EAAEqB,QAAQ4N,KACrEuD,IAAIF,MAAQrD,IAAI7B,QAGhBoF,IAAIF,MAAQrD,KAIxB,OAAOuD,IAWX,SAASylB,cAAe7hB,EAAGoG,MAAO3V,IAE9B7G,EAAEoW,GACGmU,GAAI,WAAY/N,OAAO,SAAUiO,GAC1BrU,EAAE2jB,OACFlzB,GAAG4jB,MAEVF,GAAI,cAAe/N,OAAO,SAAUiO,GACZ,KAAZA,EAAEuP,QACHvP,EAAEwP,iBACFpzB,GAAG4jB,OAGdF,GAAI,kBAAkB,WAEf,OAAO,KAYvB,SAAS3gB,eAAgBd,UAAWoxB,OAAQrzB,GAAIiiB,OAEvCjiB,IAEDiC,UAAUoxB,QAAQ9wB,KAAM,CACpBvC,GAAMA,GACNiiB,MAASA,QAkBrB,SAAS3Z,gBAAiBlN,SAAUk4B,YAAaC,UAAWnlB,MAExD,IAAI0S,IAAM,GAMV,GALKwS,cACDxS,IAAM3nB,EAAE8M,IAAK7K,SAASk4B,aAAa/sB,QAAQitB,WAAW,SAAUprB,KAC5D,OAAOA,IAAIpI,GAAGwO,MAAOpT,SAASuG,UAAWyM,UAG9B,OAAdmlB,UAAqB,CACtB,IAAI3P,EAAIzqB,EAAEs6B,MAAOF,UAAU,OAC3Bp6B,EAAEiC,SAASiG,QAAQqyB,QAAS9P,EAAGxV,MAC/B0S,IAAIve,KAAMqhB,EAAE+P,QAEhB,OAAO7S,IASX,SAAS8G,kBAAoBxsB,UAEzB,IACI2Q,MAAQ3Q,SAASsJ,eACjBsH,IAAM5Q,SAASsgB,eACf5b,IAAM1E,SAASymB,gBAEd9V,OAASC,MAEVD,MAAQC,IAAMlM,KAGlBiM,OAAUA,MAAQjM,MACJ,IAATA,KAAciM,MAAQ,KAEvBA,MAAQ,GAEZ3Q,SAASsJ,eAAiBqH,MAW9B,SAASoO,YAAa/e,SAAUkC,MAE5B,IAAI6G,SAAW/I,SAAS+I,SACpByvB,KAAOl6B,UAAUyG,IAAIgE,SAAS7G,MAClC,OAAKnE,EAAEsB,cAAe0J,WAAcA,SAAS7G,MAGlCs2B,KAAKzvB,SAAS7G,QAAUs2B,KAAK55B,EAEV,iBAAbmK,UAGNyvB,KAAKzvB,WAGTyvB,KAAK55B,EAUhB,SAASwO,cAAgBpN,UAErB,OAAKA,SAAS0H,UAAUwY,YACb,MAEDlgB,SAAS6J,MAAQ7J,SAAS8lB,YACzB,OAEJ,MAsCX,IAAI2S,YAAc,GAOdC,aAAeC,MAAMC,UAgHzBz6B,KAAO,SAAW06B,QAAS/5B,MAEvB,KAAQN,gBAAgBL,MACpB,OAAO,IAAIA,KAAM06B,QAAS/5B,MAE9B,IAAIkB,SAAW,GACX84B,YAAc,SAAW1nB,GACzB,IAAInF,EAlGM,SAAW8sB,OAEzB,IAAI1iB,IAAK2iB,GACLh5B,SAAW1B,UAAU0B,SACrBi5B,OAASl7B,EAAE8M,IAAK7K,UAAU,SAAU8K,IACpC,OAAOA,GAAG7E,UAEd,OAAO8yB,MAGGA,MAAM9yB,QAAU8yB,MAAMl0B,KAErB,CAAEk0B,OAEHA,MAAM52B,UAA6C,UAAjC42B,MAAM52B,SAASC,eAGvB,KADhBiU,IAAMtY,EAAE6M,QAASmuB,MAAOE,SACJ,CAAEj5B,SAASqW,MAAS,KAElC0iB,OAAmC,mBAAnBA,MAAM/4B,SACrB+4B,MAAM/4B,WAAWL,WAED,iBAAVo5B,MAEbC,GAAKj7B,EAAEg7B,OAEDA,iBAAiBh7B,IAEvBi7B,GAAKD,OAEJC,GACMA,GAAGnuB,KAAK,WAEX,OAAgB,KADhBwL,IAAMtY,EAAE6M,QAASpM,KAAMy6B,SACHj5B,SAASqW,KAAO,QACpC1W,eAJR,GAtBW,GA0FCu5B,CAAa9nB,GAChBnF,IACDjM,SAAWA,SAASwe,OAAQvS,KAGpC,GAAKlO,EAAEqB,QAASy5B,SACZ,IAAM,IAAIxzB,EAAE,EAAGmL,IAAIqoB,QAAQl0B,OAASU,EAAEmL,IAAMnL,IACxCyzB,YAAaD,QAAQxzB,SAIzByzB,YAAaD,SAGjBr6B,KAAKq6B,QAAUjyB,QAAS5G,UAEnBlB,MACDf,EAAE0rB,MAAOjrB,KAAMM,MAGnBN,KAAK26B,SAAW,CACZt6B,KAAM,KACNoe,KAAM,KACNmc,KAAM,MAEVj7B,KAAK2H,OAAQtH,KAAMA,KAAMi6B,cAE7Bn6B,UAAU+6B,IAAMl7B,KAGhBJ,EAAE+H,OAAQ3H,KAAKy6B,UAAW,CACtBU,IAAK,WAED,OAAwB,IAAjB96B,KAAK+6B,SAEhB/a,OAASka,aAAala,OACtBqa,QAAS,GACTU,MAAO,WAEH,OAAO/6B,KAAKkB,UAAUiF,QAE1BM,KAAM,SAAWL,IAEb,IAAM,IAAIS,EAAE,EAAGmL,IAAIhS,KAAKmG,OAASU,EAAEmL,IAAKnL,IACpCT,GAAG3D,KAAMzC,KAAMA,KAAK6G,GAAIA,EAAG7G,MAE/B,OAAOA,MAEXmM,GAAI,SAAW0L,KAEX,IAAImjB,IAAMh7B,KAAKq6B,QACf,OAAOW,IAAI70B,OAAS0R,IAChB,IAAIlY,KAAMq7B,IAAInjB,KAAM7X,KAAK6X,MACzB,MAERjK,OAAQ,SAAWxH,IAEf,IAAIqH,EAAI,GACR,GAAKysB,aAAatsB,OACdH,EAAIysB,aAAatsB,OAAOnL,KAAMzC,KAAMoG,GAAIpG,WAIxC,IAAM,IAAI6G,EAAE,EAAGmL,IAAIhS,KAAKmG,OAASU,EAAEmL,IAAMnL,IAChCT,GAAG3D,KAAMzC,KAAMA,KAAK6G,GAAIA,EAAG7G,OAC5ByN,EAAE9E,KAAM3I,KAAK6G,IAIzB,OAAO,IAAIlH,KAAMK,KAAKq6B,QAAS5sB,IAEnCvM,QAAS,WAEL,IAAIuM,EAAI,GACR,OAAO,IAAI9N,KAAMK,KAAKq6B,QAAS5sB,EAAEuS,OAAOpL,MAAOnH,EAAGzN,KAAKmB,aAE3DsL,KAASytB,aAAaztB,KACtBuG,QAASknB,aAAalnB,SAAW,SAAU0Z,IAAKva,OAE5C,IAAM,IAAItL,EAAGsL,OAAS,EAAIH,IAAIhS,KAAKmG,OAASU,EAAEmL,IAAMnL,IAChD,GAAK7G,KAAK6G,KAAO6lB,IACb,OAAO7lB,EAGf,OAAQ,GAEZo0B,SAAU,SAAW/5B,QAASwC,KAAM0C,GAAI80B,WACpC,IACYhU,IACRrgB,EAAGmL,IAAKS,EAAGsI,IAEX1a,KAAM86B,MAAOC,KAHb3tB,EAAI,GAEJ4sB,QAAUr6B,KAAKq6B,QAEfM,SAAW36B,KAAK26B,SAQpB,IANwB,iBAAZz5B,UACRg6B,UAAY90B,GACZA,GAAK1C,KACLA,KAAOxC,QACPA,SAAU,GAER2F,EAAE,EAAGmL,IAAIqoB,QAAQl0B,OAASU,EAAEmL,IAAMnL,IAAM,CAC1C,IAAIw0B,QAAU,IAAI17B,KAAM06B,QAAQxzB,IAChC,GAAc,UAATnD,UAEY1C,KADbkmB,IAAM9gB,GAAG3D,KAAM44B,QAAShB,QAAQxzB,GAAIA,KAEhC4G,EAAE9E,KAAMue,UAGX,GAAc,YAATxjB,MAA+B,SAATA,UAGf1C,KADbkmB,IAAM9gB,GAAG3D,KAAM44B,QAAShB,QAAQxzB,GAAI7G,KAAK6G,GAAIA,KAEzC4G,EAAE9E,KAAMue,UAGX,GAAc,WAATxjB,MAA8B,gBAATA,MAAmC,QAATA,MAA2B,SAATA,KAOvE,IAJAy3B,MAAQn7B,KAAK6G,GACC,gBAATnD,OACDrD,KAAOi7B,sBAAuBjB,QAAQxzB,GAAI8zB,SAASC,OAEjDnoB,EAAE,EAAGsI,IAAIogB,MAAMh1B,OAASsM,EAAEsI,IAAMtI,IAClC2oB,KAAOD,MAAM1oB,QAOAzR,KALTkmB,IADU,SAATxjB,KACK0C,GAAG3D,KAAM44B,QAAShB,QAAQxzB,GAAIu0B,KAAKr6B,IAAKq6B,KAAK93B,OAAQuD,EAAG4L,GAGxDrM,GAAG3D,KAAM44B,QAAShB,QAAQxzB,GAAIu0B,KAAMv0B,EAAG4L,EAAGpS,QAGhDoN,EAAE9E,KAAMue,KAKxB,GAAKzZ,EAAEtH,QAAU+0B,UAAY,CACzB,IAAI/6B,IAAM,IAAIR,KAAM06B,QAASn5B,QAAUuM,EAAEuS,OAAOpL,MAAO,GAAInH,GAAMA,GAC7D8tB,YAAcp7B,IAAIw6B,SAItB,OAHAY,YAAYl7B,KAAOs6B,SAASt6B,KAC5Bk7B,YAAY9c,KAAOkc,SAASlc,KAC5B8c,YAAYX,KAAOD,SAASC,KACrBz6B,IAEX,OAAOH,MAEXw7B,YAAatB,aAAasB,aAAe,WAGrC,OAAOx7B,KAAKgT,QAAQ4B,MAAO5U,KAAKmB,QAAQy4B,UAAWnlB,YAEvDtO,OAAS,EACTkG,IAAK,SAAWjG,IAEZ,IAAIqH,EAAI,GACR,GAAKysB,aAAa7tB,IACdoB,EAAIysB,aAAa7tB,IAAI5J,KAAMzC,KAAMoG,GAAIpG,WAIrC,IAAM,IAAI6G,EAAE,EAAGmL,IAAIhS,KAAKmG,OAASU,EAAEmL,IAAMnL,IACrC4G,EAAE9E,KAAMvC,GAAG3D,KAAMzC,KAAMA,KAAK6G,GAAIA,IAGxC,OAAO,IAAIlH,KAAMK,KAAKq6B,QAAS5sB,IAEnCguB,MAAO,SAAW5pB,MAEd,OAAO7R,KAAKqM,KAAK,SAAWC,IACxB,OAAOA,GAAGuF,UAGlB6pB,IAASxB,aAAawB,IACtB/yB,KAASuxB,aAAavxB,KAEtBgzB,OAAQzB,aAAayB,QAAU,SAAWv1B,GAAI6O,MAE1C,OAAOgC,UAAWjX,KAAMoG,GAAI6O,KAAM,EAAGjV,KAAKmG,OAAQ,IAEtDy1B,YAAa1B,aAAa0B,aAAe,SAAWx1B,GAAI6O,MAEpD,OAAOgC,UAAWjX,KAAMoG,GAAI6O,KAAMjV,KAAKmG,OAAO,GAAI,GAAI,IAE1DyzB,QAASM,aAAaN,QAEtBe,SAAU,KACVkB,MAAS3B,aAAa2B,MACtBlvB,MAAO,WACH,OAAO,IAAIhN,KAAMK,KAAKq6B,QAASr6B,OAEnC2N,KAASusB,aAAavsB,KACtBxF,OAAS+xB,aAAa/xB,OACtBhH,QAAS,WAEL,OAAO+4B,aAAavtB,MAAMlK,KAAMzC,OAEpC87B,IAAK,WAED,OAAOv8B,EAAGS,OAEd+7B,SAAU,WAEN,OAAOx8B,EAAGS,OAEdmmB,OAAQ,WAEJ,OAAO,IAAIxmB,KAAMK,KAAKq6B,QAASjyB,QAAQpI,QAE3Cg8B,QAAS9B,aAAa8B,UAE1Br8B,KAAK2H,OAAS,SAAW20B,MAAOvP,IAAKnmB,KAGjC,GAAOA,IAAIJ,QAAYumB,MAAYA,eAAe/sB,MAAW+sB,IAAIwP,cAAjE,CAGA,IACIr1B,EAAGmL,IACHmqB,OACAC,cAAgB,SAAWH,MAAO71B,GAAIi2B,OAClC,OAAO,WACH,IAAInV,IAAM9gB,GAAGwO,MAAOqnB,MAAOxnB,WAG3B,OADA9U,KAAK2H,OAAQ4f,IAAKA,IAAKmV,MAAMC,WACtBpV,MAGnB,IAAMrgB,EAAE,EAAGmL,IAAIzL,IAAIJ,OAASU,EAAEmL,IAAMnL,IAGhC6lB,KAFAyP,OAAS51B,IAAIM,IAEF6G,MAA8B,mBAAfyuB,OAAO3tB,IAC7B4tB,cAAeH,MAAOE,OAAO3tB,IAAK2tB,QAClC58B,EAAEsB,cAAes7B,OAAO3tB,KACpB,GACA2tB,OAAO3tB,IACfke,IAAIyP,OAAOzuB,MAAMwuB,cAAe,EAEhCv8B,KAAK2H,OAAQ20B,MAAOvP,IAAIyP,OAAOzuB,MAAOyuB,OAAOI,WAGrD58B,KAAK68B,SAAW58B,cAAgB,SAAW8N,KAAMc,KAE7C,GAAKjP,EAAEqB,QAAS8M,MACZ,IAAM,IAAI+E,EAAE,EAAGsI,IAAIrN,KAAKvH,OAASsM,EAAEsI,IAAMtI,IACrC9S,KAAK68B,SAAU9uB,KAAK+E,GAAIjE,SAFhC,CAMA,IACI3H,EAAGmL,IAGHe,IAAK0pB,OAFLC,KAAOhvB,KAAKoS,MAAM,KAClBqc,OAASlC,YAET/tB,KAAO,SAAW1I,IAAKkK,MACvB,IAAM,IAAI7G,EAAE,EAAGmL,IAAIxO,IAAI2C,OAASU,EAAEmL,IAAMnL,IACpC,GAAKrD,IAAIqD,GAAG6G,OAASA,KACjB,OAAOlK,IAAIqD,GAGnB,OAAO,MAEX,IAAMA,EAAE,EAAGmL,IAAI0qB,KAAKv2B,OAASU,EAAEmL,IAAMnL,IAAM,CAKvC,IAAIrD,IAAM0I,KAAMiwB,OAHhBppB,KADA0pB,QAAoC,IAA3BC,KAAK71B,GAAGmM,QAAQ,OAErB0pB,KAAK71B,GAAGsK,QAAQ,KAAM,IACtBurB,KAAK71B,IAEFrD,MACHA,IAAM,CACFkK,KAAWqF,IACXvE,IAAW,GACX8tB,UAAW,GACXC,QAAW,IAEfJ,OAAOxzB,KAAMnF,MAEZqD,IAAMmL,IAAI,EACXxO,IAAIgL,IAAMA,IAGV2tB,OAASM,OACLj5B,IAAI84B,UACJ94B,IAAI+4B,WAIpB58B,KAAKg9B,eAAiB98B,oBAAsB,SAAW+8B,WAAYC,aAAcruB,KAC7E7O,KAAK68B,SAAUI,WAAYpuB,KAC3B7O,KAAK68B,SAAUK,cAAc,WACzB,IAAI3V,IAAM1Y,IAAIoG,MAAO5U,KAAMyU,WAC3B,OAAKyS,MAAQlnB,KAEFA,KAEDknB,eAAevnB,KAGdunB,IAAI/gB,OACP5G,EAAEqB,QAASsmB,IAAI,IACX,IAAIvnB,KAAMunB,IAAImT,QAASnT,IAAI,IAC3BA,IAAI,QACRlmB,EAGDkmB,QA0CftnB,cAAe,YAAY,SAAW+6B,UAElC,OAAOA,SACH,IAAIh7B,KAjCW,SAAWg7B,SAAUltB,GAGxC,GAAyB,iBAAbktB,SACR,MAAO,CAACltB,EAAEktB,WAGd,IAAI12B,MAAQ1E,EAAE8M,IAAKoB,GAAG,SAAUnB,IAC5B,OAAOA,GAAG7E,UAEd,OAAOlI,EAAE0E,OACJ2J,OAAQ+sB,UACRtuB,KAAK,WAEF,IAAIwL,IAAMtY,EAAE6M,QAASpM,KAAMiE,OAC3B,OAAOwJ,EAAEoK,QAEZ1W,UAgBS27B,CAAkBnC,SAAU36B,KAAKq6B,UAC3Cr6B,QAERJ,cAAe,WAAW,SAAW+6B,UACjC,IAAIF,OAASz6B,KAAKy6B,OAAQE,UACtBK,IAAMP,OAAOJ,QAEjB,OAAOW,IAAI70B,OACP,IAAIxG,KAAMq7B,IAAI,IACdP,UAER56B,oBAAqB,mBAAoB,kBAAmB,WACxD,OAAOG,KAAKi7B,SAAU,SAAS,SAAWD,KACtC,OAAOA,IAAIvzB,SACZ,MAEP5H,oBAAqB,kBAAmB,kBAAmB,WACvD,OAAOG,KAAKi7B,SAAU,SAAS,SAAWD,KACtC,OAAOA,IAAI5rB,SACZ,MAEPvP,oBAAqB,oBAAqB,oBAAqB,WAC3D,OAAOG,KAAKi7B,SAAU,SAAS,SAAWD,KACtC,OAAOA,IAAItzB,SACZ,MAEP7H,oBAAqB,oBAAqB,oBAAqB,WAC3D,OAAOG,KAAKi7B,SAAU,SAAS,SAAWD,KACtC,OAAOA,IAAIpzB,SACZ,MAEP/H,oBAAqB,wBAAyB,uBAAwB,WAClE,OAAOG,KAAKi7B,SAAU,SAAS,SAAWD,KACtC,OAAOA,IAAIjX,gBACZ,MAKPnkB,cAAe,UAAU,SAAWm9B,QAChC,OAAO/8B,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtB,SAAXu7B,OACD3b,QAAS5f,WAGc,iBAAXu7B,SACRA,OAAoB,cAAXA,QAIb9Z,UAAWzhB,UAAmB,IAATu7B,eAuBjCn9B,cAAe,UAAU,SAAWwvB,QAChC,YAAgBpuB,IAAXouB,OACMpvB,KAAK8E,KAAKk4B,OAAOl4B,KAGrB9E,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtC2tB,cAAe3tB,SAAU4tB,cAqBjCxvB,cAAe,eAAe,WAC1B,GAA6B,IAAxBI,KAAKq6B,QAAQl0B,OAAlB,CAGA,IACI3E,SAAaxB,KAAKq6B,QAAQ,GAC1BloB,MAAa3Q,SAASsJ,eACtB5E,IAAa1E,SAAS0H,UAAU0b,UAAYpjB,SAASymB,iBAAmB,EACxE+G,WAAaxtB,SAASogB,mBACtB6L,KAAsB,IAATvnB,IACjB,MAAO,CACHpB,KAAkB2oB,IAAM,EAAI/W,KAAK4Y,MAAOnd,MAAQjM,KAChD+oB,MAAkBxB,IAAM,EAAI/W,KAAKgX,KAAMsB,WAAa9oB,KACpDiM,MAAkBA,MAClBC,IAAkB5Q,SAASsgB,eAC3B3b,OAAkBD,IAClB2iB,aAAkBrnB,SAASihB,iBAC3Bwa,eAAkBjO,WAClBkO,WAAgD,QAA9BtuB,cAAepN,eAczC5B,cAAe,cAAc,SAAWsG,KAIpC,YAAalF,IAARkF,IAC8B,IAAxBlG,KAAKq6B,QAAQl0B,OAChBnG,KAAKq6B,QAAQ,GAAGpS,qBAChBjnB,EAGDhB,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtCusB,gBAAiBvsB,SAAU0E,WAGnC,IAAIi3B,SAAW,SAAW37B,SAAU0hB,aAAc5gB,UAE9C,GAAKA,SAAW,CACZ,IAAInC,IAAM,IAAIR,KAAM6B,UACpBrB,IAAIi9B,IAAK,QAAQ,WACb96B,SAAUnC,IAAIkL,KAAKI,WAG3B,GAAkC,OAA7BmD,cAAepN,UAChByhB,UAAWzhB,SAAU0hB,kBAEpB,CACDnB,qBAAsBvgB,UAAU,GAEhC,IAAIylB,IAAMzlB,SAASmlB,MACdM,KAA0B,IAAnBA,IAAIE,YACZF,IAAIoW,QAGR9W,aAAc/kB,SAAU,IAAI,SAAUiK,MAClCoS,cAAerc,UAEf,IADA,IAAIlB,KAAOsoB,eAAgBpnB,SAAUiK,MAC3B5E,EAAE,EAAGmL,IAAI1R,KAAK6F,OAASU,EAAEmL,IAAMnL,IACrC4I,WAAYjO,SAAUlB,KAAKuG,IAE/Boc,UAAWzhB,SAAU0hB,cACrBnB,qBAAsBvgB,UAAU,QAW5C5B,cAAe,eAAe,WAC1B,IAAIo7B,IAAMh7B,KAAKq6B,QACf,GAAKW,IAAI70B,OAAS,EACd,OAAO60B,IAAI,GAAGvvB,QAOtB7L,cAAe,iBAAiB,WAC5B,IAAIo7B,IAAMh7B,KAAKq6B,QACf,GAAKW,IAAI70B,OAAS,EACd,OAAO60B,IAAI,GAAG5T,aAatBxnB,cAAe,iBAAiB,SAAW0C,SAAUg7B,aACjD,OAAOt9B,KAAKi7B,SAAU,SAAS,SAAUz5B,UACrC27B,SAAU37B,UAAwB,IAAd87B,YAAqBh7B,gBAejD1C,cAAe,cAAc,SAAW2L,KACpC,IAAIyvB,IAAMh7B,KAAKq6B,QACf,QAAar5B,IAARuK,IAAoB,CAErB,GAAoB,IAAfyvB,IAAI70B,OACL,OAGJ,OADA60B,IAAMA,IAAI,IACC3vB,KACP9L,EAAEsB,cAAem6B,IAAI3vB,MACjB2vB,IAAI3vB,KAAKE,IACTyvB,IAAI3vB,KACR2vB,IAAI1T,YAGZ,OAAOtnB,KAAKi7B,SAAU,SAAS,SAAWz5B,UACjCjC,EAAEsB,cAAeW,SAAS6J,MAC3B7J,SAAS6J,KAAKE,IAAMA,IAGpB/J,SAAS6J,KAAOE,UAgB5B3L,cAAe,qBAAqB,SAAW0C,SAAUg7B,aAGrD,OAAOt9B,KAAKi7B,SAAU,SAAS,SAAWD,KACtCmC,SAAUnC,KAAmB,IAAdsC,YAAqBh7B,gBAG5C,IAAIi7B,cAAgB,SAAW75B,KAAMi3B,SAAU6C,SAAUh8B,SAAUo5B,MAE/D,IACc6C,IACVhwB,EAAG5G,EAAGmL,IAAKS,EAAGsI,IADdhJ,IAAM,GAEN2rB,oBAAsB/C,SAM1B,IAHOA,UAA6B,WAAjB+C,cAA8C,aAAjBA,mBAAmD18B,IAApB25B,SAASx0B,SACpFw0B,SAAW,CAAEA,WAEX9zB,EAAE,EAAGmL,IAAI2oB,SAASx0B,OAASU,EAAEmL,IAAMnL,IAKrC,IAAM4L,EAAE,EAAGsI,KAHXtN,EAAIktB,SAAS9zB,IAAM8zB,SAAS9zB,GAAGiZ,QAAW6a,SAAS9zB,GAAGgM,MAAM,WACxD8nB,SAAS9zB,GAAGiZ,MAAM,KAClB,CAAE6a,SAAS9zB,KACEV,OAASsM,EAAEsI,IAAMtI,KAC9BgrB,IAAMD,SAA0B,iBAAT/vB,EAAEgF,GAAkBlT,EAAE0f,KAAKxR,EAAEgF,IAAMhF,EAAEgF,MAChDgrB,IAAIt3B,SACZ4L,IAAMA,IAAIiO,OAAQyd,MAK9B,IAAIl3B,IAAM7G,KAAKi7B,SAASj3B,MACxB,GAAK6C,IAAIJ,OACL,IAAMU,EAAE,EAAGmL,IAAIzL,IAAIJ,OAASU,EAAEmL,IAAMnL,IAChCkL,IAAMxL,IAAIM,GAAIrF,SAAUo5B,KAAM7oB,KAGtC,OAAO3J,QAAS2J,MAEhB4rB,eAAiB,SAAW/C,MAU5B,OAROA,OACHA,KAAO,IAINA,KAAKhtB,aAA0B5M,IAAhB45B,KAAKv3B,SACrBu3B,KAAKv3B,OAASu3B,KAAKhtB,QAEhBrO,EAAE+H,OAAQ,CACbjE,OAAQ,OACRiC,MAAO,UACPR,KAAM,OACP81B,OAEHgD,gBAAkB,SAAWC,MAG7B,IAAM,IAAIh3B,EAAE,EAAGmL,IAAI6rB,KAAK13B,OAASU,EAAEmL,IAAMnL,IACrC,GAAKg3B,KAAKh3B,GAAGV,OAAS,EAOlB,OAJA03B,KAAK,GAAKA,KAAKh3B,GACfg3B,KAAK,GAAG13B,OAAS,EACjB03B,KAAK13B,OAAS,EACd03B,KAAKxD,QAAU,CAAEwD,KAAKxD,QAAQxzB,IACvBg3B,KAKf,OADAA,KAAK13B,OAAS,EACP03B,MAEPvC,sBAAwB,SAAW95B,SAAUo5B,MAE7C,IACI/zB,EAAGmL,IAAK/G,IAAKwC,EAAE,GACfqwB,gBAAkBt8B,SAASmO,UAC3Bgc,cAAgBnqB,SAASoO,gBAEzBvM,OAASu3B,KAAKv3B,OACdiC,MAASs1B,KAAKt1B,MACdR,KAAS81B,KAAK91B,KAClB,GAAkC,OAA7B8J,cAAepN,UAKhB,MAAkB,YAAX6B,OACH,GACA6O,OAAQ,EAAGyZ,cAAcxlB,QAE5B,GAAa,WAARrB,KAIN,IAAM+B,EAAErF,SAASsJ,eAAgBkH,IAAIxQ,SAASsgB,eAAiBjb,EAAEmL,IAAMnL,IACnE4G,EAAE9E,KAAMm1B,gBAAgBj3B,SAG3B,GAAc,WAATvB,OAA+B,WAATA,MAC5BmI,EAAc,QAAVpK,OACAsoB,cAAchf,QACJ,WAAVtJ,OACIy6B,gBAAgBnxB,QAChBpN,EAAE8M,IAAKsf,eAAe,SAAUrf,IAC5B,OAA6C,IAAtC/M,EAAE6M,QAASE,GAAIwxB,iBAA2BxxB,GAAK,aAGjE,GAAc,SAAThH,OAA6B,YAATA,MAC1B,IAAMuB,EAAE,EAAGmL,IAAIxQ,SAASe,OAAO4D,OAASU,EAAEmL,IAAMnL,KAC7B,QAAVxD,SAKa,KADd4H,IAAM1L,EAAE6M,QAASvF,EAAGi3B,mBACS,WAAVz6B,QACd4H,KAAO,GAAiB,WAAV5H,SALnBoK,EAAE9E,KAAM9B,GAYpB,OAAO4G,GA0FX7N,cAAe,UAAU,SAAW+6B,SAAUC,WAExB55B,IAAb25B,SACDA,SAAW,GAELp7B,EAAEsB,cAAe85B,YACvBC,KAAOD,SACPA,SAAW,IAEfC,KAAO+C,eAAgB/C,MACvB,IAAIiD,KAAO79B,KAAKi7B,SAAU,SAAS,SAAWz5B,UAC1C,OAzFa,SAAWA,SAAUm5B,SAAUC,MAEhD,IAAIv6B,KA0EJ,OAAOk9B,cAAe,MAAO5C,UAzEnB,SAAWoD,KACjB,IAAIC,OAASttB,QAASqtB,KAItB,GAAgB,OAAXC,SAAqBpD,KACtB,MAAO,CAAEoD,QAKb,GAHO39B,OACHA,KAAOi7B,sBAAuB95B,SAAUo5B,OAE5B,OAAXoD,SAAkD,IAA/Bz+B,EAAE6M,QAAS4xB,OAAQ39B,MAEvC,MAAO,CAAE29B,QAER,GAAKD,WAA6C,KAARA,IAE3C,OAAO19B,KAGX,GAAoB,mBAAR09B,IACR,OAAOx+B,EAAE8M,IAAKhM,MAAM,SAAUwX,KAC1B,IAAI9W,IAAMS,SAASe,OAAOsV,KAC1B,OAAOkmB,IAAKlmB,IAAK9W,IAAIkb,OAAQlb,IAAIkB,KAAQ4V,IAAM,QAIvD,IAAI5T,MAAQoO,aACRJ,aAAczQ,SAASe,OAAQlC,KAAM,QAGzC,GAAK09B,IAAIp6B,SAAW,CAChB,QAA0B3C,IAArB+8B,IAAIze,aACL,MAAO,CAAEye,IAAIze,cAEZ,GAAKye,IAAIve,cACV,MAAO,CAAEue,IAAIve,cAAcze,KAG3B,IAAIi5B,KAAOz6B,EAAEw+B,KAAKE,QAAQ,kBAC1B,OAAOjE,KAAK7zB,OACR,CAAE6zB,KAAK15B,KAAK,WACZ,GAYZ,GAAoB,iBAARy9B,KAAsC,MAAlBA,IAAI1qB,OAAO,GAAa,CAEpD,IAAI6qB,OAAS18B,SAAS0a,KAAK6hB,IAAI5sB,QAAS,KAAM,KAC9C,QAAgBnQ,IAAXk9B,OACD,MAAO,CAAEA,OAAOrmB,KAQxB,OAAOtY,EAAE0E,OACJ2J,OAAQmwB,KACR1xB,KAAK,WACF,OAAOrM,KAAKsf,gBAEfne,YAEmCK,SAAUo5B,MAa3CuD,CAAgB38B,SAAUm5B,SAAUC,QAC5C,GAIH,OAFAiD,KAAKlD,SAASt6B,KAAOs6B,SACrBkD,KAAKlD,SAASC,KAAOA,KACdiD,QAEXj+B,cAAe,kBAAkB,WAC7B,OAAOI,KAAKi7B,SAAU,OAAO,SAAWz5B,SAAUT,KAC9C,OAAOS,SAASe,OAAOxB,KAAKkB,UAAOjB,IACpC,MAEPpB,cAAe,iBAAiB,WAC5B,OAAOI,KAAKi7B,UAAU,EAAM,QAAQ,SAAWz5B,SAAUnB,MACrD,OAAO4R,aAAczQ,SAASe,OAAQlC,KAAM,YAC7C,MAEPR,oBAAqB,iBAAkB,iBAAiB,SAAW6D,MAC/D,OAAO1D,KAAKi7B,SAAU,OAAO,SAAWz5B,SAAUT,KAC9C,IAAIyuB,EAAIhuB,SAASe,OAAOxB,KACxB,MAAgB,WAAT2C,KAAoB8rB,EAAEhR,aAAegR,EAAEjR,aAC/C,MAEP1e,oBAAqB,sBAAuB,sBAAsB,SAAW2D,KACzE,OAAOxD,KAAKi7B,SAAU,OAAO,SAAWz5B,SAAUT,KAC9Ckd,cAAezc,SAAUT,IAAKyC,WAGtC3D,oBAAqB,mBAAoB,iBAAiB,WACtD,OAAOG,KAAKi7B,SAAU,OAAO,SAAWz5B,SAAUT,KAC9C,OAAOA,MACR,MAEPlB,oBAAqB,eAAgB,cAAc,SAAWu+B,MAI1D,IAHA,IAAI3wB,EAAI,GACJ4sB,QAAUr6B,KAAKq6B,QAETxzB,EAAE,EAAGmL,IAAIqoB,QAAQl0B,OAASU,EAAEmL,IAAMnL,IACxC,IAAM,IAAI4L,EAAE,EAAGsI,IAAI/a,KAAK6G,GAAGV,OAASsM,EAAEsI,IAAMtI,IAAM,CAC9C,IAAIvK,GAAKmyB,QAAQxzB,GAAGkD,QAASswB,QAAQxzB,GAAGtE,OAAOvC,KAAK6G,GAAG4L,IAAIwJ,QAC3DxO,EAAE9E,OAAgB,IAATy1B,KAAgB,IAAM,IAAMl2B,IAG7C,OAAO,IAAIvI,KAAM06B,QAAS5sB,MAE9B5N,oBAAqB,kBAAmB,kBAAkB,WACtD,IAAIwU,KAAOrU,KAuCX,OAtCAA,KAAKi7B,SAAU,OAAO,SAAWz5B,SAAUT,IAAKs9B,SAC5C,IAEIx3B,EAAGmL,IAAKS,EAAGsI,IACXujB,QAASC,UAHTj+B,KAAOkB,SAASe,OAChBuW,QAAUxY,KAAKS,KAKnB,IAFAT,KAAK6H,OAAQpH,IAAK,GAEZ8F,EAAE,EAAGmL,IAAI1R,KAAK6F,OAASU,EAAEmL,IAAMnL,IAQjC,GANA03B,WADAD,QAAUh+B,KAAKuG,IACKyX,QAEC,OAAhBggB,QAAQr8B,MACTq8B,QAAQr8B,IAAIqd,aAAezY,GAGZ,OAAd03B,UACD,IAAM9rB,EAAE,EAAGsI,IAAIwjB,UAAUp4B,OAASsM,EAAEsI,IAAMtI,IACtC8rB,UAAU9rB,GAAG+M,cAAcze,IAAM8F,EAK7CiX,eAAgBtc,SAASoO,gBAAiB7O,KAC1C+c,eAAgBtc,SAASmO,UAAW5O,KACpC+c,eAAgBzJ,KAAKgqB,SAAUt9B,KAAK,GAEpCitB,kBAAmBxsB,UAEnB,IAAI0G,GAAK1G,SAASuI,QAAS+O,QAAQmD,aACvBjb,IAAPkH,WACM1G,SAAS0a,KAAKhU,OAG7BlI,KAAKi7B,SAAU,SAAS,SAAWz5B,UAC/B,IAAM,IAAIqF,EAAE,EAAGmL,IAAIxQ,SAASe,OAAO4D,OAASU,EAAEmL,IAAMnL,IAChDrF,SAASe,OAAOsE,GAAGgR,IAAMhR,KAG1B7G,QAEXJ,cAAe,cAAc,SAAWS,MACpC,IAAIm+B,QAAUx+B,KAAKi7B,SAAU,SAAS,SAAWz5B,UACzC,IAAIT,IAAK8F,EAAGmL,IACRD,IAAM,GACV,IAAMlL,EAAE,EAAGmL,IAAI3R,KAAK8F,OAASU,EAAEmL,IAAMnL,KACjC9F,IAAMV,KAAKwG,IACFlD,UAA2C,OAA/B5C,IAAI4C,SAASQ,cAC9B4N,IAAIpJ,KAAM+G,SAAUlO,SAAUT,KAAM,IAGpCgR,IAAIpJ,KAAM8G,WAAYjO,SAAUT,MAGxC,OAAOgR,MACR,GAEH0sB,QAAUz+B,KAAKK,MAAO,GAG1B,OAFAo+B,QAAQ/C,MACRn8B,EAAE0rB,MAAOwT,QAASD,SACXC,WAKX7+B,cAAe,SAAS,SAAW+6B,SAAUC,MACzC,OAAOgD,gBAAiB59B,KAAKK,KAAMs6B,SAAUC,UAEjDh7B,cAAe,gBAAgB,SAAWU,MACtC,IAAI06B,IAAMh7B,KAAKq6B,QACf,YAAcr5B,IAATV,KAEM06B,IAAI70B,QAAUnG,KAAKmG,OACtB60B,IAAI,GAAGz4B,OAAOvC,KAAK,IAAIic,YACvBjb,GAGRg6B,IAAI,GAAGz4B,OAAOvC,KAAK,IAAIic,OAAS3b,KAEhC2d,cAAe+c,IAAI,GAAIh7B,KAAK,GAAI,QACzBA,SAEXJ,cAAe,gBAAgB,WAC3B,IAAIo7B,IAAMh7B,KAAKq6B,QACf,OAAOW,IAAI70B,QAAUnG,KAAKmG,QACtB60B,IAAI,GAAGz4B,OAAOvC,KAAK,IAAIiC,KACvB,QAERrC,cAAe,aAAa,SAAWmB,KAG9BA,eAAexB,GAAKwB,IAAIoF,SACzBpF,IAAMA,IAAI,IAEd,IAAIV,KAAOL,KAAKi7B,SAAU,SAAS,SAAWz5B,UAC1C,OAAKT,IAAI4C,UAA2C,OAA/B5C,IAAI4C,SAASQ,cACvBuL,SAAUlO,SAAUT,KAAM,GAE9B0O,WAAYjO,SAAUT,QAGjC,OAAOf,KAAKe,IAAKV,KAAK,OAE1B,IAoCIq+B,iBAAmB,SAAWv+B,IAAK0X,KAEnC,IAAImjB,IAAM76B,IAAIk6B,QACd,GAAKW,IAAI70B,OAAS,CACd,IAAIpF,IAAMi6B,IAAI,GAAGz4B,YAAevB,IAAR6W,IAAoBA,IAAM1X,IAAI,IACjDY,KAAOA,IAAI49B,WACZ59B,IAAI49B,SAASn8B,SACbzB,IAAI69B,kBAAe59B,EACnBD,IAAI49B,cAAW39B,KAIvB69B,kBAAoB,SAAW1+B,IAAKwE,MACpC,IAAIq2B,IAAM76B,IAAIk6B,QACd,GAAKW,IAAI70B,QAAUhG,IAAIgG,OAAS,CAC5B,IAAIpF,IAAMi6B,IAAI,GAAGz4B,OAAOpC,IAAI,IACvBY,IAAI49B,WACL59B,IAAI69B,aAAej6B,KACdA,KACD5D,IAAI49B,SAASG,YAAa/9B,IAAIkB,KAG9BlB,IAAI49B,SAAS5b,SAEjBgc,iBAAkB/D,IAAI,OAI9B+D,iBAAmB,SAAWv9B,UAE9B,IAAIrB,IAAM,IAAIR,KAAM6B,UAKhBlB,KAAOkB,SAASe,OACpBpC,IAAI6+B,IAAKC,4EACJrtB,OAAQtR,KAAM,YAAa6F,OAAS,IAErChG,IAAI2pB,GAPQ,sBAOO,SAAWE,EAAGgR,KACxBx5B,WAAaw5B,KAGlB76B,IAAIE,KAAM,CAACyE,KAAK,YAAaqH,GAAG,GAAG1F,MAAM,SAAUoR,KAE/C,IAAI9W,IAAMT,KAAKuX,KACV9W,IAAI69B,cACL79B,IAAI49B,SAASG,YAAa/9B,IAAIkB,WAK1C9B,IAAI2pB,GAnBU,mCAmBO,SAAWE,EAAGgR,KAC/B,GAAKx5B,WAAaw5B,IAMlB,IADA,IAAIj6B,IAAKmE,QAAUwV,iBAAkBsgB,KAC3Bn0B,EAAE,EAAGmL,IAAI1R,KAAK6F,OAASU,EAAEmL,IAAMnL,KACrC9F,IAAMT,KAAKuG,IACF83B,UACL59B,IAAI49B,SAAS1yB,SAAS,eAAeiM,KAAK,UAAWhT,YAKjE/E,IAAI2pB,GAjCW,yBAiCO,SAAWE,EAAGgR,KAChC,GAAKx5B,WAAaw5B,IAGlB,IAAM,IAAIn0B,EAAE,EAAGmL,IAAI1R,KAAK6F,OAASU,EAAEmL,IAAMnL,IAChCvG,KAAKuG,GAAG83B,UACTD,iBAAkBv+B,IAAK0G,QAc3CjH,cALiBs/B,iBAKU,SAAW5+B,KAAM6+B,OACxC,IAAInE,IAAMh7B,KAAKq6B,QACf,YAAcr5B,IAATV,KAEM06B,IAAI70B,QAAUnG,KAAKmG,OACtB60B,IAAI,GAAGz4B,OAAOvC,KAAK,IAAI2+B,cACvB39B,IAEW,IAATV,KAENN,KAAKkC,MAAMyC,QAEI,IAATrE,KAENo+B,iBAAkB1+B,MAEZg7B,IAAI70B,QAAUnG,KAAKmG,QA3Ib,SAAW60B,IAAKj6B,IAAKT,KAAM6+B,OAG3C,IAAI9+B,KAAO,GACP++B,OAAS,SAAW5P,EAAG9c,GAEvB,GAAKnT,EAAEqB,QAAS4uB,IAAOA,aAAajwB,EAChC,IAAM,IAAIsH,EAAE,EAAGmL,IAAIwd,EAAErpB,OAASU,EAAEmL,IAAMnL,IAClCu4B,OAAQ5P,EAAE3oB,GAAI6L,QAMtB,GAAK8c,EAAE7rB,UAAyC,OAA7B6rB,EAAE7rB,SAASC,cAC1BvD,KAAKsI,KAAM6mB,OAEV,CAED,IAAI6P,QAAU9/B,EAAE,kBAAkBmL,SAAUgI,GAC5CnT,EAAE,KAAM8/B,SACH30B,SAAUgI,GACVjB,KAAM+d,GAAI,GAAG5M,QAAUlI,iBAAkBsgB,KAC9C36B,KAAKsI,KAAM02B,QAAQ,MAG3BD,OAAQ9+B,KAAM6+B,OACTp+B,IAAI49B,UACL59B,IAAI49B,SAAS5b,SAEjBhiB,IAAI49B,SAAWp/B,EAAEc,MAEZU,IAAI69B,cACL79B,IAAI49B,SAASG,YAAa/9B,IAAIkB,KA4G9Bq9B,CAAetE,IAAI,GAAIA,IAAI,GAAGz4B,OAAOvC,KAAK,IAAKM,KAAM6+B,OAElDn/B,SAEXJ,cAAe,CACXs/B,qBACAK,yBACD,WAEC,OADAV,kBAAmB7+B,MAAM,GAClBA,QAEXJ,cAAe,CACXs/B,qBACAK,yBACD,WAEC,OADAV,kBAAmB7+B,MAAM,GAClBA,QAEXJ,cAAe,CACXs/B,uBACAK,2BACD,WAEC,OADAb,iBAAkB1+B,MACXA,QAEXJ,cAAes/B,yBAAyB,WACpC,IAAIlE,IAAMh7B,KAAKq6B,QACf,OAAKW,IAAI70B,QAAUnG,KAAKmG,QAEb60B,IAAI,GAAGz4B,OAAOvC,KAAK,IAAI4+B,eAE3B,KAcX,IA+iKIY,cACAC,UACAC,cAjjKAC,qBAAuB,kCAGvBC,aAAe,SAAWp+B,SAAU8B,OAAQu8B,GAAIC,GAAIz/B,MAEpD,IADA,IAAIoN,EAAI,GACE1M,IAAI,EAAGiR,IAAI3R,KAAK8F,OAASpF,IAAIiR,IAAMjR,MACzC0M,EAAE9E,KAAM0S,eAAgB7Z,SAAUnB,KAAKU,KAAMuC,SAEjD,OAAOmK,GAyHX7N,cAAe,aAAa,SAAW+6B,SAAUC,WAE3B55B,IAAb25B,SACDA,SAAW,GAELp7B,EAAEsB,cAAe85B,YACvBC,KAAOD,SACPA,SAAW,IAEfC,KAAO+C,eAAgB/C,MACvB,IAAIiD,KAAO79B,KAAKi7B,SAAU,SAAS,SAAWz5B,UAC1C,OAlIgB,SAAWA,SAAUm5B,SAAUC,MAEnD,IACIt5B,QAAUE,SAAS2L,UACnB4yB,MAAQnuB,OAAQtQ,QAAS,SACzB2C,MAAQ2N,OAAQtQ,QAAS,OA0E7B,OAAOi8B,cAAe,SAAU5C,UAzEtB,SAAWnzB,GACjB,IAAIw2B,OAASttB,QAASlJ,GAEtB,GAAW,KAANA,EACD,OAAO0K,OAAQ5Q,QAAQ6E,QAG3B,GAAgB,OAAX63B,OACD,MAAO,CAAEA,QAAU,EACfA,OACA18B,QAAQ6E,OAAS63B,QAIzB,GAAkB,mBAANx2B,EAAmB,CAC3B,IAAInH,KAAOi7B,sBAAuB95B,SAAUo5B,MAC5C,OAAOr7B,EAAE8M,IAAK/K,SAAS,SAAUmC,IAAKoU,KAClC,OAAOrQ,EACCqQ,IACA+nB,aAAcp+B,SAAUqW,IAAK,EAAG,EAAGxX,MACnC4D,MAAM4T,MACNA,IAAM,QAItB,IAAIhF,MAAqB,iBAANrL,EACfA,EAAEqL,MAAO8sB,sBACT,GACJ,GAAK9sB,MACD,OAAQA,MAAM,IACV,IAAK,SACL,IAAK,UACD,IAAIgF,IAAMjH,SAAUiC,MAAM,GAAI,IAE9B,GAAKgF,IAAM,EAAI,CAEX,IAAImoB,WAAazgC,EAAE8M,IAAK/K,SAAS,SAAUmC,IAAIoD,GAC3C,OAAOpD,IAAImX,SAAW/T,EAAI,QAE9B,MAAO,CAACm5B,WAAWA,WAAW75B,OAAS0R,MAG3C,MAAO,CAAEuC,wBAAyB5Y,SAAUqW,MAChD,IAAK,OAED,OAAOtY,EAAE8M,IAAK0zB,OAAO,SAAUryB,KAAM7G,GACjC,OAAO6G,OAASmF,MAAM,GAAKhM,EAAI,QAEvC,QACI,MAAO,GAInB,GAAKW,EAAE7D,UAAY6D,EAAEgY,cACjB,MAAO,CAAEhY,EAAEgY,cAAclc,QAG7B,IAAI28B,SAAW1gC,EAAG0E,OACb2J,OAAQpG,GACR6E,KAAK,WACF,OAAO9M,EAAE6M,QAASpM,KAAMiE,UAE3B9C,UACL,GAAK8+B,SAAS95B,SAAYqB,EAAE7D,SACxB,OAAOs8B,SAIX,IAAIjG,KAAOz6B,EAAEiI,GAAGy2B,QAAQ,qBACxB,OAAOjE,KAAK7zB,OACR,CAAE6zB,KAAK15B,KAAK,cACZ,KAEuCkB,SAAUo5B,MAmD9CsF,CAAmB1+B,SAAUm5B,SAAUC,QAC/C,GAIH,OAFAiD,KAAKlD,SAASlc,KAAOkc,SACrBkD,KAAKlD,SAASC,KAAOA,KACdiD,QAEXh+B,oBAAqB,qBAAsB,qBAAqB,WAC5D,OAAOG,KAAKi7B,SAAU,UAAU,SAAWz5B,SAAU8B,QACjD,OAAO9B,SAAS2L,UAAU7J,QAAQgU,MACnC,MAEPzX,oBAAqB,qBAAsB,qBAAqB,WAC5D,OAAOG,KAAKi7B,SAAU,UAAU,SAAWz5B,SAAU8B,QACjD,OAAO9B,SAAS2L,UAAU7J,QAAQod,MACnC,MAEP7gB,oBAAqB,mBAAoB,mBAAmB,WACxD,OAAOG,KAAKi7B,SAAU,cAAe2E,aAAc,MAEvD//B,oBAAqB,sBAAuB,sBAAsB,WAC9D,OAAOG,KAAKi7B,SAAU,UAAU,SAAWz5B,SAAU8B,QACjD,OAAO9B,SAAS2L,UAAU7J,QAAQsC,QACnC,MAEP/F,oBAAqB,oBAAqB,oBAAoB,SAAW6D,MACrE,OAAO1D,KAAKi7B,SAAU,eAAe,SAAWz5B,SAAU8B,OAAQuD,EAAG4L,EAAGpS,MACpE,OAAO4R,aAAczQ,SAASe,OAAQlC,KACzB,WAATqD,KAAoB,eAAiB,aAAcJ,UAExD,MAEPzD,oBAAqB,oBAAqB,oBAAoB,WAC1D,OAAOG,KAAKi7B,SAAU,eAAe,SAAWz5B,SAAU8B,OAAQuD,EAAG4L,EAAGpS,MACpE,OAAO4R,aAAczQ,SAASe,OAAQlC,KAAM,UAAWiD,UACxD,MAEPzD,oBAAqB,sBAAuB,sBAAsB,SAAW8a,IAAKwlB,MAC9E,IAAIjZ,IAAMlnB,KAAKi7B,SAAU,UAAU,SAAWz5B,SAAU8B,QACpD,QAAatC,IAAR2Z,IACD,OAAOnZ,SAAS2L,UAAU7J,QAAQsX,UAzFzB,SAAWpZ,SAAU8B,OAAQqX,KAC9C,IAII2B,MAAOzV,EAAGmL,IAAK4N,GAHfnB,KAAOjd,SAAS2L,UAChB1J,IAAOgb,KAAKnb,QACZhD,KAAOkB,SAASe,OAGpB,QAAavB,IAAR2Z,IACD,OAAOlX,IAAImX,SAIf,GAAKnX,IAAImX,WAAaD,IAAtB,CAGA,GAAKA,IAAM,CAGP,IAAIgJ,aAAepkB,EAAE6M,SAAS,EAAMwF,OAAO6M,KAAM,YAAanb,OAAO,GACrE,IAAMuD,EAAE,EAAGmL,IAAI1R,KAAK6F,OAASU,EAAEmL,IAAMnL,IACjC+Y,GAAKtf,KAAKuG,GAAG5E,IACbqa,MAAQhc,KAAKuG,GAAGyX,QACXsB,IAEDA,GAAG+D,aAAcrH,MAAMhZ,QAASgZ,MAAMqH,eAAiB,WAM/DpkB,EAAGqS,OAAQpQ,SAASe,OAAQ,UAAWe,SAAWyf,SAGtDtf,IAAImX,SAAWD,IACfgG,YAAanf,SAAUA,SAASyL,UAChC0T,YAAanf,SAAUA,SAAS+N,UAChCQ,aAAcvO,WAuDV4+B,CAAgB5+B,SAAU8B,OAAQqX,QAYtC,YATa3Z,IAAR2Z,MAED3a,KAAKi7B,SAAU,UAAU,SAAWz5B,SAAU8B,QAC1CoL,gBAAiBlN,SAAU,KAAM,oBAAqB,CAACA,SAAU8B,OAAQqX,IAAKwlB,gBAEpEn/B,IAATm/B,MAAsBA,OACvBngC,KAAKsB,QAAQC,UAGd2lB,OAEXrnB,oBAAqB,sBAAuB,oBAAoB,SAAW6D,MACvE,OAAO1D,KAAKi7B,SAAU,UAAU,SAAWz5B,SAAU8B,QACjD,MAAgB,YAATI,KACH8W,wBAAyBhZ,SAAU8B,QACnCA,SACL,MAEP1D,cAAe,oBAAoB,WAC/B,OAAOI,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtCwY,sBAAuBxY,YACxB,MAEP5B,cAAe,kBAAkB,SAAW8D,KAAMmU,KAC9C,GAA6B,IAAxB7X,KAAKq6B,QAAQl0B,OAAe,CAC7B,IAAI60B,IAAMh7B,KAAKq6B,QAAQ,GACvB,GAAc,gBAAT32B,MAAmC,WAATA,KAC3B,OAAO0W,wBAAyB4gB,IAAKnjB,KAEpC,GAAc,aAATnU,MAAgC,cAATA,KAC7B,OAAO8W,wBAAyBwgB,IAAKnjB,SAIjDjY,cAAe,YAAY,SAAW+6B,SAAUC,MAC5C,OAAOgD,gBAAiB59B,KAAKsB,QAASq5B,SAAUC,UAoEpDh7B,cAAe,WAAW,SAAWygC,YAAaC,eAAgB1F,MAoB9D,GAlBKr7B,EAAEsB,cAAew/B,oBAEOr/B,IAApBq/B,YAAYt/B,KAEb65B,KAAOyF,YACPA,YAAc,OAIdzF,KAAO0F,eACPA,eAAiB,OAGpB/gC,EAAEsB,cAAey/B,kBAClB1F,KAAO0F,eACPA,eAAiB,MAGhBA,qBACD,OAAOtgC,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtC,OAxFU,SAAWA,SAAUm5B,SAAUC,MAEjD,IAII75B,IAEA0M,EAAG5G,EAAGmL,IAAKS,EAAGG,EAAGonB,KANjB15B,KAAOkB,SAASe,OAChBlC,KAAOi7B,sBAAuB95B,SAAUo5B,MACxCte,MAAQjK,aAAcJ,aAAc3R,KAAMD,KAAM,YAChDkgC,SAAWhhC,EAAG,GAAGygB,OAAOpL,MAAM,GAAI0H,QAElChb,QAAUE,SAAS2L,UAAUhH,OAyDjC,OAAOo3B,cAAe,OAAQ5C,UAvDpB,SAAWnzB,GACjB,IAAIg5B,WAA0B,mBAANh5B,EACxB,GAAKA,SAAiCg5B,WAAa,CAG/C,IADA/yB,EAAI,GACE5G,EAAE,EAAGmL,IAAI3R,KAAK8F,OAASU,EAAEmL,IAAMnL,IAEjC,IADA9F,IAAMV,KAAKwG,GACL4L,EAAE,EAAIA,EAAEnR,QAAUmR,IACpBG,EAAI,CACA7R,IAAKA,IACLuC,OAAQmP,GAEP+tB,YAEDxG,KAAO15B,KAAKS,KACPyG,EAAGoL,EAAGyI,eAAe7Z,SAAUT,IAAK0R,GAAIunB,KAAK1b,QAAU0b,KAAK1b,QAAQ7L,GAAK,OAC1EhF,EAAE9E,KAAMiK,IAKZnF,EAAE9E,KAAMiK,GAIpB,OAAOnF,EAGX,GAAKlO,EAAEsB,cAAe2G,GAClB,MAAO,CAACA,GAGZ,IAAIy4B,SAAWM,SACV3yB,OAAQpG,GACR6E,KAAK,SAAUxF,EAAGyF,IACf,MAAO,CACHvL,IAAQuL,GAAGkT,cAAcze,IACzBuC,OAAQgJ,GAAGkT,cAAclc,WAGhCnC,UACL,OAAK8+B,SAAS95B,SAAYqB,EAAE7D,SACjBs8B,UAKXjG,KAAOz6B,EAAEiI,GAAGy2B,QAAQ,mBACR93B,OACR,CAAE,CACEpF,IAAKi5B,KAAK15B,KAAK,UACfgD,OAAQ02B,KAAK15B,KAAK,eAEtB,KAEqCkB,SAAUo5B,MAwBxC6F,CAAiBj/B,SAAU6+B,YAAa1C,eAAgB/C,UAIvE,IAEIntB,EAAG5G,EAAGmL,IAAKS,EAAGsI,IAFdzZ,QAAUtB,KAAKsB,QAASg/B,eAAgB1F,MACxCv6B,KAAOL,KAAKK,KAAMggC,YAAazF,MAE/Bte,MAAQtc,KAAKi7B,SAAU,SAAS,SAAWz5B,SAAUqW,KAErD,IADApK,EAAI,GACE5G,EAAE,EAAGmL,IAAI3R,KAAKwX,KAAK1R,OAASU,EAAEmL,IAAMnL,IACtC,IAAM4L,EAAE,EAAGsI,IAAIzZ,QAAQuW,KAAK1R,OAASsM,EAAEsI,IAAMtI,IACzChF,EAAE9E,KAAM,CACJ5H,IAAQV,KAAKwX,KAAKhR,GAClBvD,OAAQhC,QAAQuW,KAAKpF,KAIjC,OAAOhF,IACR,GAMH,OALAlO,EAAE+H,OAAQgV,MAAMqe,SAAU,CACtBlc,KAAM6hB,eACNjgC,KAAMggC,YACNzF,KAAMA,OAEHte,SAEXzc,oBAAqB,kBAAmB,iBAAiB,WACrD,OAAOG,KAAKi7B,SAAU,QAAQ,SAAWz5B,SAAUT,IAAKuC,QACpD,IAAIhD,KAAOkB,SAASe,OAAOxB,KAC3B,OAAOT,MAAQA,KAAKge,QAChBhe,KAAKge,QAAQhb,aACbtC,IACL,MAEPpB,cAAe,kBAAkB,WAC7B,OAAOI,KAAKi7B,SAAU,QAAQ,SAAWz5B,SAAUT,IAAKuC,QACpD,OAAO+X,eAAgB7Z,SAAUT,IAAKuC,UACvC,MAEPzD,oBAAqB,kBAAmB,kBAAkB,SAAW6D,MAEjE,OADAA,KAAgB,WAATA,KAAoB,eAAiB,aACrC1D,KAAKi7B,SAAU,QAAQ,SAAWz5B,SAAUT,IAAKuC,QACpD,OAAO9B,SAASe,OAAOxB,KAAK2C,MAAMJ,UACnC,MAEPzD,oBAAqB,mBAAoB,mBAAmB,SAAW6D,MACnE,OAAO1D,KAAKi7B,SAAU,QAAQ,SAAWz5B,SAAUT,IAAKuC,QACpD,OAAO+X,eAAgB7Z,SAAUT,IAAKuC,OAAQI,QAC/C,MAEP7D,oBAAqB,oBAAqB,kBAAkB,WACxD,OAAOG,KAAKi7B,SAAU,QAAQ,SAAWz5B,SAAUT,IAAKuC,QACpD,MAAO,CACHvC,IAAKA,IACLuC,OAAQA,OACRe,cAAemW,wBAAyBhZ,SAAU8B,WAEvD,MAEPzD,oBAAqB,uBAAwB,uBAAuB,SAAW2D,KAC3E,OAAOxD,KAAKi7B,SAAU,QAAQ,SAAWz5B,SAAUT,IAAKuC,QACpD2a,cAAezc,SAAUT,IAAKyC,IAAKF,cAG3C1D,cAAe,UAAU,SAAWygC,YAAaC,eAAgB1F,MAC7D,OAAOgD,gBAAiB59B,KAAKsc,MAAO+jB,YAAaC,eAAgB1F,UAErEh7B,cAAe,iBAAiB,SAAWU,MACvC,IAAI06B,IAAMh7B,KAAKq6B,QACXx2B,KAAO7D,KAAK,GAChB,YAAcgB,IAATV,KAEM06B,IAAI70B,QAAUtC,KAAKsC,OACtBkV,eAAgB2f,IAAI,GAAIn3B,KAAK,GAAG9C,IAAK8C,KAAK,GAAGP,aAC7CtC,GAGR8b,eAAgBke,IAAI,GAAIn3B,KAAK,GAAG9C,IAAK8C,KAAK,GAAGP,OAAQhD,MACrD2d,cAAe+c,IAAI,GAAIn3B,KAAK,GAAG9C,IAAK,OAAQ8C,KAAK,GAAGP,QAC7CtD,SA0BXJ,cAAe,WAAW,SAAW0F,MAAOmJ,KACxC,IAAIusB,IAAMh7B,KAAKq6B,QACf,YAAer5B,IAAVsE,MAEqB,IAAf01B,IAAI70B,OACP60B,IAAI,GAAGjtB,eACP/M,GAGc,iBAAVsE,MAERA,MAAQ,CAAE,CAAEA,MAAOmJ,MAEbnJ,MAAMa,SAAY5G,EAAEqB,QAAS0E,MAAM,MAEzCA,MAAQ60B,MAAMC,UAAUztB,MAAMlK,KAAMgS,YAGjCzU,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtCA,SAASuM,UAAYzI,MAAMqH,eAYnC/M,cAAe,oBAAoB,SAAWoE,KAAMV,OAAQhB,UACxD,OAAOtC,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtC8e,sBAAuB9e,SAAUwC,KAAMV,OAAQhB,gBAGvD1C,cAAe,iBAAiB,SAAW8gC,KACvC,IAAOA,IAAM,CACT,IAAI1F,IAAMh7B,KAAKq6B,QACXzE,MAAQoF,IAAI70B,OACZ60B,IAAI,GAAGnF,oBACP70B,EACJ,OAAOzB,EAAEqB,QAASg1B,OACd,CAAEI,IAAKJ,OACPA,MAER,OAAO51B,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtCA,SAASq0B,eAAiBt2B,EAAE+H,QAAQ,EAAM,GAAIo5B,WAItD9gC,cAAe,CACX,oBACA,qBACD,SAAW6O,KACV,IAAI4F,KAAOrU,KACX,OAAOA,KAAKi7B,SAAU,SAAS,SAAWz5B,SAAUqF,GAChD,IAAI8G,KAAO,GACXpO,EAAEkH,KAAM4N,KAAKxN,IAAI,SAAU4L,EAAGhP,KAC1BkK,KAAKhF,KAAM,CAAElF,IAAKgL,SAEtBjN,SAASuM,UAAYJ,WAG7B/N,cAAe,YAAY,SAAW0pB,MAAOlB,MAAO+C,MAAOwV,WACvD,IAAI3F,IAAMh7B,KAAKq6B,QACf,YAAer5B,IAAVsoB,MAEqB,IAAf0R,IAAI70B,OACP60B,IAAI,GAAG1X,gBAAgB6E,aACvBnnB,EAGDhB,KAAKi7B,SAAU,SAAS,SAAWz5B,UAC/BA,SAAS0H,UAAUia,SAG1BE,kBAAmB7hB,SAAUjC,EAAE+H,OAAQ,GAAI9F,SAAS8hB,gBAAiB,CACjE6E,QAAWmB,MAAM,GACjBrmB,OAAqB,OAAVmlB,OAAyBA,MACpCllB,OAAqB,OAAVioB,OAAyBA,MACpC/nB,iBAAkC,OAAdu9B,WAA4BA,YAC/C,SAGb9gC,oBACI,qBACA,qBACA,SAAWypB,MAAOlB,MAAO+C,MAAOwV,WAC5B,OAAO3gC,KAAKi7B,SAAU,UAAU,SAAWz5B,SAAU8B,QACjD,IAAIukB,UAAYrmB,SAASsW,gBACzB,QAAe9W,IAAVsoB,MAED,OAAOzB,UAAUvkB,QAAQ6kB,QAGtB3mB,SAAS0H,UAAUia,UAG1B5jB,EAAE+H,OAAQugB,UAAUvkB,QAAS,CACzB6kB,QAAWmB,MAAM,GACjBrmB,OAAqB,OAAVmlB,OAAyBA,MACpCllB,OAAqB,OAAVioB,OAAyBA,MACpC/nB,iBAAkC,OAAdu9B,WAA4BA,YAEpDtd,kBAAmB7hB,SAAUA,SAAS8hB,gBAAiB,UAOnE1jB,cAAe,WAAW,WACtB,OAAOI,KAAKq6B,QAAQl0B,OAChBnG,KAAKq6B,QAAQ,GAAGjC,YAChB,QAERx4B,cAAe,iBAAiB,WAC5B,OAAOI,KAAKi7B,SAAU,SAAS,SAAWz5B,UAEtCA,SAAS62B,oBAAoB51B,KAAMjB,SAASuG,UAAWvG,SAAU,UAGzE5B,cAAe,kBAAkB,WAC7B,OAAOI,KAAKq6B,QAAQl0B,OAChBnG,KAAKq6B,QAAQ,GAAG3B,aAChB,QAER94B,cAAe,gBAAgB,WAC3B,OAAOI,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtCuO,aAAcvO,gBAgBtB1B,UAAU8gC,aAAe9gC,UAAUiG,eAAiB,SAAU86B,SAK1D,IAHA,IAEIC,MAAOC,MAFPC,MAAQlhC,UAAU+gC,QAAQ/gB,MAAM,KAChCmhB,MAAQJ,QAAQ/gB,MAAM,KAEhBjZ,EAAE,EAAGH,KAAKu6B,MAAM96B,OAASU,EAAEH,KAAOG,IAIxC,IAHAi6B,MAAQlwB,SAAUowB,MAAMn6B,GAAI,KAAQ,MACpCk6B,MAAQnwB,SAAUqwB,MAAMp6B,GAAI,KAAQ,GAMpC,OAAOi6B,MAAQC,MAEnB,OAAO,GAgBXjhC,UAAUohC,YAAcphC,UAAUqhC,cAAgB,SAAW1d,OAEzD,IAAItL,EAAI5Y,EAAEkkB,OAAO2d,IAAI,GACjBC,IAAK,EACT,OAAK5d,iBAAiB3jB,UAAU+6B,MAGhCt7B,EAAEkH,KAAM3G,UAAU0B,UAAU,SAAUqF,EAAG+L,GACrC,IAAI0uB,KAAO1uB,EAAEqe,YAAc1xB,EAAE,QAASqT,EAAEqe,aAAa,GAAK,KACtDsQ,KAAO3uB,EAAEue,YAAc5xB,EAAE,QAASqT,EAAEue,aAAa,GAAK,KACrDve,EAAEnL,SAAW0Q,GAAKmpB,OAASnpB,GAAKopB,OAASppB,IAC1CkpB,IAAK,MAGNA,KAkBXvhC,UAAU26B,OAAS36B,UAAU0hC,SAAW,SAAWt8B,SAE/C,IAAI/E,KAAM,EACLZ,EAAEsB,cAAeqE,WAClB/E,IAAM+E,QAAQ/E,IACd+E,QAAUA,QAAQA,SAEtB,IAAIuI,EAAIlO,EAAE8M,IAAKvM,UAAU0B,UAAU,SAAUoR,GACzC,IAAM1N,SAAYA,SAAW3F,EAAEqT,EAAEnL,QAAQ45B,GAAG,YACxC,OAAOzuB,EAAEnL,UAGjB,OAAOtH,IACH,IAAIR,KAAM8N,GACVA,GAcR3N,UAAU2hC,iBAAmBp6B,oBAI7BzH,cAAe,OAAO,SAAW+6B,SAAUC,MACvC,IACIv6B,KAASL,KAAKK,KAAMu6B,MAAO32B,QAC3By9B,OAASniC,EAAEc,MACf,OAAOd,EAAG,GAAGygB,OACT0hB,OAAO9zB,OAAQ+sB,UAAWx5B,UAC1BugC,OAAOx1B,KAAMyuB,UAAWx5B,eAIhC5B,EAAEkH,KAAM,CAAE,KAAM,MAAO,QAAS,SAAUI,EAAGkM,KACzCnT,cAAemT,IAAI,MAAM,WACrB,IAAIyB,KAAO2lB,MAAMC,UAAUztB,MAAMlK,KAAKgS,WAEtCD,KAAK,GAAKjV,EAAE8M,IAAKmI,KAAK,GAAGsL,MAAO,OAAQ,SAAWkK,GAC/C,OAASA,EAAEnX,MAAM,UAEbmX,EADAA,EAAE,SAEFvd,KAAM,KACd,IAAIoxB,KAAOt+B,EAAGS,KAAKy6B,SAASx2B,SAE5B,OADA45B,KAAK9qB,KAAK6B,MAAOipB,KAAMrpB,MAChBxU,WAGfJ,cAAe,WAAW,WACtB,OAAOI,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtCqc,cAAerc,gBAGvB5B,cAAe,cAAc,WACzB,OAAO,IAAID,KAAMK,KAAKq6B,QAASr6B,KAAKq6B,YAExCz6B,cAAe,UAAU,WACrB,IAAIo7B,IAAMh7B,KAAKq6B,QACf,OAAOW,IAAI70B,OAAS60B,IAAI,GAAGr0B,MAAQ,QAEvC/G,cAAe,UAAU,WACrB,OAAOI,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtC,OAAOoQ,OAAQpQ,SAASe,OAAQ,aAChCrB,aAERtB,cAAe,aAAa,SAAW4C,QAEnC,OADAA,OAASA,SAAU,EACZxC,KAAKi7B,SAAU,SAAS,SAAWz5B,UACtC,IAUIwQ,IAVA2vB,KAAYngC,SAASuiB,cAAcpc,WACnC8C,QAAYjJ,SAAS2I,SACrBsZ,MAAYjiB,SAASiG,OACrB0H,MAAY3N,SAAS4N,OACrBH,MAAYzN,SAASkG,OACrB2H,MAAY7N,SAASoG,OACrBg6B,QAAYriC,EAAEkkB,OACdoe,QAAYtiC,EAAE4P,OACd2yB,UAAYviC,EAAEiC,SAASuiB,eACvB1jB,KAAYd,EAAE8M,IAAK7K,SAASe,QAAQ,SAAUitB,GAAK,OAAOA,EAAEvtB,OAIhET,SAASwgB,aAAc,EAEvBtT,gBAAiBlN,SAAU,oBAAqB,UAAW,CAACA,WAErDgB,QACH,IAAI7C,KAAM6B,UAAWF,UAAU4D,SAAS,GAK5C48B,UAAU9C,IAAI,OAAO9yB,KAAK,iBAAiB8yB,IAAI,OAC/Cz/B,EAAEC,QAAQw/B,IAAI,OAAOx9B,SAASkH,WAEzB+a,OAASxU,MAAMtH,aAChBi6B,QAAQ31B,SAAS,SAAS8W,SAC1B6e,QAAQ1rB,OAAQjH,QAEfI,OAASoU,OAASpU,MAAM1H,aACzBi6B,QAAQ31B,SAAS,SAAS8W,SAC1B6e,QAAQ1rB,OAAQ7G,QAEpB7N,SAASuM,UAAY,GACrBvM,SAASq0B,eAAiB,GAC1B3nB,kBAAmB1M,UACnBjC,EAAGc,MAAOmM,YAAahL,SAASoK,gBAAgBa,KAAK,MACrDlN,EAAE,SAAU0P,OAAOzC,YAAa/B,QAAQqP,UAAU,IAC9CrP,QAAQgP,aAAa,IAAIhP,QAAQmP,cAAc,IAAInP,QAAQ4O,eAE1D7X,SAASugC,OACVxiC,EAAE,WAAWkL,QAAQu3B,UAAW,aAAav3B,QAAQu3B,UAAW/yB,OAAO8T,SACvExjB,EAAE,SAAU0P,OAAOxI,MAAM,WACrB,IAAIw7B,QAAU1iC,EAAE,OAAOkL,QAAQy3B,gBAAiBliC,MAChDT,EAAES,MAAMkW,OAAQ+rB,QAAQtjB,YACxBsjB,QAAQlf,aAIhB8e,QAAQ51B,WAAW8W,SACnB8e,QAAQ3rB,OAAQ7V,MAEhB,IAAI8hC,cAAgB3/B,OAAS,SAAW,SACxCo/B,QAAQO,iBACRL,UAAUK,kBAEH3/B,QAAUm/B,OAEbA,KAAKhe,aAAcF,MAAOjiB,SAASwiB,sBAGnC4d,QACK5yB,IAAK,QAASxN,SAAS+G,eACvBiE,YAAa/B,QAAQE,SAI1BqH,IAAMxQ,SAASkL,iBAAiBvG,SAE5B07B,QAAQ51B,WAAWxF,MAAM,SAAUI,GAC/BtH,EAAES,MAAM0K,SAAUlJ,SAASkL,iBAAiB7F,EAAImL,UAK5D,IAAI6F,IAAMtY,EAAE6M,QAAS5K,SAAU1B,UAAU0B,WAC3B,IAATqW,KACD/X,UAAU0B,SAAS2G,OAAQ0P,IAAK,SAK5CtY,EAAEkH,KAAM,CAAE,SAAU,MAAO,SAAU,SAAWI,EAAGnD,MAC/C9D,cAAe8D,KAAK,eAAe,SAAW0C,IAC1C,IAAIw0B,KAAO56B,KAAK26B,SAASC,KACrBz6B,IAAMH,KACV,OAAOA,KAAKi7B,SAAUv3B,MAAM,SAAWlC,SAAU4gC,KAAMC,KAAMC,KAAMC,MAW/Dn8B,GAAG3D,KACCtC,IAAIuD,MACA0+B,KACO,SAAP1+B,KAAgB2+B,KAAOzH,KAChB,SAAPl3B,KAAgBk3B,UAAO55B,GAE3BohC,KAAMC,KAAMC,KAAMC,eAOlC3iC,cAAe,UAAU,SAAW4iC,MAAO9mB,IAAK+mB,QAC5C,IAAIzH,IAAMh7B,KAAKq6B,QAAQ,GACnBqI,SAAW14B,mBAAoBw4B,MAApBx4B,CAA6BgxB,IAAInyB,WAShD,YARkB7H,IAAb0hC,WACDA,SAAWhnB,UAEC1a,IAAXyhC,QAAwBljC,EAAEsB,cAAe6hC,YAC1CA,cAAgC1hC,IAArB0hC,SAASD,QAChBC,SAASD,QACTC,SAAStiC,GAEVsiC,SAASvxB,QAAS,KAAMsxB,WAUnC3iC,UAAU+gC,QAAU,UAapB/gC,UAAU0B,SAAW,GAOrB1B,UAAUwI,OAAS,GAMnBxI,UAAUwI,OAAOgN,QAAU,CAMvBlS,kBAAoB,EAMpB+kB,QAAW,GAQXllB,QAAU,EAMVC,QAAU,GAQdpD,UAAUwI,OAAO0T,KAAO,CAMpB/Z,IAAO,KAOPqc,QAAW,KAUXrC,OAAU,GAaVsC,WAAc,KAQdC,aAAgB,KAUhBsN,YAAe,KASfvJ,YAAe,GAUf/e,IAAO,KAQPqU,KAAQ,GAYZ/X,UAAUwI,OAAOmP,QAAU,CAOvBI,IAAO,KAUPrC,UAAa,KASbvH,UAAa,KAMbsa,YAAe,KAKfnP,UAAa,KAKbwB,SAAY,KAQZtC,aAAgB,KAQhBM,WAAa,EAab8G,cAAiB,KAejBnc,UAAa,KAYb0V,UAAa,KAQbrT,MAAS,KAST8S,QAAW,KAOXpB,IAAO,KAQPoJ,IAAO,KAMPhc,OAAU,KAYVywB,gBAAmB,KAQnBxY,gBAAmB,KAMnB0L,MAAS,KAOT4P,cAAiB,MAMjBze,cAAiB,KAOjBE,iBAAoB,KAKpB/B,OAAU,KAMVU,MAAS,KAMT8B,OAAU,KAMVlC,WAAc,MAsBlBnY,UAAUmH,SAAW,CAyDjBuI,OAAU,KAyBVzB,UAAa,CAAC,CAAC,EAAE,QAmBjB8nB,eAAkB,GAwIlBxqB,KAAQ,KAwBRtC,YAAe,CAAE,GAAI,GAAI,GAAI,KAa7BoE,UAAa,KAoBbG,aAAgB,KAyBhB+H,aAAgB,GAmBhBzJ,gBAAmB,KAkBnBqO,YAAc,EAqBdpL,cAAgB,EAuBhB/G,UAAY,EAoBZqb,SAAW,EAgBXgC,OAAS,EAgBT/a,WAAa,EAebya,eAAiB,EAcjBD,WAAa,EAiBbI,aAAe,EAgCfnd,WAAa,EAoBb86B,iBAAmB,EAkBnBjhB,aAAe,EAefvT,OAAS,EAgBTkpB,YAAc,EAgBd/Q,eAAiB,EAkBjBwR,cAAgB,EAqBhBhoB,YAAc,EAwBdpG,aAAgB,KAiBhBN,eAAkB,KAwBlBQ,iBAAoB,KA0BpB4jB,eAAkB,SAAWoV,UACzB,OAAOA,SAASrW,WAAWpb,QACvB,wBACAnR,KAAK6I,UAAU+K,aA2BvBjK,iBAAoB,KA0BpB2jB,eAAkB,KAqBlBzjB,eAAkB,KAsBlBC,kBAAqB,KAyBrBL,cAAiB,KAqBjB4d,aAAgB,KAsBhBhe,eAAkB,KA2BlBsvB,oBAAuB,SAAWn3B,UAC9B,IACI,OAAOqhC,KAAKC,QACsB,IAA7BthC,SAASi3B,eAAwBsK,eAAiBC,cAAcC,QAC7D,cAAczhC,SAASkH,UAAU,IAAIw6B,SAASC,WAGxD,MAAOnZ,MAkCbzgB,kBAAqB,KAoBrBC,cAAiB,KA4BjB6uB,oBAAuB,SAAW72B,SAAUlB,MACxC,MACkC,IAA7BkB,SAASi3B,eAAwBsK,eAAiBC,cAAcI,QAC7D,cAAc5hC,SAASkH,UAAU,IAAIw6B,SAASC,SAC9CN,KAAKQ,UAAW/iC,OAEtB,MAAO0pB,MAwBb1gB,kBAAqB,KAgBrBmvB,eAAkB,KAuClB1tB,cAAiB,KAgBjB/B,eAAkB,GAiBlB6B,cAAiB,EAmBjBwV,UAAa,EASblW,SAAY,GAQZtB,UAAa,CAQTiuB,MAAS,CAoBLE,eAAkB,sCAoBlBC,gBAAmB,wCAQvBqM,UAAa,CAmBTC,OAAU,QAmBVC,MAAS,OAmBTC,MAAS,OAmBTC,UAAa,YAoBjBjwB,YAAe,iCA2BfoZ,MAAS,8CAiBTK,WAAc,8BAkBdC,cAAiB,sCAmBjBE,aAAgB,GA2BhBvZ,SAAY,GAmBZF,WAAc,IAoCd6a,YAAe,sBAoBf/a,gBAAmB,aAiBnB+b,YAAe,gBA8BftH,QAAW,UAQX0B,mBAAsB,GAqBtBze,KAAQ,GAkBRoI,aAAgB,+BAqBpB8B,QAAW/V,EAAE+H,OAAQ,GAAIxH,UAAUwI,OAAOgN,SAgB1C4T,cAAiB,OAcjB5B,YAAe,KAoDfhd,KAAQ,SAgBRqf,YAAe,KAuBfgF,gBAAmB,iBAqBnBzZ,SAAY,GAoBZyuB,cAAiB,GAoBjBC,SAAY,GAaZ5c,cAAiB,MAajBzc,SAAY,KAQZN,MAAS,YAEb0I,gBAAiB7S,UAAUmH,UAS3BnH,UAAUmH,SAAS3D,OAAS,CAoCxBkS,UAAa,KACbgD,WAAc,EAkCdvK,UAAa,CAAE,MAAO,QA4BtBsa,aAAe,EA4BfnP,WAAa,EA4BbwB,UAAY,EA4BZ8E,cAAiB,KA0KjB9Z,MAAS,KAkHT8S,QAAW,KAoBX6G,UAAa,KA8Bb7a,OAAU,GA8BVywB,gBAAmB,GAsCnBxY,gBAAmB,KAuCnB0L,MAAS,GAqCT4P,cAAiB,MA+BjBtgB,OAAU,KAoCVU,MAAS,KAkCT8B,OAAU,MAEdxH,gBAAiB7S,UAAUmH,SAAS3D,QAsBpCxD,UAAUwI,OAAOD,UAAY,CAKzBa,UAAa,CAQT+Q,WAAc,KAUdpL,aAAgB,KAShBsU,QAAW,KAQXgC,MAAS,KAQTN,cAAiB,KAQjBD,UAAa,KAQbI,YAAe,KASftD,YAAe,KAOfvT,MAAS,KAOTkpB,WAAc,KASdS,aAAgB,KAOhBhoB,WAAc,MAMlBpO,QAAW,CAQPsvB,UAAa,KAObha,UAAa,EAQbrV,GAAM,KASN6uB,QAAW,KAQX5uB,GAAM,MAOViH,UAAa,CAOTykB,eAAkB,MAMtBvW,SAAY,CAORP,iBAAmB,EAQnBC,gBAAkB,EAMlBI,WAAa,EAMbR,SAAY,GAEhBhL,KAAQ,KAeRqa,YAAe,GAOfnjB,OAAU,GAMVoN,UAAa,GAMbC,gBAAmB,GAMnBsM,KAAQ,GAMR/O,UAAa,GAMbF,SAAY,GAMZsC,SAAY,GASZ+T,gBAAmB,GAQnBxL,gBAAmB,GAanB/J,UAAa,KASb8nB,eAAkB,GAQlBjqB,gBAAmB,KAMnBc,iBAAoB,GAMpBnE,cAAiB,EAMjBs7B,cAAiB,GAMjBC,iBAAoB,GAMpBC,iBAAoB,GAMpBjX,eAAkB,GAMlBkX,qBAAwB,GAOxBC,kBAAqB,GAMrBC,eAAkB,GAOlBC,kBAAqB,GAOrBC,kBAAqB,GAOrBC,cAAiB,GAMjBp8B,SAAY,GAMZR,OAAU,KAMVC,OAAU,KAMVE,OAAU,KAMVwH,OAAU,KAMV2U,cAAiB,KASjB/Y,eAAiB,EAMjB6E,cAAgB,EAOhBy0B,WAAc,GASdh6B,KAAQ,KAMRqf,YAAe,KAQfgF,gBAAmB,aAQnB8J,eAAkB,EAclB8L,YAAe,GAYfC,YAAe,GAMfpM,YAAe,KAMfM,aAAgB,KAQhBpR,YAAe,KASf4B,cAAiB,KAMjB3B,cAAgB,EAQhBZ,MAAS,KAMTlb,UAAQzK,EAMRomB,eAAapmB,EAObqmB,aAAgB,KAOhBod,eAAkB,GAQlBzd,cAAiB,KAOjBwG,eAAkB,KAQlBzkB,YAAe,KAOf0T,MAAS,EAMTkF,UAAY,EAMZ9E,YAAe,EAMfoL,gBAAmB,GAMnBnd,eAAkB,EAUlBK,eAAkB,EAUlBD,iBAAoB,EAOpB62B,KAAQ,KAMR53B,SAAY,GASZ6Y,WAAa,EASb5U,SAAW,EASXkY,cAAiB,KAMjB3f,MAAS,KAOT+9B,kBAAqB,GAKrBjiB,eAAkB,WAEd,MAAgC,OAAzB7T,cAAe5O,MACI,EAAtBA,KAAKmL,eACLnL,KAAK4P,gBAAgBzJ,QAM7Byb,iBAAoB,WAEhB,MAAgC,OAAzBhT,cAAe5O,MACM,EAAxBA,KAAKkL,iBACLlL,KAAK2P,UAAUxJ,QAMvB2b,aAAgB,WAEZ,IACI5b,IAAWlG,KAAKioB,gBAChB9V,MAAWnS,KAAK8K,eAChBq1B,KAAWhuB,MAAQjM,IACnBmpB,QAAWrvB,KAAK2P,UAAUxJ,OAC1B0H,SAAW7N,KAAKkJ,UAChBy7B,SAAW92B,SAAS+W,UACxB,OAAK/W,SAAS6T,aACU,IAAbijB,WAA+B,IAATz+B,IACzBiM,MAAQkd,QACR3Y,KAAKkuB,IAAKzyB,MAAMjM,IAAKlG,KAAKkL,mBAGrBy5B,UAAYxE,KAAK9Q,UAAkB,IAAPnpB,IACjCmpB,QACA8Q,MAQZp4B,UAAa,KAQbW,UAAa,KAKb2X,UAAa,EAIb4Q,YAAe,KAIfE,YAAe,KAMfwG,UAAa,GAMbkN,SAAY,GAMZ96B,QAAW,KAMXE,MAAS,MAqBbnK,UAAUyG,IAAM7G,KAAO,CAQnBwvB,QAAS,GAMTzkB,QAAS,GAKTq6B,QAAS,WAQT9L,QAAS,QA6BT1T,QAAS,GAyDTjiB,OAAQ,GAuBRs3B,SAAU,CACN92B,KAAM,GACNP,OAAQ,GACRvC,IAAK,IAWTuF,SAAU,GAOVmiB,OAAQ,CAQJpd,KAAM,MA8CVwjB,MAAO,GACPtkB,SAAU,CACNw6B,WAAY,GACZv6B,OAAQ,IAqCZlF,MAAO,GAUP5B,KAAM,CAuCF0X,OAAQ,GAkCR/X,OAAQ,GA2DRiC,MAAO,IAQX8C,QAAS,EAUTrC,eAAgBjG,UAAUiG,eAM1BtF,UAAW,EAMX4J,YAAa,GAMb26B,SAAUllC,UAAU+gC,SAKxBthC,EAAE+H,OAAQ5H,KAAM,CACZulC,aAAcvlC,KAAK2D,OACnB6hC,OAAcxlC,KAAKgE,KAAK0X,OACxB+pB,UAAczlC,KAAKgE,KAAKL,OACxB+hC,MAAc1lC,KAAKgE,KAAK4B,MACxB+/B,YAAc3lC,KAAK4F,MACnBigB,WAAc7lB,KAAK4lB,QACnBjf,KAAc3G,KAAK4G,SACnBg/B,YAAc5lC,KAAK+K,QACnB86B,YAAc7lC,KAAKmvB,QAEvBtvB,EAAE+H,OAAQxH,UAAUyG,IAAIkE,QAAS,CAC7BE,OAAU,YACV2E,UAAa,YAEbk2B,YAAe,kBACfC,kBAAqB,UACrBC,oBAAuB,WAEvB75B,WAAc,MACdC,YAAe,OAEf+W,UAAa,mBAEbgB,SAAY,qBACZ4F,QAAW,oBACXoD,MAAS,kBACTiC,QAAW,8BACXN,QAAW,oBACXiB,YAAe,wBAEfkW,SAAY,cACZC,UAAa,eACb9rB,UAAa,UACbL,aAAgB,uBAChBG,cAAiB,wBACjBP,cAAiB,mBACjBwe,YAAe,WAEftO,aAAgB,GAEhB8E,cAAiB,GAEjB+B,eAAkB,oBAClBC,YAAe,wBACfE,iBAAoB,6BACpBG,YAAe,wBACfC,YAAe,wBACfC,iBAAoB,6BAEpBpQ,UAAa,GACbC,UAAa,GAEbolB,YAAe,GACfC,aAAgB,GAChB/rB,SAAY,GACZJ,mBAAsB,GACtBE,oBAAuB,GACvBqoB,gBAAmB,GACnBF,UAAa,GACbzd,WAAc,GACdC,WAAc,KASdgb,cAAyB,mBACzBC,UAAyB,6BACzBC,cAAyB,4DAC7BngC,EAAE+H,OAAQxH,UAAUyG,IAAI8D,YAAavK,UAAUyG,IAAIkE,QAAS,CAExD+6B,YAAuB,uBAAuBhG,cAC9CiG,kBAAuB,oBACvBC,oBAAuB,oBAEvB5W,QAAW,8FAGX6W,SAAuBnG,cAAc,eACrCoG,UAAuBpG,cAAc,gBACrC1lB,UAAuB0lB,cAAc,WACrC/lB,aAAuB+lB,cAAc,wBACrC5lB,cAAuB4lB,cAAc,yBACrCnmB,cAAuBmmB,cAAc,oBACrCqG,YAAuBpG,UAAU,eACjCqG,aAAuBrG,UAAU,eACjC1lB,SAAuB0lB,UAAU,cACjC9lB,mBAAuB8lB,UAAU,YACjC5lB,oBAAuB4lB,UAAU,YACjCyC,gBAAuB,0BACvBF,UAAuB,uBAEvB3R,YAAe,yBAAyBmP,cACxC7O,YAAe,yBAAyB6O,cAExChf,UAAcgf,cACd/e,UAAc+e,cACdjb,WAAcmb,cAAc,6BAC5Blb,WAAckb,cAAc,+BAGhC,IAAIqG,cAAgBjmC,UAAUyG,IAAIsoB,MAUlC,SAASmX,SAAWlhC,KAAMmqB,OACtB,IACIgX,QAAU,GACV/W,QAAU6W,cAAcG,eACxBC,KAAOzvB,KAAK4Y,MAAOJ,QAAU,GAsBjC,OArBKD,OAASC,QACV+W,QAAU/zB,OAAQ,EAAG+c,OAEfnqB,MAAQqhC,OACdF,QAAU/zB,OAAQ,EAAGgd,QAAQ,IACrBvmB,KAAM,YACds9B,QAAQt9B,KAAMsmB,MAAM,IAEdnqB,MAAQmqB,MAAQ,EAAIkX,OAC1BF,QAAU/zB,OAAQ+c,OAAOC,QAAQ,GAAID,QAC7B9mB,OAAQ,EAAG,EAAG,YACtB89B,QAAQ99B,OAAQ,EAAG,EAAG,MAGtB89B,QAAU/zB,OAAQpN,KAAKqhC,KAAK,EAAGrhC,KAAKqhC,KAAK,IACjCx9B,KAAM,YACds9B,QAAQt9B,KAAMsmB,MAAM,GACpBgX,QAAQ99B,OAAQ,EAAG,EAAG,YACtB89B,QAAQ99B,OAAQ,EAAG,EAAG,IAE1B89B,QAAQG,MAAQ,OACTH,QAEX1mC,EAAE+H,OAAQy+B,cAAe,CAIrBM,KAAM,WACF,MAAO,CAAG,QAAS,WAAY,OAAQ,SAE3CJ,QAAS,SAAWnhC,KAAMmqB,OACtB,MAAO,CAAE+W,SAASlhC,KAAMmqB,SAE5BqX,eAAgB,SAAWxhC,KAAMmqB,OAC7B,MAAO,CAAE,WAAY+W,SAASlhC,KAAMmqB,OAAQ,SAEhDsX,aAAc,SAAWzhC,KAAMmqB,OAC3B,MAAO,CAAE,QAAS,WAAY+W,SAASlhC,KAAMmqB,OAAQ,OAAQ,SAEjEuX,mBAAoB,SAAU1hC,KAAMmqB,OAChC,MAAO,CAAC,QAAS+W,SAASlhC,KAAMmqB,OAAQ,SAG5C+W,SAAUA,SAEVE,eAAgB,IAEpB3mC,EAAE+H,QAAQ,EAAMxH,UAAUyG,IAAIgE,SAAU,CACpCw6B,WAAY,CACR3kC,EAAG,SAAWoB,SAAUw4B,KAAMniB,IAAKqX,QAASpqB,KAAMmqB,OAC9C,IAGIwX,WAAYC,SAsEZC,SAzEAl8B,QAAUjJ,SAAS2I,SACnBmJ,KAAO9R,SAASqH,UAAUy6B,UAC1BsD,KAAOplC,SAASqH,UAAUiuB,MAAM6N,UAAY,GACtBkC,QAAQ,EAC9BC,OAAS,SAAUC,UAAW7X,SAC9B,IAAIroB,EAAGmL,IAAWg1B,OACdC,aAAe,SAAWjd,GAC1BmF,cAAe3tB,SAAUwoB,EAAE1pB,KAAK8uB,QAAQ,IAE5C,IAAMvoB,EAAE,EAAGmL,IAAIkd,QAAQ/oB,OAASU,EAAEmL,IAAMnL,IAEpC,GADAmgC,OAAS9X,QAAQroB,GACZtH,EAAEqB,QAASomC,QAAW,CACvB,IAAI5wB,MAAQ7W,EAAG,KAAKynC,OAAOZ,OAAS,OAAO,MACtCl3B,SAAU63B,WACfD,OAAQ1wB,MAAO4wB,YAEd,CAGD,OAFAP,WAAa,KACbC,SAAW,GACFM,QACL,IAAK,WACDD,UAAU7wB,OAAO,0CACjB,MACJ,IAAK,QACDuwB,WAAanzB,KAAKiwB,OAClBmD,SAAWM,QAAUliC,KAAO,EACxB,GAAK,IAAI2F,QAAQi7B,qBACrB,MACJ,IAAK,WACDe,WAAanzB,KAAKowB,UAClBgD,SAAWM,QAAUliC,KAAO,EACxB,GAAK,IAAI2F,QAAQi7B,qBACrB,MACJ,IAAK,OACDe,WAAanzB,KAAKmwB,MAClBiD,SAAWM,QAAUliC,KAAOmqB,MAAM,EAC9B,GAAK,IAAIxkB,QAAQi7B,qBACrB,MACJ,IAAK,OACDe,WAAanzB,KAAKkwB,MAClBkD,SAAWM,QAAUliC,KAAOmqB,MAAM,EAC9B,GAAK,IAAIxkB,QAAQi7B,qBACrB,MACJ,QACIe,WAAaO,OAAS,EACtBN,SAAW5hC,OAASkiC,OAChBv8B,QAAQg7B,kBAAoB,GAGpB,OAAfgB,aAaDjP,cAZOj4B,EAAE,MAAO,CACRmjB,MAASjY,QAAQ+6B,YAAY,IAAIkB,SACjC,gBAAiBllC,SAASyG,SAC1B,aAAc2+B,KAAKI,QACnB,cAAeH,QACfK,SAAY1lC,SAAS6e,UACrBnY,GAAc,IAAR2P,KAA+B,iBAAXmvB,OACtBxlC,SAASyG,SAAU,IAAK++B,OACxB,OAEPv1B,KAAMg1B,YACNv3B,SAAU63B,WAEL,CAAC3X,OAAQ4X,QAASC,cAE5BJ,aAShB,IAKIF,SAAWpnC,EAAEy6B,MAAM9tB,KAAKzM,SAAS0qB,eAAe7pB,KAAK,UAEzD,MAAO0pB,IACP8c,OAAQvnC,EAAEy6B,MAAMmN,QAASjY,cACPluB,IAAb2lC,UACDpnC,EAAEy6B,MAAM9tB,KAAM,gBAAgBy6B,SAAS,KAAMS,YAO7D7nC,EAAE+H,OAAQxH,UAAUyG,IAAI7C,KAAK0X,OAAQ,CAGjC,SAAW3K,EAAGjP,UAEV,IAAIqS,QAAUrS,SAASqH,UAAUiL,SACjC,OAAO1C,UAAWX,EAAGoD,SAAY,MAAMA,QAAU,MAGrD,SAAWpD,GAKP,GAAKA,KAAOA,aAAa8D,QAAWnE,SAASob,KAAK/a,GAC9C,OAAO,KAEX,IAAI42B,OAAS9yB,KAAKuuB,MAAMryB,GACxB,OAAmB,OAAX42B,SAAoBx2B,MAAMw2B,SAAY72B,OAAOC,GAAK,OAAS,MAGvE,SAAWA,EAAGjP,UAEV,IAAIqS,QAAUrS,SAASqH,UAAUiL,SACjC,OAAO1C,UAAWX,EAAGoD,SAAS,GAAS,UAAUA,QAAU,MAG/D,SAAWpD,EAAGjP,UAEV,IAAIqS,QAAUrS,SAASqH,UAAUiL,SACjC,OAAOtC,aAAcf,EAAGoD,SAAY,WAAWA,QAAU,MAG7D,SAAWpD,EAAGjP,UAEV,IAAIqS,QAAUrS,SAASqH,UAAUiL,SACjC,OAAOtC,aAAcf,EAAGoD,SAAS,GAAS,eAAeA,QAAU,MAGvE,SAAWpD,GAEP,OAAOD,OAAQC,IAAqB,iBAANA,IAAsC,IAApBA,EAAEuC,QAAQ,KACtD,OAAS,QAQrBzT,EAAE+H,OAAQxH,UAAUyG,IAAI7C,KAAKL,OAAQ,CACjCoO,KAAM,SAAWnR,MACb,OAAOkQ,OAAOlQ,MACVA,KACgB,iBAATA,KACHA,KACK6Q,QAASjB,cAAe,KACxBiB,QAAShB,SAAU,IACxB,IAEZm3B,OAAQ,SAAWhnC,MACf,OAAOkQ,OAAOlQ,MACVA,KACgB,iBAATA,KACHA,KAAK6Q,QAASjB,cAAe,KAC7B5P,QAGhB,IAAIinC,iBAAmB,SAAW92B,EAAG+2B,aAAcC,IAAKC,KACpD,OAAW,IAANj3B,GAAaA,GAAW,MAANA,GAMlB+2B,eACD/2B,EAAIM,cAAeN,EAAG+2B,eAErB/2B,EAAEU,UACEs2B,MACDh3B,EAAIA,EAAEU,QAASs2B,IAAK,KAEnBC,MACDj3B,EAAIA,EAAEU,QAASu2B,IAAK,MAGjB,EAAJj3B,IAhBI,KA4Bf,SAASsD,gBAAkByzB,cACvBjoC,EAAEkH,KACE,CAEIuK,IAAO,SAAWP,GACd,OAAO82B,iBAAkB92B,EAAG+2B,eAGhC,UAAW,SAAW/2B,GAClB,OAAO82B,iBAAkB92B,EAAG+2B,aAAcj3B,wBAG9C,WAAY,SAAWE,GACnB,OAAO82B,iBAAkB92B,EAAG+2B,aAAcr3B,WAG9C,eAAgB,SAAWM,GACvB,OAAO82B,iBAAkB92B,EAAG+2B,aAAcr3B,SAAUI,0BAG5D,SAAWwC,IAAK3M,IAEZ1G,KAAKgE,KAAK4B,MAAMyN,IAAIy0B,aAAa,QAAUphC,GAEtC2M,IAAIF,MAAM,aACXnT,KAAKgE,KAAKL,OAAO0P,IAAIy0B,cAAgB9nC,KAAKgE,KAAKL,OAAOoO,SAMtElS,EAAE+H,OAAQ5H,KAAKgE,KAAK4B,MAAO,CAEvB,WAAY,SAAWmL,GACnB,OAAO8D,KAAKuuB,MAAOryB,KAAO,KAG9B,WAAY,SAAWhD,GACnB,OAAO+C,OAAO/C,GACV,GACAA,EAAE0D,QACE1D,EAAE0D,QAAS,SAAU,IAAKvN,cAC1B6J,EAAE,IAGd,aAAc,SAAWA,GAGrB,OAAO+C,OAAO/C,GACV,GACa,iBAANA,EACHA,EAAE7J,cACA6J,EAAE8e,SAEA9e,EAAE8e,WADF,IAKhB,aAAc,SAAWiK,EAAGC,GACxB,OAASD,EAAIC,GAAM,EAAMD,EAAIC,EAAK,EAAI,GAE1C,cAAe,SAAWD,EAAGC,GACzB,OAASD,EAAIC,EAAK,EAAMD,EAAIC,GAAM,EAAI,KAI9C1iB,gBAAiB,IACjBxU,EAAE+H,QAAQ,EAAMxH,UAAUyG,IAAIgE,SAAU,CACpCC,OAAQ,CACJpK,EAAG,SAAWoB,SAAUqC,KAAMP,OAAQmH,SAMlClL,EAAEiC,SAASiG,QAAQqiB,GAAI,eAAe,SAAWE,EAAGgR,IAAKhtB,QAAS1M,SAC9D,GAAKE,WAAaw5B,IAAlB,CAGA,IAAIxe,OAASlZ,OAAOuU,IACpBhU,KACK2I,YACGlJ,OAAOkW,cAAe,IACtB/O,QAAQk7B,SAAU,IAClBl7B,QAAQm7B,WAEXl7B,SAA6B,OAAnBpJ,QAAQkb,QACf/R,QAAQk7B,SAA8B,QAAnBrkC,QAAQkb,QACvB/R,QAAQm7B,UACRtiC,OAAOkW,oBAI3BmuB,SAAU,SAAWnmC,SAAUqC,KAAMP,OAAQmH,SACzClL,EAAE,UACGmL,SAAUD,QAAQy3B,iBAClBhsB,OAAQrS,KAAK8a,YACbzI,OAAQ3W,EAAE,WACNmL,SAAUD,QAAQu3B,UAAU,IAAI1+B,OAAOoW,mBAE3CxK,SAAUrL,MAEftE,EAAEiC,SAASiG,QAAQqiB,GAAI,eAAe,SAAWE,EAAGgR,IAAKhtB,QAAS1M,SAC9D,GAAKE,WAAaw5B,IAAlB,CAGA,IAAIxe,OAASlZ,OAAOuU,IACpBhU,KACK2I,YAAa/B,QAAQk7B,SAAU,IAAIl7B,QAAQm7B,WAC3Cl7B,SAA6B,OAAnBpJ,QAAQkb,QACf/R,QAAQk7B,SAA8B,QAAnBrkC,QAAQkb,QACvB/R,QAAQm7B,UACRtiC,OAAOkW,eAEnB3V,KACKqI,KAAM,QAAQzB,QAAQu3B,WACtBx1B,YACG/B,QAAQo7B,YAAa,IACrBp7B,QAAQq7B,aAAc,IACtBr7B,QAAQsP,SAAU,IAClBtP,QAAQkP,mBAAoB,IAC5BlP,QAAQoP,qBAEXnP,SAA6B,OAAnBpJ,QAAQkb,QACf/R,QAAQo7B,YAAiC,QAAnBvkC,QAAQkb,QAC1B/R,QAAQq7B,aACRxiC,OAAOoW,0BAYnC,IAAIkuB,qBAAuB,SAAWn3B,GAClC,MAAoB,iBAANA,EACVA,EAAEU,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,UAC5DV,GAsER,SAASjK,iBAAkBJ,IAEvB,OAAO,WACH,IAAIoO,KAAO,CAAChU,oBAAqBR,KAAKF,UAAUyG,IAAI9F,aAAcuf,OAC9Dma,MAAMC,UAAUztB,MAAMlK,KAAKgS,YAE/B,OAAO3U,UAAUyG,IAAID,SAASF,IAAIwO,MAAO5U,KAAMwU,OA6QvD,OA7TA1U,UAAU+nC,OAAS,CACfC,OAAQ,SAAWC,UAAWl0B,QAASm0B,UAAWC,OAAQC,SACtD,MAAO,CACH7c,QAAS,SAAW5a,GAChB,GAAkB,iBAANA,GAA+B,iBAANA,EACjC,OAAOA,EAEX,IAAI03B,SAAW13B,EAAI,EAAI,IAAM,GACzB23B,IAAM72B,WAAYd,GAItB,GAAKI,MAAOu3B,KACR,OAAOR,qBAAsBn3B,GAEjC23B,IAAMA,IAAIC,QAASL,WACnBv3B,EAAIiG,KAAK4xB,IAAKF,KACd,IAAIG,QAAU33B,SAAUH,EAAG,IACvB+3B,UAAYR,UACZn0B,SAASpD,EAAI83B,SAASF,QAASL,WAAYxqB,UAAW,GACtD,GACJ,OAAO2qB,UAAYF,QAAQ,IACvBM,QAAQhc,WAAWpb,QACf,wBAAyB42B,WAE7BS,WACCN,SAAS,OAI1BO,KAAM,WACF,MAAO,CACHpd,QAASuc,wBA0BrBroC,EAAE+H,OAAQxH,UAAUyG,IAAID,SAAU,CAC9BE,iBAAkBA,iBAClB+f,aAAcA,aACdtE,cAAeA,cACfuF,kBAAmBA,kBACnBC,kBAAmBA,kBACnBmB,eAAgBA,eAChBxb,aAAcA,aACdI,iBAAkBA,iBAClBwM,sBAAuBA,sBACvBI,wBAAyBA,wBACzBI,wBAAyBA,wBACzBE,iBAAkBA,iBAClBH,cAAeA,cACfO,eAAgBA,eAChBzN,mBAAoBA,mBACpBsF,gBAAiBA,gBACjBtL,oBAAqBA,oBACrByB,kBAAmBA,kBACnBoB,iBAAkBA,iBAClBuF,WAAYA,WACZC,SAAUA,SACVg5B,mBA/7UJ,SAA6BrgC,UAAWsN,GAEpC,YAAyB3U,IAAjB2U,EAAE2J,aAA4B3J,EAAE2J,aAAe,MA87UvDqpB,qBAp7UJ,SAA+BtgC,UAAWtE,KAAM4R,GAE5C,OAAOpW,EAAE6M,QAASuJ,EAAGtN,UAAU9F,OAAOwB,MAAMua,UAm7U5CjD,eAAgBA,eAChByB,eAAgBA,eAChBG,oBAAqBA,oBACrBjT,mBAAoBA,mBACpBkP,mBAAoBA,mBACpB0E,iBAAkBA,iBAClBC,cAAeA,cACfC,eAAgBA,eAChBG,cAAeA,cACf5B,kBAAmBA,kBACnBF,YAAaA,YACbgE,aAAcA,aACdQ,YAAaA,YACbS,QAASA,QACT6B,UAAWA,UACXO,kBAAmBA,kBACnBxW,gBAAiBA,gBACjBE,gBAAiBA,gBACjB6X,qBAAsBA,qBACtB1B,kBAAmBA,kBACnByH,gBAAiBA,gBACjBD,gBAAiBA,gBACjBD,UAAWA,UACXW,sBAAuBA,sBACvBra,eAAgBA,eAChB2a,cAAeA,cACfzG,mBAAoBA,mBACpB2H,cAAeA,cACfK,cAAeA,cACf1hB,cAAeA,cACfsd,gBAAiBA,gBACjB+E,gBAAiBA,gBACjBjJ,qBAAsBA,qBACtBO,uBAAwBA,uBACxB8J,cAAeA,cACflK,yBAA0BA,yBAC1BlD,qBAAsBA,qBACtBmD,oBAAqBA,oBACrBrjB,cAAeA,cACf6xB,mBAAoBA,mBACpBxZ,yBAA0BA,yBAC1B6P,YAAaA,YACbgL,kBAAmBA,kBACnBG,iBAAkBA,iBAClBO,mBAAoBA,mBACpB5H,eAAgBA,eAChBvf,eAAgBA,eAChB8U,QAASA,QACTzU,YAAaA,YACbuoB,gBAAiBA,gBACjB5W,sBAAuBA,sBACvBpS,kBAAmBA,kBACnBqoB,YAAaA,YACbxmB,aAAcA,aACdC,aAAcA,aACdxP,oBAAqBA,oBACrBwH,OAAQA,OACRiB,OAAQA,OACRuuB,cAAeA,cACfruB,eAAgBA,eAChBuF,gBAAiBA,gBACjBsf,kBAAmBA,kBACnBzN,YAAaA,YACb3R,cAAeA,cACf8P,iBAAkBA,iBAClBkqB,gBAAiB,eAKrBrpC,EAAE6G,GAAGwC,UAAY9I,UAEjBA,UAAUP,EAAIA,EAEdA,EAAE6G,GAAGyiC,kBAAoB/oC,UAAU0B,SACnCjC,EAAE6G,GAAG0iC,aAAehpC,UAAUyG,IAG9BhH,EAAE6G,GAAGtG,UAAY,SAAW86B,MACxB,OAAOr7B,EAAES,MAAM4I,UAAWgyB,MAAOz6B,OAIrCZ,EAAEkH,KAAM3G,WAAW,SAAW+R,KAAMrD,KAChCjP,EAAE6G,GAAGtG,UAAU+R,MAAQrD,OAuJpBjP,EAAE6G,GAAGwC,SAChB,EA3vZ2B,mBAAXmgC,QAAyBA,OAAOC,IAExCD,2CAAQ,CAAC,WAAW,SAAWxpC,GAC3B,OAAOD,QAASC,EAAGC,OAAQC,aAGN,iBAAZwpC,QAEbC,OAAOD,QAAU,SAAUE,KAAM5pC,GAa7B,OAZO4pC,OAGHA,KAAO3pC,QAGJD,IACHA,EAAsB,oBAAXC,OACP4pC,QAAQ,UACRA,QAAQ,SAARA,CAAmBD,OAGpB7pC,QAASC,EAAG4pC,KAAMA,KAAK1pC,WAKlCH,QAAS+pC,OAAQ7pC,OAAQC"}