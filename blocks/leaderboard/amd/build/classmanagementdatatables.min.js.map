{"version":3,"file":"classmanagementdatatables.min.js","sources":["../src/classmanagementdatatables.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_courses/courseAjaxform\n * @class      courseAjaxform\n * @package    local_courses\n * @copyright  2018 Sreenivas\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later \n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui', 'core/templates'],\n    function ( $, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y, Templates) {\n\n        /**\n        * Constructor\n        *\n        * @param {object} args\n        *\n        * Each call to init gets it's own instance of this class.\n        */\n        var courseAjaxform = function (args) {\n            this.contextid = args.contextid ? args.contextid : 1;\n            this.init(args);\n        };\n\n        /**\n        * @var {Modal} modal\n        * @private\n        */\n        courseAjaxform.prototype.modal = null;\n\n        /**\n        * @var {int} contextid\n        * @private\n        */\n        courseAjaxform.prototype.contextid = -1;\n\n        /**\n        * Initialise the class.\n        *\n        * @param {String} selector used to find triggers for the new group modal.\n        * @private\n        * @return {Promise}\n        */\n        courseAjaxform.prototype.init = function (args) {\n            // Fetch the title string.\n            var self = this;\n\n            var head = { key: 'courses', component: 'block_leaderboard' };\n            customstrings = Str.get_strings([head, {\n                key: 'close',\n                component: 'block_leaderboard'\n            }]);\n            return customstrings.then(function (strings) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                    title: strings[0],\n                    body: this.getBody(),\n                });\n            }.bind(this)).then(function (modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n                this.modal.show();\n                this.modal.getRoot().animate({ \"right\": \"0%\" }, 500);\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n        * @method getBody\n        * @private\n        * @return {Promise}\n        */\n        courseAjaxform.prototype.getBody = function (args) {\n            // Get the content of the modal.\n            return Fragment.loadFragment('block_leaderboard', 'coursespopup', 1, args);\n        };\n        /**\n        * @method getFooter\n        * @private\n        * @return {Promise}\n        */\n        courseAjaxform.prototype.getFooter = function (customstrings) {\n            var footer = '';   \n            footer = '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">' + customstrings[0] + '</button>';\n            return footer;    \n            // }.bind(this));\n        };\n        /**\n        * @method getFooter\n        * @private\n        * @return {Promise}\n        */\n        courseAjaxform.prototype.getcontentFooter = function () {\n            return Str.get_strings([{\n                key: 'cancel'\n            }]).then(function (s) {\n                $footer = '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">' + s[1] + '</button>';\n                return $footer;\n            }.bind(this));\n        };\n      \n        return /** @alias module:core_group/courseAjaxform */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @return {Promise}\n             */\n            init: function (args) {\n                return new courseAjaxform(args);\n            },\n            \n            load: function () { }\n        };\n    });"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","Templates","courseAjaxform","args","contextid","init","prototype","modal","customstrings","get_strings","key","component","then","strings","create","type","types","CANCEL","title","body","this","getBody","bind","show","getRoot","animate","loadFragment","getFooter","getcontentFooter","s","$footer","load"],"mappings":";;;;;;;;;AASAA,6DAAO,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,WAAY,mBAC/G,SAAWC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,EAAGC,eASzDC,eAAiB,SAAUC,WACtBC,UAAYD,KAAKC,UAAYD,KAAKC,UAAY,OAC9CC,KAAKF,cAOdD,eAAeI,UAAUC,MAAQ,KAMjCL,eAAeI,UAAUF,WAAa,EAStCF,eAAeI,UAAUD,KAAO,SAAUF,aAKtCK,cAAgBb,IAAIc,YAAY,CADrB,CAAEC,IAAK,UAAWC,UAAW,6BACD,CACnCD,IAAK,QACLC,UAAW,+BAERH,cAAcI,KAAK,SAAUC,gBAEzBjB,aAAakB,OAAO,CACvBC,KAAMnB,aAAaoB,MAAMC,OACzBC,MAAOL,QAAQ,GACfM,KAAMC,KAAKC,aAEjBC,KAAKF,OAAOR,KAAK,SAAUL,mBAEpBA,MAAQA,WACRA,MAAMgB,YACNhB,MAAMiB,UAAUC,QAAQ,OAAW,MAAQ,KACzCL,KAAKb,OACde,KAAKF,QAQXlB,eAAeI,UAAUe,QAAU,SAAUlB,aAElCL,SAAS4B,aAAa,4BAA6B,eAAgB,EAAGvB,OAOjFD,eAAeI,UAAUqB,UAAY,SAAUnB,qBAElC,wEAA0EA,cAAc,GAAK,aAS1GN,eAAeI,UAAUsB,iBAAmB,kBACjCjC,IAAIc,YAAY,CAAC,CACpBC,IAAK,YACLE,KAAK,SAAUiB,UACfC,QAAU,wEAA0ED,EAAE,GAAK,YACpFC,SACTR,KAAKF,QAG2C,CAUlDf,KAAM,SAAUF,aACL,IAAID,eAAeC,OAG9B4B,KAAM"}